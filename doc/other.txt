Other systems, many but not all in Python, with features or internals of 
interest re Piety.  Other pertinent references too.


Begun 21 Mar 2021, with entries separated out from notes.txt.  Pertinent 
entries from earlier dates may still remain in notes.txt.  Some entries here 
might belong in baremetal.txt.

In the early years of notes.txt, many links to pertinent work, which were
not moved out to here, because they are part of the thinking for the Piety 
design itself.  They are not merely other systems of possible interest for 
the future.


18 Jun 2013

Possibly pertinent 

http://www.aps.anl.gov/epics/tech-talk/2007/msg01036.php

"""
Subject:	embedded python :)
From: 		Heinrich du Toit <heinrichdt@tlabs.ac.za>
To: 		TechTalk EPICS <tech-talk@aps.anl.gov>
Date: 		Tue, 11 Sep 2007 08:10:45 +0200

Hi there

I've started a project that allows me to run an embedded python script
inside an IOC using an ASYN driver.

This allows you to setup (standard) records that using ASYN will call
python functions (inside classes) directly.

It's a multi-threaded environment. 
You can use any channel access library available for python.

It's already in working version - but is still alpha - ie. it needs
work.

If your interested download svn source:
svn co 
http://epicstlabs.svn.sourceforge.net/svnroot/epicstlabs/pythonioc
pythonioc
(in one line!)
"""

A few other python-in-epics systems are mentioned in later posts
in that thread.

Can we check this out under piety/code, next to pycorn et al?  Yes.
It checks out a stripped-down opIOC-type tree with Makefiles and and
st.cmd.  This is 6 years old already so it probably won't work with
recent asyn.

Looking at todo and knownerrors.  Still very rough. "Python code give
errors resulting in IOC crash/breakdown"

13 Oct 2013

More posts about differences between Smalltalk images and Python import:

[Edu-sig] PySqueak issues: image storage
https://mail.python.org/pipermail/edu-sig/2006-May/006349.html

There's something called PySqueak -- !?  Maybe just a notion ...

[Edu-sig] Reloading code (was Re: OLPC: first thoughts)
https://mail.python.org/pipermail/edu-sig/2007-February/007787.html

"""
> On 2/24/07, Paul D. Fernhout <pdfernhout at kurtz-fernhout.com> wrote:
>
> ...the fundamental problem here is that for
> whatever reason a programmer wants to modify just one method of an already
> loaded Python class (which came from a textual module which was loaded
> already), save the change somewhere so it can be reloaded later
> (overwriting part of the textual module?), and also have the program start
> using the new behavior for existing instances without any other side
> effects arising from recompiling this one change. In practice, this is
> trivial to do in almost any Smalltalk system; it is hard if not impossible
> to do in any widely used Python IDE or program (even when a Python shell
> is embedded).
>
> Unfortunately, the paradigm used by every Python IDE I've tried is to
> reload an entire textual module (or more typically, entire program) at a
> time for even the slightest change to one function. Embedded Python shells
> generally allow you to redefine a function if you have a copy of the code,
> but they offer no way to save the code. Most Smalltalks uses a different
> paradigm, where code is presented to the user one function at a time in a
> browser and is compiled one function at a time.  ...
>
> Consider the meaning of an arbitrary piece of Python code near the bottom
> of a textual module. Essentially, you have no idea what it means if the
> original author has used some Python bells and whistles. For example, he
> or she could have defined a metaclass where every nested "def" under a
> class was converted to, say, an uppercase string and stored under a key...

# xreload.py.

"""Alternative to reload().

This works by executing the module in a scratch namespace, and then
patching classes, methods and functions.  This avoids the need to
patch instances.  New objects are copied into the target namespace.
"""
... about two pages of code follows
-- 
--Guido van Rossum 

Guido's reply was just this code, without further explanation.
Some interesting techniques there.

Maybe one way to provide strings-as-files would be to write a fuse
wrapper - then any file editor should work, maybe standard import
would work with small import hook to change search order (or we could
just sys.path explicitly on piety startup).  BUT then we're stuck with
all the crufty file-and-path machinery, instead of just objects.
Maybe we could have a nice object representatino also, which we could
use as an alternative when we wish, and also persist the whole file
sysetm as a pickle.  Then write a FUSE wrapper on top of it.

Maybe we could use a dvcs over the network as the persistent store -
run git (or, maybe better, hg) on FUSE over an in-memory file system,
then persist by pushing from the in-memory file system to a remote
repo.  On startup, clone the remote repo into the in-memory
filesystem.

This is a bit like Lively Kernel's use of WebDAV for persistence, with
the additional wrinkle of building in version control.  The advantage:
checkpointing can often be quicker, because we only push the contents
that changed.

http://stefan.saasen.me/articles/git-clone-in-haskell-from-the-bottom-up/

cites "fantastic" http://ftp.newartisans.com/pub/git.from.bottom.up.pdf

lots of interesting stuff, mention git uses a "pack" (compressed)
format for efficient transmission, says you can use ipfw to limit TCP
bandwidth:

"""
To limit the bandwidth to 20KByte/s for the git native protocol port 9418 use:

$> sudo ipfw pipe 1 config bw 20KByte/s
$> sudo ipfw add 1 pipe 1 src-port 9418

To remove the bandwidth limit afterwards:

$> sudo ipfw delete 1    

This is useful to observe fast local executions that would otherwise be hard to capture.
"""

https://github.com/terencehonles/fusepy

"fusepy is a Python module that provides a simple interface to FUSE
and MacFUSE. It's just one file and is implemented using ctypes."

So it's not pure python...

http://stackoverflow.com/questions/9003351/in-memory-fuse-filesystem

Lots of possibly pertinent links including ...

http://code.google.com/p/pyfilesystem/

"""
Pyfilesystem is a Python module that provides a simplified common
interface to many types of filesystem. ...

Here are a few of the filesystems that can be accessed with Pyfilesystem:

DavFS 	 access files & directories on a WebDAV server
FTPFS 	 access files & directories on an FTP server
MemoryFS 	access files & directories stored in memory (non-permanent but very fast)
MountFS 	creates a virtual directory structure built from other filesystems
MultiFS 	a virtual filesystem that combines a list of filesystems in to one, and checks them in order when opening files
OSFS 		the native filesystem
SFTPFS 		access files & directires stored on a Secure FTP server
S3FS 		access files & directories stored on Amazon S3 storage
TahoeLAFS 	access files & directories stored on a Tahoe distributed filesystem
ZipFS 		access files and directories contained in a zip file 

"""

http://pythonhosted.org/fs/memoryfs.html

"A Filesystem that exists in memory only. Which makes them extremely
fast, but non-permanent. ... If you open a file from a memoryfs you
will get back a StringIO object from the standard library."

http://www.willmcgugan.com/blog/tech/2011/3/20/creating-a-virtual-filesystem-with-python-and-why-you-need-one/

Blog post about pyfilesystem - which is apparently not the same as fuse.

tempfs is a Linux (not just python) in-memory filesystem.

It looks like pyfilesystem is something that sits *above* the
file system and provides abstraction and indirection - it isn't
a file system in itself. 

http://stackoverflow.com/questions/1667257/how-do-i-mount-a-filesystem-using-python

You can't do it - there is no os.mount() - they say you have to use
subprocess to call the system's mount call, or write something with ctypes.  Bah.


https://github.com/terencehonles/fusepy/blob/master/examples/memory.py

This is an in-memory file system - apparently just a dict from
filenames to contents.  Not clear why FUSE is needed at all - I guess
to just fool the host OS into thinking this is a "real" file system - 
Presumably because other clients make kernel calls to write to files, 
but we just want to use this.

24 Nov 2013

Googling pure python curses finds urwid, which this SO post claims is 
pure python:

http://stackoverflow.com/questions/1437458/python-library-for-ncurses-widgets
"Urwid FTW if you need something that provides curses-like capability
but in pure Python. Urwid can render to curses, but defaults to raw
console escape codes. Pretty awesome"

http://excess.org/urwid/

http://excess.org/urwid/examples.html

http://excess.org/urwid/browser/examples/edit.py - 256 lines!

https://pypi.python.org/pypi/urwid/  urwid-1.1.1 2012-11-16

https://github.com/wardi/urwid   merged pull request 19 days ago

https://github.com/wardi/urwid/blob/master/examples/edit.py 255 lines

http://excess.org/urwid/docs/manual/mainloop.html """The MainLoop
class ties together a display module, a set of widgets and an event
loop. ...  Using MainLoop is highly recommended, but if it does not
fit the needs of your application you may choose to use your own code
instead. There are no dependencies on MainLoop in other parts of
Urwid. ... Urwid’s event loop classes handle waiting for things for
the MainLoop. The different event loops allow you to integrate with
Twisted or Glib libraries, or use a simple select-based loop. ..."

Let's try the editor, in particular confirm that it's really pure python.
See if we can integrate the editor with piety event loop.


25 Nov 2013

The urwid editor is very short - 255 lines - versus 409 lines now in
our ed.py.  Much of ed.py is command parsing and argument checking - a
screen editor like urwid's can omit all that because the "arguments"
are all implicit in cursor position and keystrokes, and they are
guaranteed to be valid - just ignore keystrokes that aren't printing
characters or commands.  Get urwid:

Jonathans-MacBook-Pro:code jon$ git clone git@github.com:wardi/urwid
...

Today I found the minime editor via http://chneukirchen.org/trivium/
for 24 Nov 2013.  Pure python, uses urwid - which I just found
yesterday, what a coincidence!  It's advertised git url is

http://daten.dieweltistgarnichtso.net/src/minime.git/

which contains HEAD, branches, config, ..., objects, ...  So how am I
supposed to clone this?  The author Nils Dagsson Moskopp has a gitub
account https://github.com/erlehmann/ with many repos but this isn't
one of them.

10 Feb 2014

Research adapting readline for piety.  Maybe it's already been done: pyrepl

 https://bitbucket.org/pypy/pyrepl
"""
a readline-alike in Python
...
* a new python top-level
...
 * no global variables, so you can run two or more independent readers
   without having their histories interfering. (!? Is this a good thing?)
 * no hogging of control -- it should be easy to integrate pyrepl into
   YOUR application's event loop.
 * generally speaking, a much more interactive experience than readline
   (it's a bit like a cross between readline and emacs's mini-buffer)
...
To get a feel for it, just execute:

$ python pythoni
"""

Ah, the file pyrepl/pyrepl/reader.py is the core.  It has
default_keymap, all control key codes, and class Reader:
"""The Reader class implements the bare bones of a command reader,
    handling such details as editing and cursor motion. ..."""

Maybe we should try it.  Yikes, source has more than 20 .py files
adding up to around 30k chars.  So it's >> 1000 lines 

pyrepl is the PyPy repl!  PyPy uses it instead of gnu/C readline:

http://morepypy.blogspot.com/2008/04/wrapping-pyrepl-in-readline-api.html (2008)
http://pypy.org/compat.html (recent, no date)

https://bitbucket.org/pypy/pypy/src/5a5b32cdebb3b1e60353ca0ef58fc3bfd33f0693/lib_pypy/readline.py?at=default  Just says from pyrepl.readline import *

There was some discussion if using pyrepl readline in IPython

prefer pyrepl to readline #3112 
https://github.com/ipython/ipython/pull/3112

IPython considering to migrate to pyrepl from readline. Does it effect python.el? #138
https://github.com/fgallina/python.el/issues/138

Also stumbled across this - not clear what project made it or what it's good for.
Again, lots of code, very confusing.  The docs say it uses ctypes - apparently
to hook into C readline, it's not pure python.

https://github.com/pyreadline/pyreadline

This blog post also mentions using ctypes to connect to C readline,
using the asynchronous readline functionality.  He has code example using select.

http://wavetossed.blogspot.com/2011/07/asynchronous-gnu-readline.html

Here's the doc on GNU readline asynch functionality

http://www.delorie.com/gnu/docs/readline/rlman_41.html

This project uses pyrepl readline in a Python clone of the bash shell
in a terminal emulator - uses libvte, python-vte, python-gtk.  Maybe 
shows how to integrate pyrepl into an event loop - ?

https://github.com/mseaborn/coconut-shell

27 Jun 2014

Search github for readline - found some interesting pages

https://github.com/antirez/linenoise/blob/master/linenoise.c
'A small self-contained alternative to readline and libedit'
Informative header, nice C coding style
function linenoiseEdit is the core, see case ESC at line 799
for handling esc sequences.

https://github.com/vincenthz/hs-simple-readline/blob/master/System/Console/SimpleReadline.hs
'Simple readline like feature in haskell for modern terminals.'
defaultKeyHandlers at line 40 has all the ascii and esc codes.
This file doesn't seem to collect the escape sequences though.
https://github.com/vincenthz/hs-simple-readline/blob/master/System/Console/SimpleReadline/Terminal.hs getNext at line 44 does seem to be a loop
for collecting characters, idiomatic haskell, don't fully understand.

https://github.com/trygvis/termos/blob/master/termos-core/src/main/java/no/hackaton/termos/ReadLine.java
'Readline implementation in pure Java'
doRead at line 124 collects escape sequences - just handles a few as
special cases.

https://github.com/kablamo/readline-cheat-sheet
'A mobile friendly cheat sheet for the GNU Readline library'
contains source for: http://readline.kablamo.org/emacs.html
and several (many) other versions.  This is worth studying
to make sure we're consistent.

https://github.com/kristopolous/easyline/blob/master/easyline.rb
'A readline ripoff'
def each at line 82 seems to be the code that reads characters and
also dispatches on them, including collecting escape sequences.  Very
terse, clean comment-less style.  What's all this @<identifier> stuff?
http://www.troubleshooters.com/codecorn/ruby/basictutorial.htm
suggests they are instance variables - like self.<identifier> in
Python? Right, in Simple OOP section about at about 80+%: "the at sign
(@) designates this variable as an instance variable -- a variable in
scope only within objects of this class, and persistent within those
objects"

https://github.com/boukeversteegh/pytt/blob/master/pytt.py
'Python TTY, readline, input with line editing, interactive input'
in README: 'Interactive user input for Python (replacement for input_raw).'
self.sequences here at line 24 has esc sequences, looks a lot like the
data structure in the Haskell code (above).  In def read, starting at 
line 206, handles escape sequences.  Clean, mostly comment-less style.

https://github.com/helgefmi/ansiterm/blob/master/ansiterm.py 
'A virtual terminal for parsing ANSI escape codes in python' Uses
_escape_parser = re.compile(r'^\x1b\[?([\d;]*)(\w)') mentioned above.
def feed ... while input: ... starting at 186 appears to be the code
that collects input characters for esc sequences.  But already the
characters have been collected in input, apparently a string.  Note
separation here between feed, parse_sequence (figure out what input
escape seq means) and evaluate_sequence (execute effect of esc

sequence on screen), rather than putting them all together in body of
collect-a-char loop.  Here the chars have already been collected in a
string somehow.

 1 Sep 2014

Search github for ed.py - pertinent hits:

https://github.com/joshsaintjacque/py-ed
A simple Python text editor, uses wxPython
One file, 146 lines, last updated "a year ago"

https://github.com/pierredepascale/PyED
An Emacs like editor implemented in Python
last updated "3 years ago", looks interesting.

 2 Sep 2014

A small self-contained alternative to readline and libedit
https://github.com/antirez/linenoise
https://news.ycombinator.com/item?id=1209646

linenoise.c > 1000 lines! But header has references and guidance on
using ansi sequences.


 7 Sep 2014

Seen on HN, https://news.ycombinator.com/item?id=8283393, comment
in the 'Modernizing "less"' comments:

"terminfo and curses are another bunch of things I'd like to see
go.. or at least delegated from the core of every fullscreen terminal
application to a special compatibility layer (e.g. tmux or screen) for
those using terminals which don't speak ANSI."

And for inspiration, here's another comment in same page,
https://news.ycombinator.com/item?id=8282621

">So...here's the question. I don't think these are broken, so what are you fixing?

First, it's not just about something not working. It's about creating
tools that are extensible and understandable and hackable. Open Source
is not just about "working", it's about being modifiable by the end
user. All this cruft (a mess of 200 obsolete architectures, dead code
and deprecated library support that nobody used since 1988) works
against that goal.

Second, there are things that would be essential for some people, like
international users (e.g proper multibyte support) that cannot be
added due to dependancy of some custom methods of handling
encodings. That's not some wishy washy magical unicorn feature
request, it's essential for the main operation of what less does for
those that have to deal with these encodings.

Third, there's nothing wrong in taking pride and crafting finely your
tools. UNIX is supposed to be made of things that "do one thing and do
it well". Less having its own utf-8 support breaks this division of
responsibility. We have libaries for that. Same for getopts vs it's
custom options parsing."

12 Oct 2014

Ran across something called "transducers" on HN - maybe pertinent to our
"messenger" idea above.

Transducers in Python (no explanation - refers to follwing)
https://github.com/rcarmo/transducers-py
https://news.ycombinator.com/item?id=8444894 

... in Javascript (a bit more explanation but refers to the following)
https://github.com/rcarmo/transducers-py

... more explanation - by Rich Hickey!
http://blog.cognitect.com/blog/2014/8/6/transducers-are-coming

Quick glance at this last one suggests they are kind of like
the 'generators for systems programming' in Dave Beazley's talk
from several years ago.

------

Google finds there is already something called pymacs

https://github.com/pinard/Pymacs

https://pypi.python.org/pypi/Pymacs/0.25

It's apparently a system for mixing Python code with elisp so you can
write emacs extensions in Python - it's *not* a pure Python emacs
clone.  So we'll have to come up with another name.

13 Oct 2014

JC demo'd Impromptu, a live coding environment for Scheme.  It has
already implemented much of the Piety vision.  The editor highlights
the current S-expression, you can evaluate it at the touch of a key.
You can also select larger blocks of text - a define or several
define's or the whole buffer - and evaluate them all at once.
Then apparently each evaluation runs in its own task - so you can
evaluate an expression that plays a (long-playing) music performance,
then later evaluate other commands simultaneously.

http://impromptu.moso.com.au

JC writes it's mac-specific and no longer supported, there is a
successor called extempore.

ICR - Impromptu Compiler Runtime.
http://impromptu.moso.com.au/extras/ICR.html

"It is important to state from the outset that the new Impromptu
compiler is NOT a scheme compiler.  It is really its own language.
This language looks like scheme (sexpr's and alike) but is in many
ways semantically closer to C (a nice functional version of C :-).
This is because the ICR is designed for purposes that are not suitable
for the standard scheme interpreted environment.  Low level tasks that
require efficient processing - such as audio signal processing,
graphics programming, or general numerical programming."

Oh, but earlier page and pubs say it *is* a Scheme system.

Here's the paper

http://www.academia.edu/188336/Impromptu_An_interactive_programming_environment_for_composition_and_performance

also here, just 5 pp

http://impromptu.moso.com.au/extras/sorensen_acmc_05.pdf

another paper, Programming With Time, 13 pp

http://impromptu.moso.com.au/extras/sorensen_ow_2010.pdf

21 Oct 2014

minime at http://daten.dieweltistgarnichtso.net/src/minime/minime
is totally entangled with urwid also.

minime does indeed have a minimal style.  Very compact, I like it.
Consider imitating naming conventions for input keys.

(notes.txt has reviews of many editors and their internals at these
dates - leave them there)

25 Oct 2014

What about minime shell script?

minimal-extensible-editor
http://news.dieweltistgarnichtso.net/ideas/minimal-extensible-editor.html

"bse is a text editor implemented in less than 150 lines of shell
script, without an external configuration file."

bourne shell editor, bse: http://daten.dieweltistgarnichtso.net/src/bse

Uses environment variables CURSOR START END "byte count from the start
of the text" which suggests it uses one big string.  Right, it uses
head, tail, cut with flags indicating byte positions.

It looks like this would not be much longer translated to Python -
using built-in Python string functions instead of bash obscurity. That
might be an instructive exercise. It would also be a Python comparison
to AW's k editor - be ruthless about short names, packing text, use
python ;-separator everywhere etc.

28 Oct 2014

We blew away notes/piety/code/framebuffer.py trying to edit it with bse
BUT a google search for "Drawing to the Linux Framebuffer in Python"
finds this:

https://pypi.python.org/pypi/fbpy/0.1

which looks a lot more heavyweight.  Google also finds

Adding Python wrapping of Linux framebuffer
Mapping Linux framebuffer memory directly from Python by using mmap, ctypes and fcntl.ioctl. The interface is directly taken from 'linux/fb.h'.
https://gitorious.org/gade-pdf-la/gade-pdf-la/commit/70fe9e32b49537de4fa9f2428ec1d5196cd76378

31 Mar 2015

Another pertinent system: the ROT.js rogue-like game system.  See especially:

http://ondras.github.io/rot.js/manual/#timing/engine

"... The ROT.Engine loop is well suited to orchestrating the
possibly-async coordination of various game actors.

To use the engine, you first need a scheduler that stores your actors
and manages their priority. This scheduler is passed to ROT.Engine's
constructor. Once the engine is started, it correctly calls the act()
method on proper actors (picked by the scheduler). ..."

His nomenclature is informative.  In Piety, our piety.Task and job.Job
instances correspond to his *actors*, our the piety.schedule data
structure corresponds to his *scheduler*, and our select loop or the
Twisted reactor correspond to his *engine*.

20 Aug 2015

via HN found http://edbrowse.org/

"Edbrowse is a combination editor, browser, and mail client that is
100% text based.  The interface is similar to /bin/ed, though there
are many more features, such as editing multiple files simultaneously,
and rendering html.  This program was originally written for blind
users, but many sighted users have taken advantage of the unique
scripting capabilities of this program, which can be found nowhere
else. ..."

http://edbrowse.org/usersguide.html#guide

Shows many sample commands - superset of ed commands - some command names
seem to be two letter not one

qt: quit the program completely, whether you've written your files or not 
ci: searches and substitutions are case insensitive
cs: searches and substitutions are case sensitive
sg: substitution strings are global across sessions
sl: substitution strings are local to their sessions
su8: search and substitute uses utf8 character sequences (toggle)
lc: convert line to lower case 

Actually, some of these seem to be parameters but no space between 
1-letter command name and parameter -- but parameter changes the
meaning of the command.

other command names seem to be overloaded

e: print the number of the current session
e3: move to session 3
e foo: edit the file named foo 

d: delete the current line
1,$d: delete all the lines, 1 through eof 
D: delete the current line and print the next line 
dr: directory is readonly
dw: directory is writable, and d moves files to your trash bin
dx: directory is writable, and d deletes files 

Oh, again these could be handled as parameters

Some unused command names in ed are assigned new commands
different from ours

B: find the line with the balancing brace
b: browse the current file, which is assumed to be in html
b foo.html: edit the file foo.html and browse it
b url: fetch url from the internet and browse it
ub: unbrowse a file 

ft: show the title of the current web page
fd: show the description of the current web page
fk: show the keywords of the current web page 

g: go to the link on the current line
g2: go to the second link on the current line
^: the back key, go back to the web page you were looking at before 

It's like emacs info but with ed-like commands made of printable
letters instead of emacs commands with esc- and ctrl- ...

"Context Switch
This program allows you to edit multiple files at the same time, and
transfer text between them.  This is similar to the world of virtual
terminals (Linux), where you switch between sessions via alt-f1
through alt-f6.  In this case you switch to a different editing
session via the commands e1 through e6.  Note that `e 2' edits a file
whose name is "2", whereas `e2' (without the space) switches to
session 2.  Similarly, you can read the contents of session 3 into the
current buffer via r3, and you can write the current buffer into
session 5 via w5. ..."

So he uses e2 etc. the way we use our b <buffername> commmand.  I
think it's better to have a separate buffer command as we do - it's
all one editing session, but with many buffers.

Apparently he has no multiwindow capability - it's for blind users,
duh.

"An e command, by itself, prints the current session, in case you've
forgotten.  This is similar to f, by itself, which prints the current
file."

Hmn, could we overload our e command to do the work of both e and b?

"Instead of invoking `e filename', you can invoke `e
http://this.that.com/file.html', and the editor will retrieve the
named file using the http protocol.  The source (i.e. raw html) is
made available for edit.  You can modify it or save it on your local
machine."

So you can edit any web page you are viewing.

"If the editor contains html text, from any source, even html that you
wrote yourself, you can type `b' to activate browse mode. ...  Now the
transformed text is readable, without any visible html tags.  In other
words, <P> has been turned into a paragraph break, <OL> has become an
ordered list, and so on. ..."

The philosophy here is to overload commands, rather than add modes.
So e <file> loads a file from the file system, e <url> loads a web page 
- loads html source, so you can edit.  Then b (browse) command renders
web page contents instead of showing 


26 Apr 2015

Just seen on HN, this pure Python Vim clone:

https://github.com/jonathanslenders/pyvim

https://news.ycombinator.com/item?id=9441749

Could this run under our present Piety?

23 Aug 2015

Another interesting project - mdless - renders markdown in a terminal.

http://brettterpstra.com/2015/08/21/mdless-better-markdown-in-terminal/

Says it can use Pygments to render code - maybe it's written in Python?
Project page, but I'm not connected now --

http://www.brettterpstra.com/projects/mdless

25 Aug 2015

https://github.com/ttscoff/mdless

It's Ruby.

22 Dec 2015

Coincidentally on HN today, kwm tiling window manager for Mac

 https://github.com/koekeishiya/kwm

README usage section describes "automatic ... binary space partitioning
... when Kwm detects a new window, it inserts it into a window tree
at the specified point using the split-mode specified.   When a window
is closed, it will be removed from the window tree and the tree will
be rebalanced ..." (diagrams show trees and window arrangement on screen)


 4 Jan 2016

Possibly pertinent, appeared on HN:

Pure Python terminal multiplexer. (tmux clone) 
https://github.com/jonathanslenders/pymux

It uses:

    Pyte, for providing a working vt100 parser. (This one is extended in order to support some xterm extensions.)
    docopt, for parsing the command line arguments.
    prompt_toolkit, for the UI toolkit.

It's an in memory VTXXX-compatible terminal emulator
https://github.com/selectel/pyte

 2 Feb 2016

Near top of stealth2-bookmarks.html I ran across

 https://github.com/martanne/dvtm 

tiling window manager in a term window, with animated demo screenshot.

11 Apr 2016

Review Plan 9 terminal window editing, 'Text windows' section in:

http://plan9.bell-labs.com/magic/man2html/1/rio

Key thing about plan 9 terminal: host programs only read from/write to
the output point (distinct from the editing point) at the end of the
accumulating text on the terminal - almost like a printing terminal.
There are no control codes that send a cursor to other locations on
the terminal where the host program can read or write.  BUT, in
addition to typing commands at the output point, you can select and
edit text already displayed on the terminal - including previous
commands or output - without involving the host program at all.  Then
you can print the edited text at the output point with the menu Send
command (which also sends it to the host).


Plan 9 Rio                             Piety command.py/ed.py/eden.py

There is always implicitly             Selected text is a bit like 
selected text, might be                ed's current line, dot.
empty (just a cursor)

Typing into selected text *replaces*   ed c command - but must type c command 
it                                      explicitly.

replaced text goes into snarf          ---
buffer, distinct from sam (editor) 
delete buffer

newline: send text to program,         Same in command.py, type RET
 including newline itself.  Before
newline, the line of text is edited
locally on the terminal.

esc: toggle hold mode on/off, can     Type ^J instead of RET to enter line breaks
 type multiple lines in hold mode.     in command.py
(cursor, text looks different in 
hold mode.)

^D: like newline except doesn't       Same in command.py
 send itself, so host reads 0 bytes
 On empty line, indicates EOF

^H: erase character before cursor    Same in command.py

^W: erase word before cursor 

^U: ease entire line                  Same in command.py

Erased word/char/line goes into       ---
'snarf buffer', distinct from
sam (editor) delete buffer

^F: file name completion for          ---
 preceding string

right, left arrow: move one         Same in command.py
 character in that direction

^A: move to beginning of line       Same in command.py

^E: move to end of line             Same in command.py

up,down arrow: scroll up,down       In ed.py, z command scrolls.
 half a window.   In no scroll      In command.py, up and down arrow
 mode (the default), this is the    access previous/next command in history
 only way to scroll the terminal.
In no-scroll mode, written output
 blocks when text reaches end of 
 screen.

Menu commands (not on keyboard:    
 cut - into snarf buffer           ed d command - into its delete buffer
 snarf - copy into snarf buffer    --
 paste - replace selected text     ed y command
  with contents of snarf buffer    --
 send - copy snarf buffer contents --
  to after output point (so host
  program reads them)  
 scroll/no scroll mode toggle      --

22 May 2016

Seen on the net, screenshot of simple tiling multi window IDE in a terminal:

http://akkartik.name/post/mu

Didn't we see something like this on github a few weeks ago?  Tiling
multiwindow text editor in a terminal.  Used some kind of tree data
structure to manage windows.  Didn't find it in mbp bookmarks or stealth
bookmarks.  Try google: tiling text editor terminal tree data structure
Nothing.  First hits are for sam.
Google: tiling windows tree data structure.  Some hits for i3, an X window manager,
not terminal.  Add terminal to keywords - get the same hits.
Maybe it wasn't an editor, maybe it was screen or tmux replacement?

A terminal multiplexer (like tmux) in Python
https://github.com/jonathanslenders/pymux

That might be it.  Also mentioned in HN. https://news.ycombinator.com/item?id=10831149

This is it!  See the animated screenshots - that's what I remember.

https://github.com/martanne/dvtm

"dvtm brings the concept of tiling window management, popularized by
X11-window managers like dwm to the console."

also (same content as github but older) http://www.brain-dump.org/projects/dvtm/

also mentioned here (Day 26) but goes to dead link: 
http://crunchbang.org/forums/viewtopic.php?id=18273

dvtm posted in HN months ago but no comments

Also ran across this, also pertinent

Edit - vi+acme = (happy face emoji)
http://c9x.me/edit/

includes animated screenshot - calls unix fmt on selected text to
justify it.

Also ran across this again, which I also remember and thought was the same as dvtm,
but its not:

 A tiling window manager based on binary space partitioning
 https://github.com/baskerville/bspwm

This is the one that has the ascii-art diagrams showing tiled window arrangwments
along with the associated tree stucutures.



29 May 2016

Ran across this very interesint project, linked from HN page about
Lisp on Arduino:

 Beta: A small fast lisp interpeter for a ESP8266 as alternative to lua on the nodemcu.
 https://github.com/yesco/esp-lisp

 "I always wanted my own "lispmachine" anyway ...  easy to extend with
 FFI to add new functions. ... The core is about 1000 lines of
 code. Total less than 3000 with xml/web server support. ..."  

 (The httpd web server is in C, not in his lisp)

then:
"""
advanced terminal interaction

In the read-eval loop:

    CTRL-C will terminate input and start over on new line
    CTRL-H/DEL will delete last character
    CTRL-L will reprint line cleanly
    CTRL-T print current status time/load

During evalation

    CTRL-T print current status time/load and a compressed stack (names of functions only)
    CTRL-C will "break" the code and print the stack, cleanup and go to top-level
    'kill -20 ' in another will clear screen and print the current stack
    'watch -n 0 kill -20 '' will continously print the stack; try it on '(fibo 90)' - quite facinating!
"""

 5 June 2016

This HN thread on elisp/emacs:
https://news.ycombinator.com/item?id=6116514 recommends "I use
Textadept, which is like Emacs with Lua and minimalism instead of
Elisp and evrything-but-the-kitchen-sinkness ..." "Try textadept! It
is structured in a way similar to Emacs: small core in C, most
functionality written in Lua. ..."  Wikipedia: "Textadept uses the
Scintilla editing component."  Meh.

20 Dec 2016

picolisp tutorial at http://software-lab.de/doc/tut.html might be
pertinent: in-terminal single-language repl/edit/debug environment.

30 Jan 2017

This turned up on HN yesterday:

The Craft of Text Editing
https://www.finseth.com/craft/

epecially pertinent now:  

Seven: Redisplay
https://www.finseth.com/craft/#c7

HN comments with links to more refs on editor internals:

https://news.ycombinator.com/item?id=13518170

31 Dec 2017

Reading The Craft of Text Editing, chapter on Redisplay: https://www.finseth.com/craft/#c7

Proposes API - obvious, we have covered most of this, except
Refresh_Screen "assumes that the screen has been
corrupted. ... ensures that the screen is correct no matter what else
may have happened."

He references: Linhart, Jason T. (June 1980) Dynamic Multi-Window
Terminal Management for the MagicSix Operating System. Cambridge,
Massachusetts: S.B. Thesis, MIT Electrical Engineering and Computer
Science Department. -- A video terminal management system. Contains
many useful comments on terminal independence and redisplay problems.

Notes that unix curses library "does the redisplay for you" - as do
similar packages for other systems.  Maybe we should look at Python
blessings library etc.

Recommended design: "The sub-editor's responsibility is to handle the
buffer, not redisplay. It is the redisplay's responsibility to handle
the redisplay function."

"7.4.1 The framer is that part of the redisplay code that decides what
part of the buffer will appear in the window. ... so long as the point
would still wind up in the window, leave the start of window
unchanged. If the point would not wind up in the window, place it at
the preferred percentage."

"7.4.2 The Basic Algorithm" Looks obvious - just prints characters in the affected
region - assumes we already have identified the region.

"7.4.3 Sub-Editor Interaction. ... basic algorithm can be sped up tremendously ...
 track the changes made to the buffer in one way or another. ...

 first way ... keep a separate modification flag that tells whether
any changes were made to the buffer since the last redisplay. If no
changes were made, then redisplay will consist of either a simple
cursor motion or a complete screen regeneration.

The second way, and much more useful, is to keep the modification flag
on a per-window-line basis. A general interface to accomplish this
that works with all sub-editor implementation schemes is to define a
third type of mark, called a window mark. This mark has a flag
associated with it. There is one window mark for each line in the
window. Just after a redisplay has been completed, all the flags for
all window marks are clear. Each time the sub-editor changes any of
the buffers' contents, it sets the flag on the window mark that is
located before and closest to the change. The redisplay code can
examine the flags. Only window lines that have their corresponding
window marks set need to be examined closely during redisplay."

This is our keep track of changed lines scheme - we don't need a mark
on each line, we just need two numbers per window to identify the
range of lines to change -- oh, but if there is a move, there might be
*two* ranges!

"one more flag that can help redisplay a great deal. This flag is only
useful if the point is located at the end of a buffer line. The flag
would say whether any buffer modification other than "insert one or
more characters" has been performed. If the flag says not, all that
redisplay needs to do is to output those characters. As this situation
is very common, it can save a significant amount of computation."

I think we do this implicitly in our Console/InputLine - we just
don't need to redisplay the in-line edits at all.

"7.4.4 The Advanced Algorithm ... assign a unique identifier to each
window line. ... When the redisplay encounters a modified line (the
unique identifiers don't match), it performs a pattern match on the
unique identifiers for the remainder of the window. [To determine whether
lines were deleted, inserted, or changed]  It then uses the
information derived from that match to determine the best sequence of
insert/delete line commands to issue to the screen.  ..."

(previously) "A third way is to associate a unique identifier with
each window mark instead of a flag. This identifier would be changed
by the sub-editor whenever the associated text changes (i.e., instead
of setting a flag it changes the unique identifier). ... Some
sub-editors that use the linked-line scheme use the addresses of line
structures as the unique identifiers."

So it seems the assign ID/check ID/pattern match is an alternative to 
keeping track of start,end,dest,ninserted when edits are made.

He devotes a lot of attention to updating the minimal number of 
characters in a line - we believe we handle this already
by updating directly on screen with Console/InputLine.

21 Mar 2018

In HN this AM there is a post about a Python program called Poetry:

Show HN: Poetry – Python dependency management and packaging made easy (eustace.io)
https://news.ycombinator.com/item?id=16639118

24 Nov 2018

From Dan Murphy's The Beginnings of TECO
  http://tenex.opost.com/anhc-31-4-anec.pdf 

"To do significant restructuring (e.g., move a sizeable amount of text
from one place to an- other or replicate a segment of text a number of
times). To provide this, I added the con- cept of text variables—that
is, a variable that would hold an arbitrary section of text.  The
command to move a range of text into a text variable was x . (I was
running low on unused letters by then.) Its prefix argu- ment(s)
identified a range of text in the buffer in the same way as the k
command, and the single letter following the x was the variable name
from the set a–z, 0–9.  g (get) was used to copy the contents of a
text vari- able into the main buffer at the editing point and could be
used any number of times to replicate copes of the text. Despite the
lack of a mnemonic association for x ,it quickly came to seem natural,
almost intu- itive. To x something became as easily spo- ken and
understood by TECO users as ‘‘store’’ would have been.  

Then, given that we had the ability to store any text in a variable, I
implemented a com- mand to execute a text variable as a TECO command
string. An optional argument could be given in the form of a preceding
ex- pression. Thus, TECO came to have a form of macro or callable
function, and it followed from the original concept that a concise
string of text would represent commands to modify other text"

24 Jan 2019

Back to image/checkpoint: searching python image just gets image processing,
PIL etc.   But python checkpoint finds 
http://conference.scipy.org/proceedings/scipy2013/pdfs/arya.pdf
DMTCP: Bringing Checkpoint-Restart to Python
"... One   can   view   checkpoint-restart   as   a   generalization   of
pickling.  Instead  of  saving  an  object  to  a  file,  one  saves  the
entire  Python  session  to  a  file. ..."  -- !!

13 Feb 2019

https://stackoverflow.com/questions/722204/
which-programming-languages-besides-smalltalk-are-image-based

https://stackoverflow.com/questions/53839202/
is-it-possible-to-have-a-similar-workflow-in-python-as-in-smalltalk-e-g-pharo?noredirect=1&lq=1


18 Apr 2019
README page shows pages from novels displayed
in simple but pleasant all-text format:

https://github.com/alexanderbarbosa/novels.org

It would be nice to make windows accessible in
command line via a key, like we do with buffers.
Windows already have an index in windows list, but
it changes as windows added/removed - would be better
if they had a *stable* index.   IN the meantime
can we just print current window number in the status line?
How does win stay stable when we add/remove other windows?


10 May 2019

https://ipython.readthedocs.io/en/stable/interactive/magics.html

IPython has 'magic commands' prefixed by % - many of these configure
the IPython session but some run system commands: %cd %pwd etc.

 %sc - Shell capture - run shell command and capture output (DEPRECATED use !).

You should use the form ‘var = !command’ instead. Example:

    “%sc -l myfiles = ls ~” should now be written as

    “myfiles = !ls ~”

myfiles.s, myfiles.l and myfiles.n still apply as documented below.
(.s is space-separated string, .l is a list of strings, .n is a newline separated string)

Also %system and %sx (shell execute) as alternatives to !(shell command) and !!(shell command)
!! captures output into a list.

22 May 2019

Python properties might be useful in Window and Buffer:

https://treyhunner.com/2019/05/python-builtins-worth-learning/

"property - This decorator allows us to create an attribute which will always seem
to contain the return value of a particular function call. ..." (example)

12 Jun 2019

https://ask.metafilter.com/334875/Why-do-my-Python-scripts-not-finish#inline-4816078

Tips on debugging elusive Python problem, hung program started by cron.

Recommend: kill process with SIGINT, gives stack trace on stderr just like
 typing ^C.  This is probably the simplest thing to do.
Recommend: connect to hung process with gdb (example shown).
Recommend: Python gdb extensions

 https://wiki.python.org/moin/DebuggingWithGdb

13 Jun 2019

https://ambrevar.xyz/emacs-everywhere/

"When I started using Eshell as my main shell, the benefits of the Emacs
interface became increasingly obvious ..."

"... EXWM has all the benefits of being Emacs-based with the particularity that
all X windows are buffers and as such are part of Emacs buffer list, which
makes for the capability to fuzzy-select windows with Helm or Ivy!"

14 Jun 2019

https://bytes.yingw787.com/posts/2019/02/09/concurrency_with_python_csp_and_coroutines/

Links to much more about concurrency including

http://masnun.com/2015/11/13/python-generators-coroutines-native-coroutines-and-async-await.html

via

https://news.ycombinator.com/item?id=20095004

---

https://joy.recurse.com/posts/257-zit-the-imitation-stupid-content-tracker

" a minimal implementation of git written in a few hundred lines of code. "

https://github.com/jmou/zit

"... this is not a robust implementation of git so don't let it out
on your important code. ...

zit is not intended to be "well written" code. It intentionally avoids any
significant refactoring (like functions) or error handling. It tries in many
ways to be like git: imperfect but simple. Instead zit is meant to be a terse
implementation to help demystify git.

Most of the files are named after actual git commands, so you can use git help
to read relevant documentation.

The zit code is structured similarly to git v1.0."

Lots of links in this README.

github says Shell 54%  Python 46%

Just a bunch of bash and Python scripts, one per command.
All the files are so terse I don't find much tutorial value re git,
you would have to understand git internals very well to understand this.

But this does demo some interesting, arcane and terse shell and Python idioms.
I like his terse bash + Python style, worth reading.

His index.py uses python std lib struct, write-tree (used by commit)
uses python bytearray.
This style might be useful for the OS part of Piety, if we ever get to it.

See author's talk, very brief history of version control
https://github.com/jmou/rc-git-storytime/blob/master/Git%20storytime%202016-11-10.pdf

See also author's snake game, uses curses, one file, 121 lines total, 100 sloc
https://github.com/jmou/rc-snake

18 Jun 2019

Recent links:

A Debugger for Bash in Six Lines of Bash
https://blog.jez.io/bash-debugger/

one of this blog:  https://blog.jez.io/categories/

Clean and simple page design, some interesting topics.  Also:

https://loomcom.com/blog/

Another one with clean and simple page design, mostly
on retrocomputing (restorations and emulators), some other topics.

https://github.com/EspoTek/Labrador

"EspoTek Labrador is a USB device that transforms your PC or smartphone into a
fully-featured electronics lab. This repo holds all of the source code!
http://espotek.com "

via https://news.ycombinator.com/item?id=20126760

http://akkartik.name/post/mu-2020

10 Jul 2019

Seen on the net, via HN:

Xonsh Tutorial at Scipy 2019
https://xonsh.github.io/scipy-2019-tutorial/#1

"The source command:
    Reads in the contents of a file,
    Executes it, and
    Brings all global variables into the current execution context."

So this is the same effect as our pysh.runlines, edo P and R commands,
edsel ^T command.

"As Python, you could also import example, with the normal Python rules."

So source is an alternative to import.

"Unlike other languages, xonsh enables you to source scripts written in shells
other than xonsh (or Python)."

"An event is a trigger that can fire at predefined points in code.
An event handler is a function that is called whenever a given event is fired. 
An event can have multiple handlers -- that is, you can run arbitrarily many
functions that are all triggered by a single event firing. ...
There are several events that are already registered with xonsh ...
how to add new events in a little bit).
events.on_chdir fires every time we... change directory.
You can register a handler by decorating a function with the event object:...
... to create an event, you create a docstring for the event. This is truly
self-documenting code. ..."

Python consumes too much memory, or how to reduce the size of objects
https://news.ycombinator.com/item?id=20401055

about https://habr.com/en/post/458518/  

"A significant reduction in the size of a class instance in RAM is achieved 
by eliminating __dict__ and__weakref__. This is possible with the help of
a "trick" with __slots__: ..."

HN comments:

"The article doesn't mention a hidden gem in Python's standard library -
typed arrays!
Those are in package `array` and they are a very barebones version of numpy's
ndarray - with just one (explicit) dimension and no overloaded operators.
But if you just want to keep a bunch of numbers in a contiguous array,
they can save you tons of memory."

other comments link to:

 https://rushter.com/blog/numba-cython-python-optimization/

 O'Reilly book High Performance Python (URL in comments page, didn't copy)


13 Jul 2019

expressPython - A small Python editor for learning and competitive programming.
https://github.com/JaDogg/expressPython

via Show HN: ExpressPython A small Python 3 editor (github.com)
    https://news.ycombinator.com/item?id=20429025

"What's different from IDLE?

   A window to type stuff that can be read as stdin. Honestly I didn't built
   it to compete with IDLE or other similar editors.
   ... It's not meant to be used as a standalone IDEs/Editor.
   ... This is to test stuff out quickly."

Many dependencies including Qt.


29 Jul 2019

Pure Python event bus for multi process apps that supports asyncio and trio

https://news.ycombinator.com/item?id=20553024

https://github.com/ethereum/lahja

Lahja is a generic multi process event bus implementation written in Python
3.6+ to enable lightweight inter-process communication, based on
non-blocking asyncio


30 Jul 2019

https://news.ycombinator.com/item?id=20558388

"I think Faust looks like exemplary modern Python."

https://github.com/robinhood/faust

"Faust is a stream processing library, porting the ideas from Kafka Streams
to Python. ...

Faust requires Python 3.6 or later for the new async/await syntax, and variable 
type annotations. ...

The Agent decorator defines a "stream processor" that essentially consumes from 
a Kafka topic and does something for every event it receives...

Faust only requires Kafka, the rest is just Python ..."

Might be useful for async/await style.

 6 Aug 2019

https://github.com/hchasestevens/astpath/

"A command-line search utility for Python ASTs using XPath syntax."

https://greentreesnakes.readthedocs.io/en/latest/

"Green Tree Snakes - the missing Python AST docs

Abstract Syntax Trees, ASTs, are a powerful feature of Python. You can write 
programs that inspect and modify Python code, after the syntax has been parsed,
but before it gets compiled to byte code. That opens up a world of 
possibilities for introspection, testing, and mischief.

The official documentation for the ast module is good, but somewhat brief. 
Green Tree Snakes is more like a field guide (or should that be forest guide?) 
for working with ASTs."

27 Aug 2019

https://www.sqlite.org/fasterthanfs.html

"SQLite reads and writes small blobs (for example, thumbnail images) 
35% faster than the same blobs can be read from or written to individual files
on disk using fread() or fwrite().

Furthermore, a single SQLite database holding 10-kilobyte blobs uses about 
20% less disk space than storing the blobs in individual files.

The performance difference arises (we believe) because when working from an
SQLite database, the open() and close() system calls are invoked only once,
whereas open() and close() are invoked once for each blob when using blobs
stored in individual files. It appears that the overhead of calling open() and
close() is greater than the overhead of using the database. The size reduction
arises from the fact that individual files are padded out to the next multiple
of the filesystem block size, whereas the blobs are packed more tightly into
an SQLite database. ..."

via https://news.ycombinator.com/item?id=20729930

"For small- to mid-sized projects, Ive always realized huge gains in simplicity 
by haves Files tables to store various assets. ... So yes, if you are building
a massive scale system holding millions of files, sure, find a purpose-built
system to store, distribute, version, and backup your files. ...  having a 
single source (the DB) for everything the app needs to initialize is a 
massive simplification. ..."

"... one of the advantage here is, you are able to store/read metadata along 
the file content easy without worrying the metadata and file may desync in 
some way or corrupted. This makes serve something like Image (photo dimension)
or video(length) metadata way easier. Some filesystem (like ntfs) do have place
to save metadata along files, but most filesystem don't have the way to done 
that properly ..."

Possibly related:

[erlang-questions] Why do we need modules at all? by Joe Armstrong
http://erlang.org/pipermail/erlang-questions/2011-May/058768.html

"I'm proposing a slightly different way of programming here
The basic idea is

    - do away with modules
    - all functions have unique distinct names
    - all functions have (lots of) meta data
    - all functions go into a global (searchable) Key-value database
    - we need letrec
    - contribution to open source can be as simple as
      contributing a single function
    - there are no "open source projects" - only "the open source
      Key-Value database of all functions"
    - Content is peer reviewed

These are discussed in no particular order below: ...

... Strings are lists, so why do we have two modules lists.erl and
string.erl how should I decide in which module my new string/list
processing function should go.

To avoid all mental anguish when I need a small function that
should be somewhere else and isn't I stick it in
a module elib1_misc.erl. ...

   functions are really easy to reuse
   modules are more difficult to reuse
   entire applications are very difficult to reuse
     (Unless there are isolated through a communication channel)) ..."

via https://news.ycombinator.com/item?id=20808000

"We already have this in JavaScript: isArray, is-even, left-pad, etc.
And the (searchable) database is called npm."

"When people criticize NPM for having millions of downloads for single-function
packages, this is exactly the letter I always think of.
When Joe Armstrong proposed this, I thought, "Hm, that's an interesting idea."
But I think NPM has shown that it isn't such a great idea in practice."

Joe Armstrong's elib1_misc.erl is a bit like our Piety/util/util.py -
but ours only has one fcn in it: putstr, print string
on console with no formatting, flush immediately.

21 Oct 2019

A Python command-line shell
https://github.com/terrycojones/daudin

"The aim is to provide an interactive shell that is as convenient to use as the
regular shell (in particular providing pipelines) but which has Python as its
programming language."

"you can mix Python and the shell in a daudin pipeline:

>>> import this | grep 'better than'
... "

etc. etc.  Seems very thorough and well-thought out,
very informative "How commands are interpreted" section at about 70%,
and following sections including Background

".. I started thinking about how to write a shell that was all Python, with the
elegance of shell pipelines (both conceptually and syntactically), and that
would allow anything to flow along the pipeline. And, for bonus points, make it
easy to use and seamlessly tie in to all the UNIX commands a regular shell
provides access to. ..."

Also provides special command like %cd - same syntax as in IPython.


27 Sep 2019

Live module editing and development enhancement supporting hot reloading for Python 3.4+ 
https://github.com/CFSworks/limeade

"... Automatic: Just call to limeade.refresh(); Limeade does the rest!
Thorough: Updates your classes/functions even if instantiated/referenced!
Object reuse: Mutable objects are modified in-place; doesn't break is! ..."

12 Nov 2019

Stumbled on:  https://www.pygame.org/project-Python+OS-2331-.html
"Python OS is an environment for Python and Pygame applications to run in. ...
With Python OS 3.2.0 and onward, Python OS supports "layered 
multitasking", so that there can be several applications open at once, 
while the status of the last application is preserved. ...
It features a linux-like command line, a host of new and redesigned apps, 
and a package system for downloading ...

http://adamfurman.privatepage.sk/PythonOS/  "

This URL is a 404.  Releases were in 2012-2013.

Comment: "So... It isn't really an OS. Its more like a client for 
launching other python programs? ..."

Comment: "The files are now hosted on https://sites.google.com/site/.... I 
am working to put the project on GitHub. ..."

what is this 'layered multitasking' ?  Google finds nothing - just the usual
about async and multitasking. 

https://github.com/furmada/PythonOS is Adam Furman's Python OS.
"This project is no longer being actively developed. Its successor project 
is Polaron", "API for building event-driven Pygame apps"

"Key features include:
    Application stack with support for threading, suspend, and app switch.
    ...
    Event-driven callback programming that mixes the best of Python and Javascript.
    ...
    Easy persistent storage."

Serious effort, top level 2823 line pyos.py includes both tasking
(using python thread) and gui (using pygame).

There are lots of other projects named PythonOS at GitHub:

https://github.com/cleanycloth/PythonOS
"A quick and dirty operating system lookalike program made in Python, 
originally as a joke between myself and a friend in college..."
a simulated shell, apparently

https://github.com/MatiasNAmendola/PythonOS
"A useless buggy mess" - another simulated shell

... and a couple of other different simulated shells all called PythonOS or 
similar.

A couple of repos named Piety - that are both empty!

21 Nov 2019

Minime editor linked on utilities.md has another solution for packing a 
lot of functions into the few available keys:

http://daten.dieweltistgarnichtso.net/src/minime/README

Uses ctrl-up and ctrl-down, also shift-up and shift-down.  Do those have 
different single-character ascii codes, or is it done with low-level 
tricks on keyboard encoding?  utilities.md says minime uses urwid, which 
we decided not to use.

I now remember the arrow keys do not have ascii codes, they send escape
sequences which we do not really handle correctly (after esc we block waiting
for the remaining characters). So the answer is no.

 5 Dec 2019

A Hacker News command line interface
https://github.com/donnemartin/haxor-news

All Python.  Amazingly full-featured.  Uses python-prompt-toolkit

discussion with links to other HN CLI clients:

https://news.ycombinator.com/item?id=11518596

comment says you can't comment or vote.

16 Jan 2020

From https://news.ycombinator.com/item?id=22064805

"lets not forget autocomplete exists even in the default python interpreter

>>> s=""
  >>> s.[TABTAB]
  s.__add__(  ...
  ...
"
 
I didn't know that!  The trouble is, there are usually way to many to be
useful:

>>> edsel.edsel.TAB TAB
Display all 284 possibilities? (y or n) 

In Piety console this doesn't work because it defines its own TAB.

20 Jan 2020

Add methods retroactively in Python with singledispatch
https://opensource.com/article/19/5/python-singledispatch

This isn't exactly monkey patching -- it doesn't *replace* 
existing methods, it adds new ones.   But it's close.
Also, example here uses source files, not command line at runtime 
-- so it's not live coding.   It's worth looking at this whole module
to see what might be possible.

29 Jan 2020

Ask HN: Does This Python REPL Exist?
https://news.ycombinator.com/item?id=22168293

"I would like a Python setup a la RStudio. ...
...
at any point I can run a keyboard shortcut which executes the current line* of code
- if the cursor is on a part of a code block like the top line of a 
function definition or an if statement, the REPL is smart enough to figure 
out that I want to run the entire block of code
- after running, the cursor moves to the next line or to the line after 
the block that was just executed
...
- the Python session stays live and can be inspected after the code finishes running
..."

After a day only one response:

"It was possible to setup Light Table to work like this. The project is 
unfortunately dead."

 2 Mar 2020

Seen in HN, possibly interesting features to consider for edsel etc.

https://www.iterm2.com/documentation-one-page.html

https://news.ycombinator.com/item?id=22461605

comments describe many features, interaction with tmux, alternatives
for linux.

24 Mar 2019

Seen on HN recently:

A runtime python code manipulation framework for profiling, debugging and bugfixing
https://github.com/devopspp/pyliveupdate

"PyLiveUpdate is tool to help you modify your running python code without 
stopping it. It is useful for modifying long-running server programs in 
production with zero downtime. Some modification scenario includes: inject 
code to profile the runtime of certain lines of code; inject code to print 
out a variable for debugging; apply a patch without restarting."


https://bkhome.org/archive/puppylinux/development/howpuppyworks.html
"Page updated: 9 Sept 2006"
Puppy Linux, weird distro with unusual/bizarre persistence scheme

"Saves ramdisk (your working files) to Flash drive every 30 minutes, so 
extending lifetime of flash media (by restricting the number of writes).
...
Puppy1 has a rather complicated system whereby the home directory (/root) 
is writable, and /etc and /usr are made writable by actually saving the 
files inside /root.
The persistent storage file pup001 mounts on /root. The original files of 
/usr are in a compressed read only file called usr_cram.fs.
...
Puppy2 mounts the persistent storage file pup_save.sfs at the top level, 
that is, on "/". The read only compressed file with all the Puppy files, 
pup_xxx.sfs, mounts on "/" also. ..."

Comment on Puppy from https://news.ycombinator.com/item?id=4111918 in 2012:
"We have Doctors Without Borders for a reason. What we need now is the 
same thing for designers to rescue open-source projects like this from 
their miserable, hideous state."

 8 Apr 2020

https://github.com/willmcgugan/rich

"Rich is a Python library for rendering rich text and beautiful formatting 
to the terminal.

The Rich API makes it easy to add colorful text (up to 16.7 million 
colors) with styles (bold, italic, underline etc.) to your script or 
application. Rich can also render pretty tables, progress bars, markdown, 
syntax highlighted source code, and tracebacks -- out of the box. ...

To effortlessly add rich output to your application, you can import the 
rich print method, which has the same signature as the builtin Python 
function...."

30 Apr 2020

For wireless robot project at work, I need non-blocking timer in Python, as
alternative to blocking sleep().  Apparently there is a threading.Timer()
with a callback arg that gets called when timer expires.  It looks like a simple
way to get this without going the whole async route.

https://stackoverflow.com/questions/22180915/non-polling-non-blocking-timer


14 May 2020

https://github.com/hauntsaninja/pyp  "Easily run Python at the shell"

Write python expressions inline in shell command line as an 
alternative to bash expressions or awk.  Useful in pipelines.

Might be useful source of examples for how to use pyton to do shell-like
things.

Comments at https://news.ycombinator.com/item?id=23127628
with more cmd line examples and links to many similar projects.
github page also links to similar project.

28 May 2020

Hypermodern Python
https://cjolowicz.github.io/posts/hypermodern-python-01-setup/

"This article series is a guide to modern Python tooling with a focus on
simplicity and minimalism.1 It walks you through the creation of a
complete and up-to-date Python project structure, with unit tests, static
analysis, type-checking, documentation, and continuous integration and
delivery."

via comments at https://news.ycombinator.com/item?id=23336050

with many recommendations for simpler/easier alternatives.

 2 Jun 2020

A free Linux distro with a fully Python userspace 
https://github.com/joshiemoore/snakeware

"snakeware is a free Linux distro with a Python userspace inspired by the
Commodore 64. You are booted directly into a Python interpreter, which you
can use to do whatever you want with your computer.

Our window manager, snakewm, is based on pygame/pygame_gui. We do not use
X11; snakewm draws directly to /dev/fb0. ..."

via https://news.ycombinator.com/item?id=23391380

This is the nearest thing to Piety I've seen!  But it's still on top 
of Linux.  HN comments about interprocess communication with text streams
in pipes, shell commands ls cp etc.

An HN comment links to

http://perllinux.sourceforge.net/

"Welcome to Perl/Linux. A Linux distribution where ALL programs are
written in perl."

10 Jul 2020

HN comments on Acme and links may be helpful for edsel and successors

https://news.ycombinator.com/item?id=23779894 especially

https://news.ycombinator.com/item?id=23782422

"...drop useful commands into a "guide" file in that directory; that way
you can keep a whole suite of commands to run tests, run benchmarks, build
& deploy, etc. right at your fingertips. ..."

https://news.ycombinator.com/item?id=23780354

".. some very interesting features are on display.
Some that stuck out were using filenames plus regexes or line numbers to
create links in text files, a text file that is also a shell session,
things that have been done in vi/emacs but this editor is mouse-centric so
it looks very different. "

https://news.ycombinator.com/item?id=23783401

"The emphasis on "integrat*ing* development environment" ...

- acme is complemented by the plumber, which acts according to user
defined rules when receiving a text selection (and context)

- anything in acme is text, which is editable. Menu bar, buffers, shell
window... the editable dumb terminal is great.

- acme features a 9p fs "api" to access its state, and modify it, with any
program. ..."

Links to http://www.call-with-current-continuation.org/ma/README
...
* Avoid the console, a temporary guide file with commands reduces 
  typing
...

https://news.ycombinator.com/item?id=23786383

"... Sure vim is a vastly superior text editor and acme is a better
"integrating" text environment. Something as different as a Jupyter
notebook. 

As for vim limits: poor mouse support, window management, plumber support,
notebook like features (emacs org Babel), editable interface, jump to
/path/to/file:/search pattern/ and other Sam expressions ..."

11 Jul 2020

https://clojure.org/guides/repl/introduction

https://clojure.org/guides/repl/enhancing_your_repl_workflow

comments on Programming at the REPL (in Clojure)
https://news.ycombinator.com/item?id=23791152

https://news.ycombinator.com/item?id=23794496

"Well, with proper REPL integration, you never really type/copy/paste into
the REPL.

You write your code in a source file like normal, highlight what you want
evaluated, and have the REPL evaluate it.

Clojure has a great REPL because you are effectively working inside your
own codebase, as it runs. Its a strange idea to wrap your head around, but
very cool.

You can get something similar to this approach in JavaScript using
Quokka[0]. It's not as complete as a Clojure REPL, but its still quite
nice.  [0] https://quokkajs.com/"

https://news.ycombinator.com/item?id=23794337

"That is a poor man's REPL. (re previous post, not Clojure) 

- No graphical display

- No support for displaying interactive structure data (Lisp Machines
REPL/commercial Common Lisp/modern notebooks)

- No debug-break, fix, redo workflow

- No partial selection of command statements and "Do this"

- No interactivity with running graphical applications and scripting them
(via COM, DLLs, OS IPC)"

https://news.ycombinator.com/item?id=23340291

" ... I agree that Python's REPL is underpowered when compared with SLIME. But
 it's trivial to write up a bit of Python code in an editor, and just
 'reload(modname)' or 'exec(file(...).read())' from the REPL. Emacs'
 python-mode (like many other editors) also supports "evaluate this
 expression / line / block" to make this process simpler. YMMV, but my
 Common Lisp development really doesn't look very different from my Python
 work.

https://github.com/matthiasn/talk-transcripts/blob/master/
Halloway_Stuart/REPLDrivenDevelopment.md

"----
slide title: Save Everything

Don't type into a REPL

  Type into a buffer

Save into a file

  No organization required
-----

The next point is: save everything.

When I am developing, I type into a file. For a long time -- emulating
what I believe Rich does -- no one has actually ever seen Rich type, so
there is a lot of theorizing and hypothesizing about what he actually
does. Sometimes I think he just stares at the screen and the Clojure code
appears.

But what I did for a while, and what I think he does, is I had one file
that was eventually several tens of thousands of lines long, that just had
every line of Clojure code -- experimental, you know, whatever I had ever
typed. Which is fantastic, right, because then you can say, "What was I
thinking about the other day when I was doing X, Y, or Z?" And it is just
right there in the file. And of course text search and structural search
are powerful enough in our tools now that you cannot, as a human, write
enough code in the rest of your life that it would be hard for you to
search all of it, if you had it in one place.

For no particular reason, I now create a new file every month. And they
are all in the same directory, so right now I am working on the June 2017
file. But it just has all of the Clojure code that I thought about in June
2017. And of course the stuff that is actually going to go into Clojure,
or into a library, or into production code, also gets pulled out of there
and put into wherever it is going to go."

15 Jun 2020

Hot-swapping Python 3 code 
https://news.ycombinator.com/item?id=23498506

Lots of comments on the well-known pitfalls in importlib.reload(), partial
workarounds.  Most recommend just restarting Python.

"Don't hot swap. Just don't do it. ... There's no earthly reason for most of
us to be learning this."

Several recommendations for hupper: 

https://docs.pylonsproject.org/projects/hupper/en/latest/

also entr:

http://eradman.com/entrproject/

also 

Werkzeugs reloader implementation:
https://github.com/pallets/werkzeug/blob/master/src/werkzeug...

also IPython autoreload

https://github.com/ipython/ipython/blob/f8c9ea7db42d9830f163... 

also

"Have a look at https://github.com/julvo/reloading, it's a little library I
wrote that can give you edit-code-and-continue-debugging in Python loops."

and many comments about how other languages do it better.

29 Jun 2020

A Brief Glance at How Various Text Editors Manage Their Textual Data 
https://ecc-comp.blogspot.com/2015/05/a-brief-glance-at-how-5-text-editors.html

"A review of how GNU Moe, Plan 9 Sam, Bill Joy's Ex/Vi, GNOME
GtkTextView/GtkTextBuffer, GNU Emacs, and due to popular demand,
Scintilla, manage their textual data."

Not so brief, actually quite detailed. 
w
 2 Jul 2020

https://snarky.ca/what-is-the-core-of-the-python-programming-language/

via https://news.ycombinator.com/item?id=23698846

About author's planned Python to webassembly compiler, notes that Python 
includes lots of hard-to-compile constructs, he mentions locals(), 
sys.settrace(), sys.getframe()

15 Jul 2020

https://github.com/svetlyak40wt/python-cl-conditions

"Implementation of the Common Lisp's conditions system in Python. ...

There is a very good explanation of how they work  a chapter from the book
Practical Common Lisp by Peter Seibel: Beyond Exception Handling:
Conditions and Restarts. (link in original page)

Python's exceptions cover only one scenario from this book, but Common
Lisp's conditions allows more interesting usage, particularly "restarts".
A restart is a way to continue code execution after an exception was
signaled, without unwinding the call stack. I'll repeat: without unwinding
the call stack. ...

doc at https://python-cl-conditions.readthedocs.org/

... There is also the withrestart Python library (link), created with the
same intent as conditions. But it has a clunky API and a weird name, and
seems abandoned since 2010."

via The Common Lisp Condition System - Upcoming Book 
    https://news.ycombinator.com/item?id=23843525

with many long comments by the author on the motivation and workings
of the CL condidition system.

22 Jul 2020

via 
     
How and why I attempt to use Links as main browser
https://news.ycombinator.com/item?id=23910228

Lots on miminal browsers, using the framebuffer instead of X etc.

"https://www.uzbl.org is a set of python scripts implementing a browser"

"https://en.wikipedia.org/wiki/Uzbl"

"In theory you can build[1] the text renderer on top of the Servo web engine. Something..
[1] https://github.com/servo/servo/issues/24162 "

"w3m works really great with framebuffer. imho it renders webpages in a
cleanset way, compared to all other text browsers. plus it has default
vim-like keybindings."

https://github.com/tats/w3m

an interesting part is under this comment 

https://news.ycombinator.com/item?id=23910572

which links to 

Firefox Reader Mode in your terminal!
CLI tool for Mozilla's Readability library
https://gitlab.com/gardenappl/readability-cli

"readability-cli takes any HTML page and strips out unnecessary bloat by
using Mozilla's Readability library. As a result, you get a web page which
contains only the core content and nothing more. The resulting HTML is
suitable for terminal browsers, text readers, and other uses.

Here is a before-and-after comparison, using an article from The Guardian
as a test subject. ...

...

Why Node.js? It's so slow!
I know that it's slow, but JavaScript is the most sensible option for
this, since Mozilla's Readabilty library is written in JavaScript. There
have been ports of the Readability algorithm to other languages [link], but
Mozilla's version is the only one that's actively maintained as of 2020."

That link is:

https://github.com/masukomi/arc90-readability

lists many many implementations in several languages, including 5 in python.

pertinent comments from the thread under the HN link:

"I'm also surprised at how poorly Reader Mode fares with "pages" served as
text/plain. ..."

"True plain text -- as opposed to something like Markdown or another
"plain text markup" format -- is hard for a reader mode, because you're
going to have to put some effort into deducing the structure of whatever
document you're looking at and that could be highly idiosyncratic from
author to author. ..."


21 Aug 2020

Welcome and unwelcome technologies
https://github.com/probonopd/hello/wiki/Welcome-and-unwelcome-technologies

"We are not building a "Linux distribution". In fact, we are building the
opposite of a "Linux distribution". We are building minimalistic end-user
appliances (embedded systems for the desktop, possibly for media
consumption devices and other form factors) that happen to use a Linux
kernel as its hardware abstraction layer, but otherwise has not much in
common with a "Linux distribution".

Some technologies are not wanted in this project because they are too
complex or deemed aesthetically unpleasant. ..."

29 Aug 2020

Advanced Operating Systems COMP9242 2020/T2
https://www.cse.unsw.edu.au/~cs9242/20/lectures.shtml

with links to some of the many many papers in this big page, for example:

Bibliography
https://www.cse.unsw.edu.au/~cs9242/20/papers/index.shtml#Barham_DFHHHNPW_03


31 Aug 2020

https://www.cambus.net/modernizing-the-openbsd-console/

"... One thing some people might not realize, is the huge discrepancy between
text mode and framebuffer consoles regarding the amount of data you have
to write to cover the whole screen. In text mode, we only need to write 2
bytes per character: 1 byte for the ASCII code, and 1 byte for attributes.
So in 80x25 text mode, we only need to write 80 * 25 * 2 bytes of data,
which is 4000 bytes, and the VGA card itself takes care of plotting
characters to the screen. In framebuffer however, to fill a 4K UHD-1
(3840x2160) screen in 32bpp mode we need to send 3840 * 2160 * 4 bytes of
data, which is 33177600 bytes (approximately 33 MB). ..."

Of possible interest: https://www.cambus.net/archives/
for example https://www.cambus.net/textmode/

via https://news.ycombinator.com/item?id=24337396

"I hate the framebuffer console on most of the systems I have.
In some cases, the font is way too small.  ...
And on some of the systems I have, the framebuffer scrolls so slow!!!!! ..."

"Its not even an option on newer UEFI machines, all consoles are a
framebuffer."

"Isn't that exactly what this patch addresses? Updating the framebuffer
console so it's not horrible on modern framebuffers."

https://www.collabora.com/news-and-blog/blog/2020/08/31/pushing-pixels-to-your-chromebook/

"Within this article, we'll provide a high-level introduction of the Linux
graphics stack, how it is used within ChromeOS ..."

 6 Sep 2020
     
Fastcore: A library that extends Python with new features
https://news.ycombinator.com/item?id=24374738

Discusson of Python library that apparently uses monkeypatching to 
redefine standard behaviors.  Might be useful to look at for techniques.

Some comments suggest dataclasses solve some of these problems (that
this library solves) in a standard way.  More comments:

"Using pickle for "Path.save/load" feels like a shortcut to me
that is inappropriate for many circumstances, since loading a pickle in
Python literally means running code from that pickle. It's basically
eval(Path.read()). It's not the kind of trust relationship that I would
typically expect from a load/save pair."

"Wait! What's going on here? We just imported pathlib.Path -
why are we getting this new functionality? Thats because we imported the
fastcore.foundation module, which patches this module via the @patch
decorator discussed earlier. This is a recipe for disaster. Too much magic
that makes it harder to debug. Especially for junior developers or people
less experienced in python."

"Too clever, too much magic. I remember I used to create such
things in my projects in my earlier days as a dev and was quite proud of
how compact things were and how much I understand my way around the
language that I was able to come up with it. But at the end of the day,
these things have a much higher price than it seems at first. Sparing a
few lines here and there is not worth confusing your code's readers or
yourself in a year. Standard established "pythonic" solutions are
preferable."

"Fastai/Fastcore are fascinating in their emphasis on interactive
computing in notebooks. ... 
Lots of the functionality identified here sort of nice if you're in a
traditional environment, but imperative if you're in (or writing for users
in) a notebook environment. ...
The emphasis on easy monkey-patching and psuedo-generics makes sense if
you're interactively working with classes in modules you don't control, or
can't cleanly reimport.
Not only that, fastai/fastcore themselves are written in Jupyter notebooks
via their literate programming environment nbdev[1].  https://nbdev.fast.ai 

I don't know that there's a point here beyond a bit of begrudging
admiration for how far they've pushed the notebook platform. It makes for
a library (and a Python) that looks and feels just a few degrees off-axis
from much of the rest of the ecosystem..."

".. These meta programming tricks usually breaks mypy, regressing back to a
fully dynamic language. ..."

Author of packge, jph00: "The challenge here is that fastcore is a
deliberate attempt to study the design axis of 'what would happen if we
focused on Python's dynamic features, and gave up on static analysis
entirely'.
Using it effectively really requires a live coding environment, such as
Jupyter Notebooks (which we do all our coding in, using nbdev). The
majority of Python programmers are not currently using such an
environment."

Other commenter: "Love the fast.ai ecosystem. Most don't appreciate how
critical it is for an ML researcher to be able to play. ...
Tooling is a huge part of that. The cost of iterating needs to be low. ...
The whole thing is designed for fast, cheap, highly malleable iteration. 
The design decisions required to achieve that have resulted in a library
with its fair share of sharp corners ...
The focus on Notebooks and code jamming leave engineering traditionalists
wanting. Etc. ..."

 9 Sep 2020

https://weinholt.se/articles/non-posix-filesystems/

author also has 

Loko Scheme, an optimizing R6RS Scheme compiler!
https://scheme.fail/

"Systems research.
    Unikernel experiments.
    Lock-free kernel experiments.
    Bare metal Scheme experiments.
Fight the orthodoxy.

Loko Scheme comes with some limited hardware support:
...
The drivers are based on compiler intrinstics, a buddy allocator and
concurrency built on Concurrent ML."

Optimizing Scheme compiler for Linux and bare hardware.
https://gitlab.com/weinholt/loko

via https://news.ycombinator.com/item?id=24412970

ChuckMcM: "What is unsaid in this article is that nearly all file systems
that are in widespread use today, started when "disk space" was a
constrained resource. It is a very reasonable thing to ask, "now that
stable storage space is much more plentiful, how might we design systems
that are better than the current ones?"

The ability to scavenge blocks to re-create state is a good example of that.

One of the cool things about WAFL (the Write Anywhere File Layout) system
that NetApp used (uses?) was that it's very design made snapshots
'trivial' since every write to disk was to un-allocated blocks. What that
meant in practice was that the file system on disk was always sane. This
was what let you pull the power from the box at any time, and assuming its
non-volatile RAM was still available, it could always recover."

notacoward: "What the OP should teach us is that there wasn't any one
mainframe approach. There were many approaches, each involving many
components. The process of standardizing what we now know as POSIX
involved pruning a lot of unnecessary pieces, but it also inevitably
involved leaving out some features that might actually have been useful.
Some of them (ahem ACLs) even had to be added back in later versions of
POSIX. Just as we should never stop looking for new ideas that can make
our lives as programmers and users easier, we should also never forget old
ideas whose time might well have come back around. It has happened too
many times for the possibility to be ignored except by fools."

macintux: recommends
https://speakerdeck.com/mrb/distributed-systems-archaeology

venamresm___: "... the current data storage stack on Unix-like systems
today ...":
https://venam.nixers.net/blog/unix/2017/11/05/unix-filesystem.html

Lots of recollections and links to other interesting file systems in these
comments.

10 Sep 2020

Seen recently, but my impression is not so good:

https://tenthousandmeters.com/blog/python-behind-the-scenes-1-how-the-cpython-vm-works/

https://tenthousandmeters.com/materials/python-behind-the-scenes-a-list-of-resources/

http://stupidpythonideas.blogspot.com/

via https://news.ycombinator.com/item?id=24382595, but nothing to see there.

----

But this:

https://lists.gnu.org/archive/html/emacs-devel/2020-09/msg00286.html

"Emacs is the only serious program I know which manages to be truely user
interface independent, in addition to being platform-independent.
Emacs works with graphical toolkits on all major platforms,
but also offers a almost-feature-complete text interface.
With Emacspeak, it even has a (non-mainline) audio interface (speech
synthesis as a UI). 
And I am not really talking about Emacs as just an editor.
I am seeing Emacs as a platform to write "apps" in Emacs Lisp.
These "apps" (we usually call 'em special modes or just interactive functions),
if constructed according to established Emacs Lisp APIs,
will be useable across all major platforms *and* user interface modalities!

... as an Emacs
Lisp developer, one naturally thinks about how to best support emacs -nw
more or less automatically. ...

Due to the way how you usually render special modes
(text properties or overlays for metadata) it is usually pretty simple
for Raman to come up with a few functions to also provide a very nicely
tailor made audio interface for modes he stumbles across.

This is something extremely special in the world of accessible software.
...

As a blind user, I can write a special mode which does something
specific, say, implement an IRC client.  Almost all my work can
instantaneously be used by sighted people using their graphical
toolkit. ...

... Having
discovered Emacs, and settled on learning how to extend it, was one of
the most important things in my computer life."

via https://news.ycombinator.com/item?id=24430108&p=2

also https://news.ycombinator.com/item?id=24209937

thom: "Emacs is fundamentally command driven - everything is a command,
and can be invoked, edited or replaced the same way. What triggers those
is obviously key bindings for a lot of people but it's not really what
makes Emacs powerful or extensible. People have diverse needs when it
comes to wanting to interact with a computer, and it's great that Emacs's
flexibility allows them to.

kqr: "I agree. Vim is inherently keyboard-focused. That Emacs is not, and
instead focuses on the command as the fundamental unit driving everything,
is its primary strength."

See also our commonplace book, 8-11 Apr 2019, brudgers comment on M-x

Our Console and edsel are kind of like this - we have tables that
associate keys with methods - so the methods are independent of the keys -
but those functions are not easily
accessible or change-able on the fly at top-level.  

That reminds me of Rich Hickey's complaints about objects, sent
to JC by uw email on 2020-06-11:

These excerpts are by Rich Hickey from section 3.4.2 in his paper A
History of Clojure, from HOPL 4, the fourth History of Programming
Languages conference: https://download.clojure.org/papers/clojure-hopl-iv-
final.pdf.   Here he explains his preference for triples and RDF over
records, objects, and relational databases.  By "maps" he means what in
Python are called "dictionaries":

"In information systems large and small, one is often forced to abandon
the class/record system and just start using maps, which often have no
syntax or other language support. And on the database side, one often
starts using generic entity/attribute/value (triple) tables to get the
flexible information support one needs. By the time I started Clojure I
was pretty tired of all this mismatch with common needs, and the
programmer effort wasted presuming that language models were right and all
this marshaling and specificity was necessary or productive.

At the same time, I had been doing some research into RDF [W3C 2014] , a
system designed around the needs of open, extensible information
management. There, the semantics of properties(attributes) are inherent in
the attributes themselves, not determined by their presence in some named,
fully enumerated aggregate/class/record type. Aggregation is ad hoc.
Properties are named by URIs and thus conflict-free. The RDF design
resonated with me and was a big influence on both Clojure and Datomic"

I think he means that records, objects, and relational databases all
require some static pre-existing definition to give meaning to the
attributes or keys, but dictionaries and triples do not - you can use any
immutable data as a key in a dictionary ad lib, and add keys whenever you
like.   Here is more in his paragraphs immediately preceding the excerpt
above.   It contains quite a battle cry in this complaint:  "Attribute
names are parochial! Attribute/field names are often not first class!"  (I
added the exclamation points):

"A key question for language choice (and thus software design) is: how
well do the primary language constructs map to your primary problems? If
your program deals with information, these are among your primary
problems: information is sparse, incrementally accumulated, open/
extensible, conditionally available, formed into arbitrary sets in
different contexts, merged with other information etc. Thus the answers to
these questions become important: Can you determine what information is
present? Is there an algebra for information selection? Merging? How
difficult is it to accumulate information in a processing pipeline?
Areattributes first-class? Is there a system for avoiding attribute name
conflicts?

In my experience, statically typed class/record systems are a mismatch for
these information management tasks. Aggregate types (classes/records) are
the primary drivers of attribute semantics rather than merely being
context-dependent aggregations. They are fully enumerated and
closed.Though optionality/availability of a field/attribute is not a
property of a data structure (it's aproperty of acontext of use), you must
declare things as Nullable or Maybe once and for all.Attribute names are
parochial. Attribute/field names are often not first class. There is no
algebra for merging/selection. Incremental information acquisition is
hard. Mapping tools (like ORMs) to/from the parochial type models are
common and necessary. Type errors, pattern matching errors and
refactoring tools are venerated for facilitating change instead of being
recognized as underscoring(and perhaps fostering) the coupling and
brittleness in a system.

I should note that the same problems often arise with traditional SQL
database systems, wheretables are the fully-enumerated culprits, and
column and table names are not first class, nullabilityis a fixed
decision, sparseness and openness are problematic, etc"

24 Sep 2020

https://news.ycombinator.com/item?id=24560923 comments on The Era of VSCode

TemMPOraL: "It's a slightly different philosophy. Emacs is best viewed not
as text editor with plugins, but as a Lisp Machine emulator with a text
editor. The joke about it being an OS is more true than people think: what
you get is a (2D, not 1D like shell) text-oriented programming
environment, back from the times where "a programming environment" meant a
fully end-user-programmable OS.

This has an important downstream consequence on the "plugin" ecosystem:
since these "plugins" are better seen as small applications running on in
a shared, restriction-free OS, they don't need a fixed and restrictive API
to interoperate. The entire Emacs is the API, and as long as an elisp app
follows conventions and plays nice, it will almost seamlessly interoperate
with every other app. And in cases where it doesn't (e.g. you try to use
two apps that do roughly the same thing), it's relatively trivial to patch
out the conflicts yourself. Having an integrated debugger and REPL is also
helpful :).

VSCode philosophy feels more restrictive compared to that."

19 Oct 2020

https://github.com/eafer/rdrview

"Command line tool to extract the main content from a webpage, as done by
the "Reader View" feature of most modern browsers. ...
The code is closely adapted from the Firefox version and the output is
expected to be mostly equivalent."

via https://news.ycombinator.com/item?id=24825417

Links to similar projects, comparisons, etc.

"... mode blocks out everything other than static images and text ..."

Glow, markdown reader for the terminal
https://github.com/charmbracelet/glow

via https://news.ycombinator.com/item?id=24810312

Compares it to Goyo vim markdown rendered, which uses regexp:

 https://github.com/junegunn/goyo.vim

 https://github.com/tpope/vim-markdown/issues/4

and other alternatives.

27 Oct 2020

Pertinent: http://edbrowse.org/

"Edbrowse is a combination editor, browser, and mail client that is 100%
text based. The interface is similar to /bin/ed, though there are many
more features, such as editing multiple files simultaneously, and
rendering html. This program was originally written for blind users,
but many sighted users have taken advantage of the unique scripting
capabilities of this program..."

Interesting: edbrowse b command (like our B command) can accept a filename
or a URL.

28 Oct 2020

Polar 2.0  Integrated reading environment for EPUBs, PDFs, & web pages
https://news.ycombinator.com/item?id=24908227

"Polar is an integrated reading environment similar to your IDE that you
use for writing code. Think of it like Visual Studio or IntelliJ but for
books, web content, PDFs, EPUBs, etc. ..."

Why would you need VS for books?  Oh, it's to organize notes, make
flash cards, etc.

https://getpolarized.io/

https://github.com/burtonator/polar-bookshelf

29 Oct 2020

Even the docs.python.org pages recommend the requests library.

https://requests.readthedocs.io/en/master/

Let's install it and try the above expt again.  The docs say
requests figures out the text encoding, but you can specify it.

Also

Extracting text from HTML file using Python
https://stackoverflow.com/questions/328356/extracting-text-from-html-file-using-python

Many suggestions for various libraries: html2text, Beautiful Soup, NLTK
are the most popular, there are others.  Some answers just provided code!
Somebody recommended the stdlib html.parser.HTMLParser but that's really
just for a DIY solution.

html2text is orginally by Aaron Swartz!  It actually converts HTML to
markdown, not plain text.


14 Nov 2020

Mu: a human-scale computer
https://github.com/akkartik/mu

"Mu is a minimal-dependency hobbyist computing stack (everything above the
processor and OS kernel).

Mu is designed for you, to run one computer. (Or a few.) Running the code
you want to run, and nothing else.  ...

Currently Mu requires a 32-bit x86 processor and Linux kernel. ...

The Mu stack consists of:

    the Mu type-safe language;
    SubX, an unsafe notation for a subset of x86 machine code; and
    bare SubX, a more rudimentary form of SubX without certain syntax sugar.

All Mu programs get translated through these layers into tiny zero-
dependency ELF binaries. The translators for most levels are built out of
lower levels. The translator from Mu to SubX is written in SubX, and the
translator from SubX to bare SubX is built in bare SubX."

So this is really a language bootstrapping project, not an OS or system
bootstrapping project.

14 pg paper: http://akkartik.name/akkartik-convivial-20200607.pdf

HN: https://news.ycombinator.com/item?id=21242190

Later - yes, he is doing some baremetal experiments, see 22 Mar 2021

16 Nov 2021

Seen yesterday on MeFi (in the RPi 400 thread) but we also put it in 
precursors.md when it appeared in HN in June:

https://github.com/joshiemoore/snakeware

"...a free Linux distro with a Python userspace inspired by the Commodore
64. You are booted directly into a Python interpreter ...

Our window manager, snakewm, is based on pygame/pygame_gui. We do not use
X11; snakewm draws directly to /dev/fb0.

We also are not going to be using any other huge and opaque software such
as systemd, etc. The goal is to eventually have a usable set of userspace
apps and utilities written entirely in Python, because Python is fun and
it Just Werks."

In comments to Youtube video linked to github page, author writes:
"... You will definitely notice that snakewm performs terribly on the Pi - we
are working on this"

Looked at other videos in playlist. In one he says "If you have any 
experience with PyGame you can contribute to snakeware."  It appears 
that all the snakeware apps and demos he shows are actually PyGame 
apps.  What snakeware adds is snakewm, a desktop+window manager also
written in Python from which you can launch these apps (but not arbitray
console apps).  It also adds boot-to-Python console, from which you can
start snakewm.  You can run snakewm on any linux system and develop
snakeware apps without having a boot-to-Python system.

https://news.ycombinator.com/item?id=23391380

Lots of suggestions and criticism, for example:

"... What you have here is basically a very simple pygame template with an
embedded application build tool chain. Which is totally cool, and
potentially fun and productive. But it isn't replacing the GNU/Linux user
space, which is C heavy, but very language diverse. ..."

Nothing from the author  or anyone else on how it works.  This guy posts
his abandoned project:

"... I had been thinking of building something similar ... But never
found the time. Was going to be called PyOS (pun on BIOS):
https://github.com/askvictor/pyos".  His Resources links might be useful.

HN comments include some notes and links on using the framebuffer.

https://www.reddit.com/r/Python/comments/gstn6b/snakeware_a_new_linux_distro_with_a_fully_python/

Reddit posts from the author on how it works:

"... everything is running in one interpreter session. Concurrency and
""syscalls"" in the window manager are handled through pygame's event
queue, which seems to be working pretty well so far."

"... look on the GitHub repo under `snakewm/` you'll see `wm.py`.
Simply run `sudo python wm.py` from this directory and the window manager
will hijack your framebuffer and it behaves pretty much the same as if you
had booted from a USB. This is how I develop apps and work on the window
manager itself, no need to generate an image and run QEMU every time.

This should work on any Linxu distro. I use arch btw.

edit: Press ALT+ESC to return to your normal desktop when you're done"

"It actually uses busybox as the init process, which runs 4 lines of bash
to mount the fstab and setup devices etc, and then starts the Python
interpreter:

#!/bin/sh
mount -a
mdev -s
/bin/hostname -F /etc/hostname
/sbin/ifconfig lo 127.0.0.1 up

while [ 1 ]
do
  clear
  /usr/bin/python3
done

I'm not happy about using busybox though, and I would like to get rid of
it. But I tried booting directly into the Python interpreter and it
doesn't work, the interpreter expects a certain amount of initialization
to have already been performed so it just crashes immediately. I would
love to hear ideas if anyone has any for getting rid of busybox."

"Boots directly into python shell, once you've got the wm from pyshell you
can run snaketerm which right now is a primitive python shell terminal."

(not the author): "FWIW: you might want to consider going lower level with
PySDL2 in place of Pygame. If you're looking for a Compiz equivalent, then
Pyglet might fit somewhere in here."

"The idea is that we want to take the fun and interactivity of the Python
language and build an operating system around it. When you open a Python
interpreter session, the sky is basically the limit, and we want to build
a complete computing experience that captures the aspects of Python that
make programming fun.

In my opinion, Python is one of the only modern languages that still
represents the essence of what hobbyist computing is supposed to be about
(having fun programming). The language isn't perfect, and there are a lot
of valid criticisms, but I think it's really special that high school
students can start learning Python and make something flashy and cool the
very same day. Not everything has to be ultra-complicated hyper-efficient
megahax.

Our goal is to provide a much more complete and thorough integration
between Python scripts and the underlying operating system than would be
possible with Windows. When you have direct access to absolutely
everything through relatively simple code, like on a Commodore 64, then
you can start having a lot of fun."

Wow, lots of useful tips in the author's reddit posts.  The github
page also links to a Discord channel - which right now has 13 logged
in and 80 members.  So that's another place to get tech info.

It is worth studying this for ideas for a standalone Piety.

I like the idea of just using Linux for the device support, but doing OS-
like things in Python in userspace.

1. Replacing the terminal application by writing directly to
frame buffer like he does with PyGame here.

Wouldn't this make it possible to have graphics and text together
on the screen? Or to run a full screen graphics app and then restore
the text-only Python session?

2. Replace (supplement) file system by FUSE written in Python.

3. Replace (supplement) network with userpace network stack in Python.

There are already examples of 2 and 3 on the web.

17 Nov 2020

snakeware has already solved the boot-to-Python-console problem for Linux.
Does its console support ANSI escape codes --- when its console appears,
could we just run sessions or edsel?  Then could we run the snakeware wm,
then exit back to our edsel session?  THen can we resume the snakeware wm
session? My guess is no, that all the snakeware wm data disappears when it
exits,  but maybe that could be revised.

19 Nov 2020

A curated list of awesome console services 
(reachable via HTTP, HTTPS and other network protocols).
https://github.com/chubin/awesome-console-services

He provides a command for reaching each one - for all the 
HTTP services he provides a curl command. 

We could provide commands to show these in edsel windows - 
maybe just sh('curl ...') :T is enough.


https://github.com/wustho/epr

"Terminal/CLI Epub reader written in Python 3.6
...
Checkout epy!nIt's just a fork of this epr with little more features:
Formats supported: epub, epub3, fb2, mobi, azw3. ..."

24 Nov 2020

https://timothycrosley.github.io/quickpython/

"QuickPYTHON A retro-futuristic educational interactive coding
environment. Powered by Python and nostalgia."

QuickBasic look-alike.  Demo in this page shows Python editing screen
alternating with terminal-like screen running console application.
TUI with popup dialog boxes, all made with text font.

https://github.com/timothycrosley/quickpython/

Uses prompt_toolkit, asyncio, decorators.  Possibly useful programming
examples.

27 Nov 2020

https://anvil.works/blog/introspection-in-python

reminder you can use dir(...any object..)

inspect module.  inspect.signature can tell you how to call method/fcn
you found with dir(), for example

 inspect.signature(requests.get) 
 <Signature (url, params=None, **kwargs)>

AST module is easy to use:

>>> import ast
>>> tree = ast.parse('x = 4 + 8')

>>> tree.body
[<_ast.Assign object at 0x1024a8470>]

>>> tree.body[0].value.op
<_ast.Add object at 0x1014d3978>

>>> tree.body[0].value.left.n
4
>>> tree.body[0].value.right.n
8

Also the bytecode disassembler:

>>> dis('x = 4 + 8')
  1           0 LOAD_CONST               0 (12)
              2 STORE_NAME               0 (x)
              4 LOAD_CONST               1 (None)
              6 RETURN_VALUE

28 Nov 2020

Create a minimal Android system for RISC-V
https://plctlab.github.io/aosp/create-a-minimal-android-system-for-riscv.html

"The meaning of minimal system here is the so-called bootable unix-style
command line operating system."

Explains how Android runs on top of Linux.  Links to:

Android Open Source Project
https://source.android.com/


30 Nov 2020

Linked to 

30 years later, QBasic is still the best 
https://news.ycombinator.com/item?id=25239424

https://github.com/antirez/load81

"Load81 is an attempt at creating a Codea-inspired environment to teach
children how to write Lua programs. It features a graphical programming
environment and a Commodore-64 style integrated editor so that the
programmer is confined into a friendly environment with a simple editor:...
The following is a screenshot of the running program
(examples/asteroids.lua). The programmer can currently switch between edit
and play mode pressing the ESC key. ...
Load81 is written in ANSI C and uses SDL and SDL_gfx and SDL_image, so
should compile on Mac OS X and Linux without issues. It should not be hard
to port it to Windows. ..."

https://cmaiolino.wordpress.com/

"Combian 64 is Raspberry Pi distribution able to boot your preferite
Commodore machine in just few seconds.
It uses the brand new compiled version of Vice 3.4 to emulate all the
Commodore Machines set.
By default, Combian 64 boots the Commodore 64 emulator, but its not the
only one included in the distro.what if you want to emulate a Commodore
Vic 20?
By quitting the emulator (pressing key F8), typing menu command from the
shell, you have access to the internal Combian 64 menu which will allow
you to change options like: emulator to run at boot, run raspi-config
command, reboot your Raspberry Pi, shutdown, or even run again the
emulator. ..."


10 Dec 2020

sysinfo
https://github.com/peterbay/sysinfo

"Python based scripts for obtaining system information from Linux ...
Output in JSON format ..."

Looks like you can request > 100 different items - most of these
look like simple wrappers around existing commands, often with the same
names: ps, lsof, etc.

11 Dec 2020

Implementing Rust's dbg! in Python
https://rtpg.co/2020/12/11/dbg-in-python.html

https://news.ycombinator.com/item?id=25386358

This is to help with debug prints - it prints the source line and the
value of the expression calculated by the source line.

14 Dec 2020

https://shkspr.mobi/blog/2020/12/how-and-why-to-use-lynx-the-faster-web-browser/

https://news.ycombinator.com/item?id=25385137

Comments mention/link to several other text-only browsers, also to
sample code for readability:

"... the two biggest reasons I would always choose links over lynx is 1. the
way links renders tables (this is what initially hoookd me on links) and
2. the source code. ..."

"Mozilla's Readability is written in JS; these tools are written in C and
Go, respectively. With the exception of a few whitespace characters, their
output of both seems to be identical.

=> https://github.com/eafer/rdrview rdrview

=> https://github.com/go-shiori/go-readability go-readability "

---

https://github.com/njhofmann/arXivist

"arXivist is a command line interface allowing for the management of pre-
print research papers and other publications from repositories such as
arXiv on a local machine."

We are storing links to command line and text only utilities we might
adapt for Piety/edsel.

22 Dec 2020

Command Line Interface Guidelines 
https://clig.dev/?

Verbose and opinionated, but worth a look.  
Disputed, alternatives proposed here:

https://news.ycombinator.com/item?id=25492119

28 Dec 2020

https://github.com/avinassh/haxor

"Unofficial Python wrapper for official Hacker News API."

 1 Jan 2021

TabFS is a browser extension that mounts your browser tabs as a filesystem
on your computer.
https://omar.website/tabfs/

"This gives you a ton of power, because now you can apply all the existing
tools on your computer that already know how to deal with files --
terminal commands, scripting languages, etc -- and use them to control and
communicate with your browser.

Now you don't need to code up a browser extension from scratch every time
you want to do anything. You can write a script that talks to your browser
in, like, a melange of Python and bash, and you can save it as a single
ordinary file that you can run whenever, and it's no different from
scripting any other part of your computer."

Very plan 9 - like!  Pertinent to planned Piety browser, where all 
visited web pages will persist in text buffers.

TabFS: Mount your Browser Tabs as a Filesystem          
https://news.ycombinator.com/item?id=25600338

Reminiscences, links to similar systems ... many comments recall
(and even link to) forgotten systems in the past that had something
like this.

 4 Jan 2020

On repl-driven programming  18 Dec 2020
https://mikelevins.github.io/

https://news.ycombinator.com/item?id=25618457 (4 comments)

https://news.ycombinator.com/item?id=25620256 (179 comments)

According to the original article, the key feature that Lisp and Smalltalk
have but Python, Ruby, etc. etc. do not have is 'the break loop' - if your
program crashes, you can then examine the stack frames etc. to find out
what went wrong, then fix the program and resume from where it crashed
*without restarting the program*.

Many comments asking for more details, which the OP and others answer.
Also many suggestions for how to approach this in Python (usually some
combination of ipython and pdb) which OP and others point out doesn't
quite make it.

Also many links to videos demonstrating the techniques, in various Lisps and
Smalltalk.

One comment links to 

https://nedbatchelder.com/blog/201908/why_your_mock_doesnt_work.html

which explains why, 'from mod import val' only sees the value of val when
the import was executed, subsequent updates to val in mod are  not seen in
the importing module.  It's analogous to x=23;y=x;x=12 -- here
y remains at 23, it doesn't become 12 when x updates.

It also links to 

https://docs.python.org/dev/library/importlib.html#importlib.reload

"If a module instantiates instances of a class, reloading the module that
defines the class does not affect the method definitions of the instances
they continue to use the old class definition. The same is true for
derived classes."

According to the OP, this is different from another important feature of 
Lisp and Smalltalk, where reloading a revised class definition (etc.) causes
existing objects to acquire the revised behavior.

12 Jan 2021

comments on: Build Your Own Text Editor
https://news.ycombinator.com/item?id=25716129

Several comments and links on rendering text to a framebuffer

 6 Feb 2021

Python hot code reloading tool.
https://github.com/hoh/reloadr

comments at https://news.ycombinator.com/item?id=26035623
with links to many alternatives.

"While investigating the topic I found a lot of projects: (links to 26!)
... I thing that xreload from Guido and the code inside ipython both
provide the best hot-patching. ..."

28 Feb 2020

Comments on A Minimal Email Client
https://news.ycombinator.com/item?id=26248668

The original article commented on here just tell how to configure the
built-in Mac mail program.  BUT many comments about other mail clients:
mutt mh mu notmuch (w/ emacs front end) mh-e (another emacs front end)
home-manager (which coordinates mu offlineimap msmtp) mbsync Maildirs
mblaze (from Lea Neukirchen) etc etc.  Maybe Piety could adapt something
in this style?

 1 Mar 2021

Pycoreutils  Python re-implementation of GNU coreutils 
https://github.com/dcantrell/pycoreutils  "10 years ago"

via https://news.ycombinator.com/item?id=26303996

also mentions pycoreutils 0.0.6a:

https://pypi.org/project/pycoreutils/

"PyCoreutils is a pure Python implementation of various standard UNIX
commands, like ls, cp and gzip. It also contains sh.py, a shell-like
environment ... requires Python 2.6 or greater. It also works on Python 3."

This seems to be a different project than the github project above,  with
more commands implemented. Released Jan 2011.

Mentions PyOS https://github.com/crcollins/pyOS
"...  python implemention of a psuedo unix-like operating system. ..."
9 years ago.  How did I miss this?  Not clear what it does or how complete.
Looks pretty skeletal.

Google also finds https://pypi.org/project/pyos/ Released 2020 "interact
with your python objects as though they were files on your filesystem."
Looks like a differnt project.

12 Mar 2021

Back to the Linux Framebuffer 
https://archive.fosdem.org/2020/schedule/event/fbdev/attachments/slides/3595/export/events/attachments/fbdev/slides/3595/fosdem_2020_nicolas_caramelli_linux_framebuffer.pdf

via https://news.ycombinator.com/item?id=26422519

"The linked PDF contains Nicolas Caramelli's slides. Here's his entire
talk in video: https://archive.fosdem.org/2020/schedule/event/fbdev/ "

The slides describe all the tools, programs, libraries that work on 
the frame buffer.  Short answer: almost everything you might want.
There is a terminal emulator: Fbpad https://github.com/aligrudi/fbpad

---

https://github.com/akermu/emacs-libvterm

"Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU
Emacs based on libvterm, a C library. ...

README compares eshell, shell, term and vterm.   term is a terminal
emulator written in elisp while vterm uses libvterm for better performamce.
In practice Nyxt is a common lisp environment that has an FFI binding to webkitgtk (and probably qt-webengine). I've only used to webkitgtk. So Nyxt is a lot like eolie and gnome web.
14 Mar 2021

x11fs X window virtual filesystem
https://github.com/sdhand/x11fs

"This is heavily based off wmutils. Check them out.

x11fs is a tool for manipulating X windows. It creates a vitual filesystem
to represent open windows, similar to what /proc does for processes. This
allows windows to be controlled using any language or tool with simple
file IO, in a true unix fashion. ..."

via https://news.ycombinator.com/item?id=11274700 (2016)

"This reminds me of wmutils, a set of standalone programs for x11
manipulation. A couple people I know use it, and it's pretty popular at
/r/unixporn. It lets you essentially create your own WM with bash scripts
or any other programming language, or extend minimal WMs like 2bwm vka
sxhkd.  https://wmutils.io/"

Alas, wmutils links are broken

15 Mar 2021

pyhn - Hacker news in your terminal (url lost, I think it was github).

19 Mar 2021

Vuiet: music player and explorer
https://github.com/mihaiolteanu/vuiet/blob/master/README.md

via https://news.ycombinator.com/item?id=26501729

Interesting example of a rich application that pulls together several
disparate elements - all elegantly integrated into emacs.

"Hm, I've been searching for a good replacement for Google Play Music, 
and this looks like a compelling option - the library of youtube, 
the recommendations of last.fm, and the UI of Emacs - an excellent set 
of ingredients!"

"I also built an Emacs music player recently, for subsonic. I even use it 
as my daily music/podcast player. It's a very rewarding thing to work on, 
The Emacs development flow has made me wish everything could be developed 
like an Emacs application.

https://git.sr.ht/~amk/subsonic.el "

"And here I thought I had finally given up the temptation that is emacs. 
Combined with evil mode, I can easily see having a leader keyspace dedicated 
to music so I could flip through tracks mid-code without even leaving the 
home row."

"Impressive documentation, complete with screenshots. The polish on modern 
emacs packages just keeps getting better."

----

https://github.com/sebastiencs/icons-in-terminal

"- icons-in-terminal allows you to get any fonts in your terminal without 
replacing or patching your font.
- You can add as many fonts as you want easily, you just need the ttf/odf 
file and add it to config.json."

Adds emoji-like icons to text terminal.

"How it works
I don't modify any existing font, I merge all glyphes from the provided 
fonts in a new font file and insert them in the private use areas.
The file ~/.config/fontconfig/conf.d/30-icons.conf tells to freetype to 
search the glyph in icons-in-terminal.ttf if it fails in your default 
font file. As the codepoints generated are in the private use areas, 
freetype should always fail and fallback to icons-in-terminal.ttf"

21 Mar 2021

Nyxt browser
https://nyxt.atlas.engineer/

via https://news.ycombinator.com/item?id=26509612

"Oh this is very exciting!  Not exactly Nyxt (which looks amazing), but 
that people are are starting to "emacs" the web. ..."

"Any individual or group of people that task themselves with making a 
browser deserve some sort of accolade. What I appreciate here is the 
minimalist approach and similarities to qutebrowser, uzbl, dwb and probably 
others. ..."

"Do these features really need to be a stand-alone browser or could they 
be a browser extension?" "They call this out in the FAQ. Basically, 
extensions are too locked down."

"In practice Nyxt is a common lisp environment that has an FFI binding to 
webkitgtk (and probably qt-webengine). I've only used to webkitgtk. So Nyxt 
is a lot like eolie and gnome web."

22 Mar 2021

More about akkartik's mu system, see 14 Nov 2020 above.  Not just a 
language stack, also some baremetal experiments. Google finds these:

http://akkartik.github.io/mu/html/baremetal/102keyboard.subx.html

http://akkartik.github.io/mu/html/baremetal/106stream.subx.html

Those are web pages at github.  But the repos that appear in those pages,
like https://github.com/akkartik/mu/blob/main/baremetal/106stream.subx
now return 404.

Also

https://mastodon.social/@akkartik/media

Ah, here are the baremetal experiments, at another Mastodon site:

https://merveilles.town/@akkartik/105338014257369963

From Dec 2020:

"I'm tightening focus to two threads:
a) These Mu shell experiments, and
b) An extremely skeletal OS to drop the Linux kernel dependency."

...

"*Towards running Mu without Linux*

All Mu really needs so far is to print to screen and read from the keyboard. 
Here's a 2-minute video about achieving that:

https://archive.org/details/akkartik-2min-2020-12-24 "

More entries and comments at that URL, to Mar 2021.

Also blog entry at http://akkartik.name/post/mu-2020 ,
just akkartik.name gets a page of summaries going back years.


22 Mar 2021

Text Editor Performance Comparison
https://github.com/jhallen/joes-sandbox/tree/master/editor-perf

Tests gnu-emacs, gnu ed and many others: vim, sublime, notepad++ etc.

26 Mar 2021

Endless Operating System

https://news.ycombinator.com/item?id=26582690

"Yep, Endless OS is built on Debian, although it has an immutable root
filesystem with ostree. Users don't really touch Debian packages. System
updates (and rollbacks) all happen atomically, with a reboot. ..."

https://news.ycombinator.com/item?id=26584096

"Endless is a rather interesting distro. It's aimed to be suitable for
non-technical users on fairly low-end hardware, with an internet
connection that might be intermittent at best.

Some salient but unusual features:

 A desktop that is GNOME adapted into a non-desktop metaphor, more like a
 smartphone: a full-screen app browser, and an app switcher that's loosely
 like the Windows taskbar.

 A read-only root filesystem, with no package manager.

 All apps are Flatpaks.

 OS upgrades are atomic, whole-system-at-once, like Android or iOS
 upgrades on a smartphone."

Emacs 27.2

https://news.ycombinator.com/item?id=26581051

"I prefer vim as an editor, but in terms of being a unique and fascinating
piece of software, emacs wins hands down. There's something really cool
about the fact that you can't easily answer the question, "What is emacs
similar to?", because it's such a total sui generis."

Building a full-text search engine in 150 lines of Python code

https://bart.degoe.de/building-a-full-text-search-engine-150-lines-of-code/

https://news.ycombinator.com/item?id=26582109

Lots of substantive comments.  Several people recommend -- "SQLite has a
pretty good built-in fts engine: https://www.sqlite.org/fts5.html"


 5 Apr 2021

http://terathon.com/blog/a-mathematical-keyboard-layout/

Uses MS keyboard layout tool to put math symbols in the
keyboard, using shift key.

https://news.ycombinator.com/item?id=26688529

"I like the approach that the AUCTeX and/or CDLaTeX modes in emacs
take: if I want Greek letters or math symbols, I hit the backtick,
then the mnemonic or binding for the Greek symbol/operator I want. I
know you can’t extend this to Twitter or something, but I would never
want to anyway. (https://ftp.gnu.org/gnu/auctex/11.88-extra/tex-ref.pdf)"

"GNU Emacs greek and TeX input-methods, and the C-x 8
iso-transl keymap (which you can extend) makes writing mathematical
symbols really easy."

"C-x-8-RET has been most useful to me for unicode maths symbols."

https://github.com/MGreim/ultiboberon/pulse

https://news.ycombinator.com/item?id=26687865

"It should be noted that this is a port (or, rather a rewrite in
Pascal) of Peter de Wachter's RISC5 emulator to a bare-metal Raspberry
Pi environment, not a native Oberon system running on bare-metal ARM
(i.e. there is no ARM compiler backend and all binaries are compiled
for RISC5 and run in emulation)."  

In *Pascal* -!  Yes, .pas files in the repo!

tmux
https://sunainapai.in/blog/get-started-with-tmux/

https://news.ycombinator.com/item?id=26670708

C-b is the tmux command prefix, C-a is the screen command prefix.
Neither will work for us because they are already bound in emacs and edsel.

tmux lets you select and copy text with your keyboard
https://ianthehenry.com/posts/tmux-psa/

https://news.ycombinator.com/item?id=26668408

Many many HN comments on discoverability, help, documentation 
for tmux, screen, vi, emacs...

Quickly copy the output of the last shell command you ran
https://ianthehenry.com/posts/tmux-copy-last-command/

KPlugs
http://www.kplugs.org/

"KPlugs is a Linux kernel module which provides an interface for
dynamically executing scripts inside the Linux kernel. KPlugs uses a
simple bytecode interpreter (the KPlugs Virtual Machine), and an
interface that allows a user to dynamically load scripts into the
kernel and execute them directly from user space. Because the
interface is dynamic, it's easy to implement a user-mode library that
wraps anything in the kernel!

KPlugs comes with a Python library that compiles a subset of the
Python language to the KPlugs bytecode, and lets you easily load and
execute your "kernel Python script".

The Python compiler is very basic and was made to fit our own purposes ..."
     
SkiffOS: Minimal Cross-Compiled Linux for Embedded Containers
https://arxiv.org/abs/2104.00048

https://github.com/skiffos/skiffos

"> SkiffOS is a lightweight operating system for any Linux-compatible
computer, ranging from RPi, Odroid, NVIDIA Jetson, to Desktop PCs,
Laptops (i.e. Apple MacBook), Phones (PinePhone), Containers, or Cloud
VMs.

> Uses Buildroot to produce a minimal "single-file" host OS as a
standardized base cross-platform operating system "shim" for hosting
containers.  "

https://news.ycombinator.com/item?id=26671528

Edlib - a library for building a document editor
https://github.com/neilbrown/edlib

http://blog.neil.brown.name/2015/07/edlib-because-one-more-editor-is-never-enough/

https://news.ycombinator.com/item?id=11255612
links to  https://www.youtube.com/watch?v=kjfHEGeqpIY&feature=youtu.be

How much can a Clojure developer do alone? (yyhh.org)
https://yyhh.org/blog/2021/03/how-much-can-a-clojure-developer-do-alone/

https://news.ycombinator.com/item?id=26618971

Lots of comments on REPL and image-based development.


 8 Apr 2021

https://media.ccc.de/v/rc3-525180-what_have_we_lost

"... we'll discuss IBM i, with emphasis on the Single Level Store, TIMI,
and block terminals Interlisp, the Lisp Machine with the interface of
Smalltalk OpenGenera, with a unique approach to UI design TRON,
Japan's ambitious OS standard More may be added as time permits."

via https://news.ycombinator.com/item?id=26723886

From the slides:

Emulators: 

Genera https://archives/loomcom.com/genera/genera-install.html

Interlisp https://github.com/livingcomputermuseum/Darkstar
            (Xerox D-machine emulator)
           https://interlisp.org

IBM i

https://www.devever.net/~hl/ppcas
https://www.leif.org/as400/
https://discord/gg/BWQA5nk


 9 Apr 2021

printstack
https://github.com/morefigs/printstack

"printstack is a Python package that adds stack trace links to the
builtin print function, so that editors such as PyCharm can link to
the source of the print call.

import printstack

print("Hello world")

# Hello world              File "/dev/printstack/examples/example.py", line 3, in <module>


13 Apr 2021

Doing Without Databases in the 21st Century
https://codeburst.io/doing-without-databases-in-the-21st-century-6e25cf495373

Presents Java code for simple in-memory database with persistence to 
a file.   The file is only used to restore in-memory db on restart.


15 Apr 2021

http://www.rath.org/pyfuse3-docs/example.html#in-memory-file-system

"pyfuse3 comes with several example file systems in the examples
directory of the release tarball. For completeness, these examples are
also included here."

via https://news.ycombinator.com/item?id=26822012

"Here's an example [0] user-space filesystem that stores its data in
an in-memory sqlite file. ..."

I didn't see any import sqlite here.

 1 May 2021

Visual Studio Code: Text Buffer Reimplementation
https://code.visualstudio.com/blogs/2018/03/23/text-buffer-reimplementation

via HN but no comments

 2 May 2021

Emacs Lisp book revived: Marcin Borkowski 
https://news.ycombinator.com/item?id=27005000

Lots of comments on using emacs and elisp. Mentions 
the chapter in OReilly Beautiful Architecture:

Chapter 11 GNU Emacs: Creeping Featurism Is a Strength, by Jim Blandy
https://duncanmak.keybase.pub/GNU%20Emacs-%20Creeping%20Featurism%20is%20a%20Strength.pdf

also https://github.com/alhassy/ElispCheatSheet/blob/master/CheatSheet.pdf


11 May 2021

ViB - Browser in Vi (Vim-Minimal)
https://github.com/4D617278/ViB

"... The vi interface is reused to support a text based web browser: this
means that it has vi keybindings by default. It has minimal memory
usage owing to the reuse of the vi text editor as a web browser. It is
portable to any operating system with python, vi, and curl installed,
assuming that the python modules sys and html are present. ..."

Seems that it just uses curl to get pages and put them in a buffer.

There are some Python fcns for displaying HTML - but also curl 
switches and piping curl output through sed.   

Worth another look to figure out how this works.  Maybe get it and
play with it, to get an idea of how some favorite sites look in it.

Jonathans-MacBook-Pro:code jon$ git clone https://github.com/4D617278/ViB
Cloning into 'ViB'...
remote: Enumerating objects: 32, done.
remote: Counting objects: 100% (32/32), done.
remote: Compressing objects: 100% (25/25), done.
remote: Total 32 (delta 15), reused 21 (delta 7), pack-reused 0
Unpacking objects: 100% (32/32), done.
Checking connectivity... done.

ViB just uses curl with lots of options to actually get and maybe 
preprocess the web pages.   We would use a Python library like urllib2
or requests in the same role.  Don't I recall a web page that compared
curl commands to requests calls, or something like that?

Yes!  https://curl.trillworks.com/

Not just Python: "Convert curl syntax to Python, Ansible URI, MATLAB,
Node.js, R, PHP, Strest, Go, Dart, Java, JSON, Elixir, Rust"

There's a box where you paste the curl commnand and another box
where the translated code appears!  Try one from the ViB README,
from their bash 'get' fcn:

curl -A [user_agent] -b [cookie_file] -c [cookie_file] --compressed --data-urlencode "$2" -G -L -w '\n%{url_effective} https://"$1"

"Error parsing curl command."  Try this instead:

curl -A piety  -b cookie.txt -c cookie.txt --compressed  -G -L  https://mysite.com

It responds:

import requests

cookies = {
}

headers = {
    'User-Agent': 'piety',
}

response = requests.get('https://mysite.com/', headers=headers, cookies=cookies)

Looks straightforward.

24 May 2020

Mode transition diagram for vim, via HN I think but I couldn't find orginal post

https://rawgit.com/darcyparker/1886716/raw/eab57dfe784f016085251771d65a75a471ca22d4/vimModeStateDiagram.svg

25 May 2020

HN comments on above https://news.ycombinator.com/item?id=27265143

"I appreciate the effort that went into this, but I think it actually
makes learning vim appear more complicated than it is. ..."

"... the diagram is clickable, and links through to the Vim manual section
corresponding to the feature in question."


 4 Jun 2021

Hot Code Patching in CPython
Supporting Edit-and-Continue Debugging in CPython 
with Less Than 300 Lines of Code by Henning et al.

https://www.hpi.uni-potsdam.de/hirschfeld/publications/media/HenningStanglNiephausKruckHirschfeld_2019_HotCodePatchingInCPythonSupportingEditAndContinueDebuggingInCPythonWithLessThan300LinesOfCode_AcmDL.pdf

Replaces CPython PyEval_EvalFrameEx with new PyEval_EvalFrameRestartable.
Also adds a new pdb command, restartf, to optionally restart from other
frames on the call stack besides the current one.

---

https://github.com/ccie18643/PyTCP

Still active, updates in the last few days.  via 
     
TCP/IP stack written in Python
https://news.ycombinator.com/item?id=27394547


30 Jun 2021

Web Browser Engineering
https://browser.engineering/

"... building a basic but complete web browser, from networking to
JavaScript, in a thousand lines of Python. ..."

High Performance Browser Networking
https://hpbn.co/

"... a hands-on overview of what every web developer needs to know about the
various types of networks (WiFi, 3G/4G), transport protocols (UDP, TCP,
and TLS), application protocols (HTTP/1.1, HTTP/2), and APIs available in
the browser (XHR, WebSocket, WebRTC, and more)..."

Both books are online.  via https://news.ycombinator.com/item?id=27682825

 7 Jul 2021

twitchcore
https://github.com/geohot/twitchcore/blob/master/cpu.py

RISC-V CPU emulator in 263 lines.   Same repo includes Verilog for FPGA.

via https://news.ycombinator.com/item?id=27728749 with link to livestream (?)
video - 8h20min.

18 Aug 2021

Gentle Guide to Get Started With tmux
https://pragmaticpineapple.com/gentle-guide-to-get-started-with-tmux/

"tmux is a terminal multiplexer, meaning it is a window manager within
your terminal. It allows you to open multiple windows (sessions) within
one terminal window (session). ..."

Every tmux command begins with C-b (control-B, I recall Brian Dorsey explained
every screen command begins with C-a.   C-b ? is help, prints a list of 
all the C-b commands - see the last screenshot in the article.

tmux has panes, windows, and sessions.

26 Aug 2021
     
The most underused browser feature: reader mode
https://news.ycombinator.com/item?id=28286493

"Mozilla's Readability repository: https://github.com/mozilla/readability

I'm currently trying to bring the PHP port up to speed here:
https://github.com/fivefilters/readability.php

We use an older version as part of our article extraction for Push to
Kindle: https://www.fivefilters.org/push-to-kindle/"

28 Aug 2021

Writing Programs with Ncurses
https://news.ycombinator.com/item?id=28354194

Lots of links to TUI libraries and applications

 3 Sep 2021

https://hyperthings.garden/posts/2021-06-20/hell-is-other-repls.html

via https://news.ycombinator.com/item?id=28345617

Lots on programming at the REPL, with links to videos etc.

10 Sep 2021

Let's build a browser engine!
https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html

links to 

How Browsers Work: Behind the scenes of modern web browsers
https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/

limpet.net via 
     
Ask HN: Books that teach you programming languages via systems projects?
https://news.ycombinator.com/item?id=28478751

 1 Oct 2021

ESP32 Based ePub Reader
https://github.com/atomic14/diy-esp32-epub-reader

"Build your own Kindle"

README explains ePub format - a zip file of HTML files.

 6 Oct 2021

extraterm: The swiss army chainsaw of terminal emulators
https://github.com/sedwards2009/extraterm

"Main website: extraterm.org

Extraterm is an open source project to build a terminal emulator and
expand it with new features to support modern workflows and do more than
just act like a glorified teletype.

Capture and reuse command output as new command input
Manipulate and copy text without leaving the keyboard
Slice and dice command output like a text editor ..."

 9 Oct 2021

Attempting REPL-Driven Development in Python
https://blog.avocadosh.xyz/repl-driven-development-in-python

Not too helpful.  Mostly links about other languages.

Julia Evan's recent post is more helpful:

Debugging by starting a REPL at a breakpoint is fun
http://jvns.ca/blog/2021/09/16/debugging-in-a-repl-is-fun/

Qtile - A full-featured, hackable tiling window manager 
written and configured in Python
http://www.qtile.org/

13 Oct 2021

A simple interactive BASIC interpreter written in Python 3. 
https://github.com/richpl/PyBasic

via https://hackaday.com/2021/10/08/python-provides-classic-basic/
via https://news.ycombinator.com/item?id=28811514 (no comments)

An FPGA-based LGP-30 Replica
http://www.e-basteln.de/computing/lgp30/lgp30/

manual paper tape reader 
http://www.e-basteln.de/computing/papertape/overview/

The 100 MHz 6502 (on an FPGA)
http://www.e-basteln.de/computing/65f02/65f02/

Comments on The Return of the Unix Shell
https://news.ycombinator.com/item?id=28846968

tuatoru writes: "You probably would have liked the IBM System/38 - AS/400
- System i - IBM i (whatever it's called now) command line.

It had a defined standard vocabulary and a system for defining commands.

Built-in command names were constructed out of a few verbs, a few
adjectives and a few nouns. To compile a Cobol program, the command was
CRTCBLPGM - create cobol program. So, verbs were CRT, CHG (change), DLT,
DSP (display), and a few special cases. Likewise there were limited lists
of objects (PGM, here) and adjectives (CBL).

There was also direct help for commands.

You typed in CRTCBLPGM and pressed F4. You got a TUI, with labeled fill-
in-the-blank fields for all the arguments, with mandatory arguments
indicated as such, default values displayed for optional ones, selection
for those that have a fixed list of allowed values (e.g. YES, NO), and
with help text available for each parameter, each parameter value for
enumerated values, and for the command as a whole. So the command is its
own man page, pretty much.

If you didn't know the name of the command you wanted, there was a topic-
organized menu system, think GNU `info(1)', also available from the
command line.

Having gone through the menus and found the command you wanted, you could
start the fill-in-the-blank execution of it right from the menu.

After filling in the arguments but before pressing Enter, you could press
a function key (F12?) to see the command as it would have been typed out
directly on the command line, for future reference or for pasting into a
script."

22 Oct 2021

https://courses.cs.washington.edu/courses/cse550/20au/papers/

25 Oct 2021

Hacking python's import system for single file packages 
https://cprohm.de/blog/python-packages-in-a-single-file/

" ... module definitions can be embedded as strings into global variables.
Each variable has to have name of the form module__{a}__{b}__{c}, where
each __ represents a . inside the qualified module name. ...

In case, you're looking for more battle tested implementations with
similar approaches, checkout the following packages on PyPI: ..."

Controlling the Terminal with Common Lisp
https://turtleware.eu/posts/Controlling-the-terminal.html

via https://news.ycombinator.com/item?id=28979482

which links to https://joellord.dev/blog/posts/Build-a-Text-Editor-in-Lisp---Part-2.html

 1 Nov 2021

SectorLISP Now Fits in One Sector
https://justine.lol/sectorlisp/

"The SectorLISP project has achieved its goal of creating a LISP that's
tiny enough to fit in the master boot sector of a floppy disk. To the best
of our knowledge, this is the tiniest LISP to date. Since a master boot
record is only 512 bytes, that means LISP is now tied with FORTH to be the
most lightweight high-level programming language in the world. ..."

Lots about Lisp and history on this page.  Links to listing for IBM 709
Lisp 1.5, and pdf of book on programming the 709/7090/7094

via https://news.ycombinator.com/item?id=29047584

which includes links to code samples in A. Kartik's recently updated mu
pages at github, as well as its new README

https://github.com/akkartik/mu

Ada on the Raspberry Pi Pico 
https://pico-doc.synack.me/

lots of details, via https://news.ycombinator.com/item?id=29046223

"Does the Ada support build on the Pico C/C++ SDK or is it something from
scratch?

It's mostly from scratch.  The linker script and crt0.S are derived from
pico-sdk and register definitions are generated from pico-sdk's SVD file.
Everything else is Ada."

 3 Nov 2021

Anatomy of a Terminal Emulator
https://www.poor.dev/blog/terminal-anatomy/

via https://news.ycombinator.com/item?id=29080561
which mentions zellij

https://zellij.dev/news/beta/

"Zellij is a terminal workspace and multiplexer written in Rust, aiming to
become a general purpose application development platform in the future. ...

Improved resizing algorithm: One of the main multiplexer-specific
innovations in Zellij is the algorithm it uses to arrange and resize
panes. Zellij includes a new pane command that doesnt force you to think
about vertical or horizontal splits, but rather looks for the best place
on screen to open the pane for you. ..." (diagram explains it)

 5 Nov 2021

A retro inspired dedicated coding computer for kids 13 - 99 
https://codeguppy.com/site/temp/coralmicro_specs.png

"... Powered by Raspberry Pi (without Linux experience)  ...
Built-in programming language Javascript (or Lua, Python) ...
Boots to coding environment in 3s ..."

via https://news.ycombinator.com/item?id=29113992

"garmaine: Can this be bought?
codeguppy: That is the intent! For now is just a concept."

22 Nov 2021

CS615 -- System Administration
https://stevens.netmeister.org/615/#syllabus

Sys admin course including networking VMs at AWS

25 Nov 2021

Batteries included with Emacs 
https://karthinks.com/software/batteries-included-with-emacs/

Many unusual and little-known, possibly even useful, emacs 'features'
"No packages, stock Emacs only ... Emacs 26.3+"

19 Dec 2021

Program Emacs in Python
https://github.com/zielmicha/emacspy

emacspy enables you to program Emacs in Python instead of ELisp. It works
by using dynamic modules support introduced in Emacs 25. ... Make sure
your Emacs build has loadable modules support enabled (default Ubuntu
build doesn't have!) ...

# use emacspy.v to access Emacs variables
emacspy.v.tab_width

# use emacspy.f to call Emacs functions
emacspy.f.message("hello")

# returned values are wrapped in EmacsValue
emacspy.f["+"](1, 2) # => <EmacsValue ...>

# use functions to convert to Python values
emacspy.f["+"](1, 2).int()
emacspy.v.page_delimiter.str()


 6 Jan 2022


Raspberry Pi: Boot to BASIC
https://popey.com/blog/2021/01/raspberry-pi-boot-to-basic/

Runs a BASIC on Ubuntu on RPi.   Uses Ubuntu server, no X.  
Boots right to BASIC prompt.  

via https://news.ycombinator.com/item?id=29825015

which discusses/links to many alternatives.  Several comments
say of oringal article: too complicated, you don't need all that.

Fun with Crypto Ancienne: TLS for the Browsers of the Internet of Old Things
https://oldvcr.blogspot.com/2020/11/fun-with-crypto-ancienne-tls-for.html

Crypto Ancienne: TLS for the Internet of Old Things
https://github.com/classilla/cryanc

"Crypto Ancienne, or Cryanc for short, is a TLS library with an aim for
compatibility with pre-C99 C compilers and geriatric architectures. ..."

This enables old browsers to access hton old hardware tps sites not just http.

https://github.com/synchronizing/mitm

"A customizable man-in-the-middle TCP proxy with out-of-the-box support
for HTTP & HTTPS. ..."   

All in Python.  Docs at: https://synchronizing.github.io/mitm/

10 Jan 2022

Ask HN: How to learn about text editor architectures and implementations?
https://news.ycombinator.com/item?id=29874669

Many links to sites and other HN pages.


11 Jan 2022

Guide to Doing Radio Astronomy with RPi and SDR 
https://news.ycombinator.com/item?id=29787240

     
On Learning Smalltalk 
https://news.ycombinator.com/item?id=29890205

jonathaneunice writes:

The image -- all your code, data/state, your entire OS and windowing system,
your IDE, all rolled up into one -- that was an interesting approach but
honestly that is the worst thing about Smalltalk. No modularity. No
version control. Your image persists your data and changes
foreverincluding any mistakes you make, knocking around inside big ball of
ever-declining clarity and reliability. Over time every image collects
entropy, mistakes, and bitrot like no one's business! Eventually it gets
to be impossible to figure out how to fix it, or takes so much energy to
maintain you won't bother. Then you have to chuck it and start afresh.
Rinse and repeat! Give me today's alternative, non-persistent dev
environments and version control, any day.
     
0x445442 writes:

Most of the Smalltalk implementations I know support version control via
Git or some other mechanism as a means of code distribution. And as I
understand it, production code is built with CI/CD pipelines using a base
image and checking out the code that's the app from a repo.

xkriva11 writes:

Pharo uses libgit2 binding and adds nice tools on top of it. The
development of Pharo itself is based on Git/Github. So it uses standard
Git workflow with branches, pull-requests, CI building and testing etc.,
but because it has methods based granularity, it is even better than plain
Git for operations like merging and cherry-picking (it can, for example,
easily resolve conflicts that plaintext based Git cannot). Moreover, it
allows things like listing the history of a particular method. Even CI
building can benefit from still-present image capabilities because you can
have a basic prebuild image with project dependencies and then just load
what you are really interested in in a few seconds (while still having an
option to bootstrap it completely).

13 Jan 2022

Execution traces in Python
https://github.com/MoserMichael/pyasmtool/blob/master/tracer.md

Describes exectution traces in bash with set -x, Python's built-in trace
facility, and this author's enhanced trace that also shows variable values.

30 Jan 2022

https://github.com/charmbracelet/glow

"Glow is a terminal based markdown reader designed from the ground up to
bring out the beauty and power of the CLI. ..."

https://github.com/paulhoule/gastrodon

"Toolkit to display, analyze, and visualize data and documents based on
RDF graphs and the SPARQL query language using Pandas, Jupyter, and other
Python ecosystem tools. Gastrodon Links SPARQL to Pandas ..."

 4 Feb 2022

How can I make a kid's computer today ... ?
https://news.ycombinator.com/item?id=30204535

throwaway47292 writes "I built a small raspberry pi zero "laptop"[1] with
4" screen and usb battery that does not have X and inits directly into
openvt that starts vim (takes like 2 seconds to boot) and it has python
and you can directly write pixels into /dev/fb0, there are also console
games that are quite fun.

The best part was "no distraction environment" no internet, no messages,
nothing, you have to be bored a bit to get creative."

[1] https://github.com/jackdoe/programming-for-kids/blob/master/projects/tty/pitop.jpeg

Wow!  This page apparently has Python code for writing text as bitmaps to
the frame buffer:

https://github.com/jackdoe/programming-for-kids/blob/master/projects/tty/main.py


The README.md says:

based on read_fb() from https://github.com/chidea/FBpyGIF/blob/master/FBpyGIF/fb.py

Which is a much bigger Python write-to-the-framebuffer program.  Back
up to the top:

https://github.com/chidea/FBpyGIF

The README.md begins:

"FBpyGIF

Pure Python implemented Memory-mapped Frame Buffer mainly for GIF
animation on Raspberry pi

Description

Problem domain

Recent Raspberry pi and similar single-board computers which needs
efficient way to show image usually uses fbi. This pack of C libraries
and programs are able to show GIF image properly thorugh direct frame
buffer, but in lack of function to play GIF animation files.  

Features

So I decided to make almost pure Python implemented library that is
utilizing frame buffer and memory mapping. The only a thing about
'pure' with this library is that it uses PIL library that is default
installed python libarary on official Raspbian to convert image
formats into raw BGR(A) and is also providing ways to use imagemagick
as decompressor.

Note

There are many documents online how to mmap frame buffer with C, but
none of similar are with Python, which also has mmap library by
default. Actually there aren't so many examples about Python mmap
library either. Hope this code helps you to understand how to ioctl
and mmap not only frame buffers but also general Linux drivers with
pure Python.

Tested on

    Latest Raspbian on Raspberry pi 2 B+
    Archlinux (No, not with the ARM version on RPi, but the one on a vagrant VM)
    Ubuntu Mate Xenial on Odroid C2

Save these repos locally

Jonathans-MacBook-Pro:code jon$ git clone https://github.com/jackdoe/programming-for-kids
Cloning into 'programming-for-kids'...
remote: Enumerating objects: 5812, done.
remote: Counting objects: 100% (1357/1357), done.
remote: Compressing objects: 100% (939/939), done.
remote: Total 5812 (delta 748), reused 994 (delta 408), pack-reused 4455
Receiving objects: 100% (5812/5812), 192.16 MiB | 2.06 MiB/s, done.
Resolving deltas: 100% (3073/3073), done.
Checking connectivity... done.

It's huge!  Must have a lot of images.

Jonathans-MacBook-Pro:code jon$ git clone https://github.com/chidea/FBpyGIF
Cloning into 'FBpyGIF'...
remote: Enumerating objects: 402, done.
remote: Total 402 (delta 0), reused 0 (delta 0), pack-reused 402
Receiving objects: 100% (402/402), 111.34 KiB | 0 bytes/s, done.
Resolving deltas: 100% (246/246), done.
Checking connectivity... done.

So light weight!

The reason we downloaded programming-for-kid was to find where tty project
and framebuffer are referenced:

Jonathans-MacBook-Pro:programming-for-kids jon$ grep -R ' tty' *
projects/tty/main.py:import tty, termios, sys
projects/tty/main.py:            tty.setraw(sys.stdin.fileno())

That's it - !?  Couldn't find anything more.  It's not mentioned anywhere
else.   This sure doesn't look line anything a kid could write.

20 Feb 2022

https://github.com/sevazhidkov/ipython-profile

Show HN: Python REPL with auto-import and auto-reload on changes
https://news.ycombinator.com/item?id=30321825

"For the original auto import library look here: https://github.com/anntzer/ipython-autoimport

Someone also made a video about it: https://youtu.be/MlOWqpiRy10"

21 Feb 2022

6502ctl - Arduino 6502 Controller
https://github.com/billziss-gh/arduino-6502ctl

"The 6502ctl project is an Arduino controller for the 6502 CPU. The
controller controls all 6502 pins, including the clock signal and
interrupts, and simulates an address and data bus with attached memory and
an output peripheral. The controller includes a clock-cycle debugger with
disassembler. An assembler is also included with the project."

Photo shows 6502 on a solderless breadboard with many cables
to the Arduino board

via https://news.ycombinator.com/item?id=30399129  with links to  similar
projects including

RetroShield 6502 for Arduino Mega
https://www.tindie.com/products/8bitforce/retroshield-6502-for-arduino-mega-2/

For sale ($18), a "shield" (PC daughterboard) instead of a 
solderless breadboard. "My Brain-In-A-Jar Project ...
Arduino Mega is capable enough so I now do my wire-wrapping in software
... You can "breadboard in software" meaning you can design, change,
update your hardware platform as easy as compiling and downloading a new
Arduino code."

Versions available for several microprocessors: Z80 8085 6809 and others.

https://github.com/dmateos/420-6502

"Custom built 6502 based computer + system interface controller"

Photos show Arduino + 6502 on solderless breadboard - in this
project, lots of other components on the breadboard.


23 Feb 2022
     
Data Structures in the Fleet Editor
https://news.ycombinator.com/item?id=30415868

Links to other articles and posts on editor design/internals/implementations

26 Feb 2022

Project Oberon
https://news.ycombinator.com/item?id=30467666

Links to recent implementations on newer FPGA boards

Writing an OS in Rust 
https://os.phil-opp.com/

via https://news.ycombinator.com/item?id=30467572

eminence32 writes: "Even if you don't want to write a small OS, or don't
want to learn rust, this is still an excellent resource for people wanting
to learn about low-level OS and hardware details."

faitswulff writes: "Note that this guide is in the middle of a big rewrite
to include a UEFI compatible bootloader. The author posts updates here:
https://rust-osdev.com/"

thinkharderdev writes: "Wow, I really have no interest in OS development
but that is one of the best resources I have ever seen for understanding
Rust. Just read the section on async/await and it demystified everything I
didn't understand."

rectang writes: "... is the OS anywhere close to feature-complete (i.e.
close to meeting a base set of pedagogical goals as a "small OS" for
teaching purposes).  It's not clear to me from either the top-level docs
or a skim of the update posts whether this effort is essentially a loose
collection of (useful!) blog posts, or whether they close the loop to form
a coherent and complete whole."

Terminal Based Wikipedia 
https://github.com/yashsinghcodes/fetch

via https://news.ycombinator.com/item?id=30464747 with links to  alternatives

26 Feb 2022

Anatomy of a Terminal Emulator
https://poor.dev/blog/terminal-anatomy/

discussed at https://news.ycombinator.com/item?id=29080561

13 Mar 2022

https://curlconverter.com/

"Convert curl commands to Python, JavaScript, PHP, R, Go, Rust, Elixir,
Java, MATLAB, Ansible URI, Strest, Dart or JSON"  Includes links
to many similar tools

via https://news.ycombinator.com/item?id=30642281  with many well informed
comments, includging from the author of curlconverter.  And, links to 
still more alteratives.

14 Mar 2022

OFFPUNK
https://tildegit.org/ploum/AV-98-offline

"A command-line and offline-first smolnet browser/feed reader for Gemini,
Gopher, Spartan and Web by Ploum.

The goal of Offpunk is to be able to synchronise your content once (a day,
a week, a month) and then browse/organise it while staying disconnected.

Offpunk is a single python file. Installation is optional, you can simply
download and run "./offpunk.py" or "python3 offpunk.py" in a terminal."

via https://news.ycombinator.com/item?id=30669799
    
throw10920: "This tool seems to bundle an extremely primitive hand-rolled
browser along with its archiving tool. This is a weird design decision -
if you're a fan of the Unix philosophy, then why not separate the two? ..."x

This might be worth looking at, for how they download and display/render
pages.

Commit comment on offpunk.py mentions Python readability!

Jonathans-MacBook-Pro:code jon$ git clone https://tildegit.org/ploum/AV-98-offline
Cloning into 'AV-98-offline'...
fatal: unable to access 'https://tildegit.org/ploum/AV-98-offline/': SSL certificate problem: Invalid certificate chain

BUT I just download AV-98-offline-master.tar.gz from tildegit web page

Jonathans-MacBook-Pro:code jon$ pwd
/Users/jon/piety.downloads-etc/code

Jonathans-MacBook-Pro:code jon$ tar xvf AV-98-offline-master.tar.gz 
x av-98-offline/
x av-98-offline/.gitignore
x av-98-offline/CHANGELOG
x av-98-offline/LICENSE
x av-98-offline/README.md
x av-98-offline/offpunk.py
x av-98-offline/screenshot_offpunk1.png
x av-98-offline/screenshot_offpunk2.png
x av-98-offline/setup.py


19 Mar 2022

https://(japanese characters).com/reader-web-page-readability-on-the-cli/

On their github page, xn--gckvb8fzb.com/... gets to this page.

*reader* is for your command line what the readability view is for modern
browsers: A lightweight tool offering better readability of web pages on
the CLI. ...

https://github.com/mrusme/reader

Go language 100.0%


28 Mar 2022

Recently re-read Rob Pike's Window Systems Should be Transparent about
his mux window manager for the Blit terminal - a predecessor to Plan 9 
Rio and 9term, with lots in common.

It is completely mouse driven.  All cursor motion and display editing is
done with the mouse -  you type only to enter characters (and to enter ed-
style command lines involving regexp etc.)   I think backspace works, but
that is the only display editing you can do from the keyboard.

IT has a Send mouse menu button option which sends the currently selected
text - from anywhere in the buffer - to the host - similar to our C-j and
M-j keys, or our T and P commands.    BUT it also pastes that sent text to
the end of the buffer.  Then when the output arrives, it is put at the end
of the buffer, where it appears immediately after the commmand that caused
it. This is to make it easy to re-select, edit, and re-send a previously
sent command.

Send saves the sent command in a buffer, so to re-send exactly the same
command again, you don't need to re-select it, just click that mouse
button again. (The default menu selection is the same as the selection you
picked last time.)   I recall this was supposed to be most useful for
search and search/replace commands.repeated 

30 Mar 2022

Looked at cat-v man page for plan 9 rio window manager - successor to mux
(above) Very similar - almost all display editing requires mouse -  but
also -

Editing in the current line only from keyboard with backspace r-arrow
l-arrow and also key combos C-a C-e C-k C-u as in emacs, also C-w (kill
word)

newline sends line to host including newline char, C-d the same except
without newline char, C-d at the beginning of a line sends EOT, end-of-
file indication.

ESC toggles hold mode so you can type and edit multiple lines without
sending text to host.

31 Mar 2022

rio, continued - use mouse with scroll bars to move through the text
buffer. Also, up-arrow, pg up, down-arrow, pg down, keys scroll half a
page up or down.   home and end keys go to top and bottom of buffer.
These keys do not change the selected text (I think they mean they don't
change the selection).

So, there is no key that moves the selection to the preceding line or
the next line - you have to use the mouse for that.

Leah Neuchirchen's 9term page at github:

Like rio's terminal but more features:

You can turn off automatic scrolling as text arrives, and use pg up and
pg dn to scroll yourself, or search for text and then just click to 
search for next selection.  Replaces more and less programs.  (Rio also
offers this.)

Separate hold buffer you can pull out from the bottom border.  
Edit several/many lines here then shift-RET to send it all to host at once.
Useful for ed and mail.

Separate command bar you can pull out of top border, type single 
word commands (like a menu) or whole command lines (like for make),
then execute them by clicking on them.
(Do these commands echo at the end of the text region like in mux/rio?)

Left-click URLs to open them in a browser.

----

Somebody's new Zee editor in Rust - 

https://github.com/mcobzarenco/zee

Via HN  https://news.ycombinator.com/item?id=30850652

Uses emacs key bindings.
C-w is Cut Selection, but M-w is Copy Selection (without cutting it).
C-g is Clear Selection, as well as Cancel Current Operation.


 6 Apr 2022

Gradually Migrating Python Code to asyncio
https://www.erichgrunewald.com/posts/gradually-migrating-python-code-to-asyncio/

via https://news.ycombinator.com/item?id=30886927

Just one comment but it looks well-informed

"uniqueuid: The post is a good introduction, and in particular this
sentence summarizes the core problem:

'You can always call normal functions from coroutines, and you can always
await coroutines from other coroutines, but scheduling coroutines from
normal functions requires some care.'

... However! Im my experience, it is inevitable that one needs to re-
consider the entire architecture of an app when adding async parts. The
reason is that you will end up implicitly creating and removing choke
points that may be surprising.  For example, ..."

 8 Apr 2022

https://litestream.io/how-it-works/

Litestream
A lightweight streaming backup system for sqlite

Uses the sqlite Write Ahead Log, WAL

------

Terminal Colors
https://github.com/termstandard/colors

"There exists common confusion about terminal colors. This is what we have
right now:

    Plain ASCII
    ANSI escape codes: 16 color codes with bold/italic and background
    256 color palette: 216 colors + 16 ANSI + 24 gray (colors are 24-bit)
    24-bit truecolor: "888" colors (aka 16 million)
"

This page is mostly about using Truecolor - which terminal emulators
and programs support it etc.

----

The Day of a new Command-Line Interface: Shell
https://arcan-fe.com/2022/04/02/the-day-of-a-new-command-line-interface-shell/

Criticism and proposal regarding shell, terminal etc.  Very long,
difficult to get into, not inviting.  Also:

https://arcan-fe.com/2021/09/20/arcan-as-operating-system-design/

"Arcan is a single-user, user-facing, networked overlay operating system."

Again, complicated and not well-explained.


13 Apr 2022

From Julia Evans' blog: 
https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/
...
mdp, glow (ways to display markdown in the terminal)

https://github.com/visit1985/mdp
for 'presentations' (slide shows), in C

https://github.com/charmbracelet/glow
includes a sort of file manager for .md files, in Go


27 Apr 2022

Reloadium
https://github.com/reloadware/reloadium

'Reloadium adds hot reloading also called "edit and continue"
functionality to any Python application ...'

via https://news.ycombinator.com/item?id=31168069

a comment recommends the alternative jurigged, and its author responds

https://github.com/breuleux/jurigged

 1 May 2022

Builder of ST-80 on RPi using Circle C++ library, linked in 
Piety/doc/baremachine.md:

https://foss-north.se/2021/speakers-and-talks.html

(scroll down about 25%)

Michael Engel
Combat complexity - build your own open OS and hardware

"Commercial as well as popular open source operating systems and the
hardware they are based upon today have a complexity that is difficult to
manage and comprehend. They include a large number of questionable design
and implementation choices, invading the users' privacy, ability to
understand a system and adapt it to one's own requirements. 

So can we still take control of computers back into our own hands today? ..."

Video of his talk linked here

https://conf.tube/w/p/b9a072ab-1c4d-4912-905c-3f68096582ca?playlistPosition=14


 9 May 2022

About Smalltalk-like browser for Ruby, via

on: Bare metal Smalltalk-80 port to the Raspberry Pi 
https://news.ycombinator.com/item?id=23879107

RubyTalk alpha
https://www.youtube.com/watch?v=2xC5B5t5Rq8

https://github.com/dpaola2/RubyTalk

"RubyTalk's goal is to provide an interactive, visual programming
environment, much like Smalltalk or Self. Build your applications by
interacting directly with objects in memory, rather than their textual
representation on the filesystem."

Slides:

https://docs.google.com/presentation/d/14CCKIB5iXrKT98HmsTGJHgk6ceFDPNabcDzhj25qvmY/edit#slide=id.p


 2 Jun 2022

Ultimate Guide to Python Debugging
https://martinheinz.dev/blog/24

Debugging Crashing Application - using postmortem debugger

Logging ...

lots on using stdlib logging module

__repr__ For More Readable Logs

example:

 def __repr__(self):
        return f"Rectangle({self.x}, {self.y}, {self.radius})"

__missing__ Dunder Method For Dictionaries

To avoid having to poke around in the code and see which key is missing, 
you could implement special __missing__ method, which is called every time KeyError is raised.

# Run crashing application
~ $ python3 -i crashing_app.py
Traceback (most recent call last):
  File "crashing_app.py", line 9, in <module>
    func()
  File "crashing_app.py", line 7, in func
    raise SomeError("Something went wrong...")
__main__.SomeError: Something went wrong...
>>> # We are interactive shell
>>> import pdb
>>> pdb.pm()  # start Post-Mortem debugger
> .../crashing_app.py(7)func()
-> raise SomeError("Something went wrong...")
(Pdb) # Now we are in debugger and can poke around and run some commands:
(Pdb) p SOME_VAR  # Print value of variable
42
(Pdb) l  # List surrounding code we are working with
...

Stack Traces

... you can also use traceback package to print stacktrace
(traceback.print_stack()) or extract raw stack frame, format it and
inspect it further (traceback.format_list(traceback.extract_stack())).

Reloading modules during debugging

>>> func()
"This is result..."  # Outdated result
>>> from importlib import reload; reload(module)  # Reload "module" after changes made to "func"
>>> func()
"New result..."

We knew about that ...

 4 Jun 2022

html2text
https://github.com/aaronsw/html2text/blob/master/html2text.py

"html2text is a Python script that converts a page of HTML into clean,
easy-to-read plain ASCII text. Better yet, that ASCII also happens to be
valid Markdown (a text-to-HTML format)."

One file, 914 lines.  Originally by Aaron Swartz in 2000, see
http://www.aaronsw.com/2002/html2text/

 5 Jun 2022

From https://news.ycombinator.com/item?id=31626049 comments on 
Xerox PARC...
      
agumonkey 10 hours ago | parent | prev | next []
I really wonder if we're not ready for a compression phase. Simpler,
safer, expressive sets of ideas to unify OS/stack/network/UI.

pjmlp 9 hours ago | root | parent | next []
In a sense that is what unikernels/managed runtimes running on top of type
1 hypervisors represent, now if we ever get a consumer OS with that
approach, it remains to be seen.
I don't expect to still see it during my lifetime.

I Googled 'type 1 hypervisor' - it's a hypervisor that runs on bare metal,
not a host operating system.  Sources say Xen is a type 1 hypervisor, 
but also says KVM is sort of a type 1 hypervisor, even though it is a Linux
kernel module - ?

So you can boot Xen on a bare machine?

Google: Xen boot on bare machine

Gets lots of hits - yes, apparently you can.

Google: KVM boot on bare machine

No pertinent hits - lots of hits, but off-topic.
One hit said what makes KVM a type-1 hypervisor is, 
the VMs it hosts can themselves run hypervisors and
host VMs.  

Isn't MirageOS exactly what pjmlp is asking for?
It's a Unikernel written in OCaml that runs on Xen.
Oh but it's not self-hosted:

From https://mirage.io/

"Code can be developed on a normal OS such as Linux or macOS, and then
compiled into a fully-standalone, specialised unikernel that runs under a
Xen or KVM hypervisor. ..."

Google: Xen virtio 

Many hits.    Maybe we could write a Python OS that uses virtio, and run
it on Xen with virtio running on bare metal?   This uses Xen as sort of an
alterative to NopSys.   Would using virtio make the Python OS much easier
to write?

This is not much different from Unikernel.  It is a lot like Mirage, which
runs a unikernel written in OCaml on a Xen or KVM hypervisor.  It has many
of the same disadvantages.  Is there really any advantage over just
running Python on Linux?

 7 Jun 2022

Why emacs has buffers
https://news.ycombinator.com/item?id=31650859

links to 

emacs/src/buffer.c 
https://github.com/emacs-mirror/emacs/blob/master/src/buffer.c

"Buffer manipulation primitives for GNU Emacs."

6477 lines (5508 sloc) 214 KB !

8organicbits writes: "The git history goes quite far back too. The first
version and the current version look quite different." and links to:

https://github.com/emacs-mirror/emacs/commit/1ab256cb9997cf15983abc63310cdf32f0533bca

 8 Jun 2022

Another HN comment on Why emacs has buffers linked above:
     
morelisp writes: "A buffer is essentially a tuple

    (contents, point, mark, definition of a "paragraph", ...)

So the article is correct - without buffers 0-ary (or implicitly 1-ary,
since all evaluation is in the context of a buffer) functions like
`forward-paragraph` could not exist. And without a wide library of such
functions, the correspondence between normal editing commands and
idiomatic Emacs Lisp wouldn't exist, and most benefits of Emacs would be
lost."

14 Jun 2022

https://utcc.utoronto.ca/~cks/space/blog/unix/WorkstationFramebufferConsoles

https://utcc.utoronto.ca/~cks/space/blog/linux/TextAndFramebufferConsoles

These discuss two kinds of linux consoles, framebuffer and VGA.
The framebuffer console uses a lot more memory and is usually slower.

Also https://news.ycombinator.com/item?id=31798006 - reminiscing about
various linux console options and configurations of old, VGA, CGA, VBE ...
and various console text mode options you could configure the kernel for.

thristian writes: "In a classic 1990s PC, to write a character to the
screen, the CPU can write a single byte directly into the text-display
part of the VGA card's memory, and a fraction of a millisecond later the
VGA hardware is looking up that byte in the character ROM and sending
electrical pulses down the VGA cable.  In a modern PC ... (long story) ..."

Also:

The Oldschool PC Font Resource:
https://int10h.org/oldschool-pc-fonts/fontlist/

and https://news.ycombinator.com/item?id=31805822 links to more alternatives

15 Jun 2022

The strange relationship between objects, functions, generators and coroutines
https://www.packt.com/bizarre-python/

Scanned quickly, thought it was more complicated than necessary, possibly
worth a second look.

---

     
RPi Pico as a Jupiter Ace 
https://news.ycombinator.com/item?id=31754460

"The two core Rp2040 microcontroller has one core dedicated to drive the
VGA output and the other core for the emulation."

Jupiter Ace was a small Z80 computer sold in the UK in the 80s - similar to 
Sinclair - but built-in language was Forth not BASIC.

Links to YT video.  Most of the video spent showing C code for the 
emulator + video, explaining how he separated video to the second core,
and how that's controlled from software.   Author has web site and Github
but this project (including the code shown in the video) doesn't seem to be
at either.   Author doesn't explain much about RPi Pico or how the video
is connected to the second RPi core, but he as a YT channel with other 
videos about RPi Pico that may explain it.

Repurposing an old Android phone as a Ruby web server
https://lbrito1.github.io/blog/2020/02/repurposing-android.html

"1. Install Termux.  First of all we need a Linux environment in our phone.
Termux is a terminal emulator and Linux environment for Android. Its
available on Google Play Store. No additional configuration is needed
after installation. ...

2. Set up SSH.  You wont want to type a lot of commands into a tiny
touchscreen, so lets set up ssh so that we can log into Termux remotely. ...

etc. etc."

This does look easy - you don't have to 'root' it.  Maybe I can try
this with my old LG phone?

100 comments at https://news.ycombinator.com/item?id=31841051

by people who have done something similar.

DesktopECHO writes:  "I went the Linux Deploy route and published a couple
of container images that Just Work on pretty much any ARM Android device.

Once you shiv systemd, some pretty elaborate scripts can run in an Android
chroot just like they would on bare-metal ARM. Just think of your old
Android as an off-brand rPi with case, built-in touchscreen LCD, and way,
way fewer GPIO pins. No surprise the server will need a new UPS battery.

NextCloudDroid: https://github.com/DesktopECHO/nextcloudpi 
Pi-hole for Android: https://github.com/DesktopECHO/Pi-hole-for-Android "


28 Jun 2022

My Brainfuck CPU - A simple Processor in Python via MyHDL (part 1)
https://nbviewer.org/github/sandbender/BF_CPU/blob/master/BF_MYHDL_CPU_v2.ipynb

Nice explanation of some MyHDL code.

 8 Jul 2022

edd - line-based text editor
https://github.com/bojle/edd

"edd is my attempt at writing the ed text-editor from scratch. Initially,
I was planning to only write a subset of ed, but ended up writing it in
its entirety. ..."

"I find ed to be the perfect program to test a new programming language.
It demands good support for strings, regexes and data structures while
being reasonably sized to be completed in under a week. I polished my C
skills as I was learning it by writing this from scratch "

via 

Ed is the standard text editor 
https://news.ycombinator.com/item?id=32013779

edd is in C, very nice style.  edd.c is 788 lines (670 sloc) main.c is 58 lines
(52 sloc) and parse.c is 302 lines (275 sloc).   This  might be a good
comparison to our future rewrite of ed.py - in Python we should be able to
do better! Our ed.py is now 587 lines, buffer.py is 347 lines (analogous
to edd.c ad main.c), parse.py is 180 lines, check.py is 96 lines
(analogous to parse.c).  So we are already roughly the same size.   But
ed.py has multiple buffers which edd.c does not, and edd.c has
comprehensive undo which ed.py does not.

Other recent small editors in C are antirez' < 1000 line editor and eu linked
in Leah Neukirchen's Trivium this month.

13 Jul 2022

RISC-V Linux on ESP32 
https://blog.drorgluska.com/2022/07/risc-v-linux-on-esp32.html

Uses Fabrice Bellard's TinyEMU to emulate RISC-V.  Also uses Buildroot.
Details on how to use each.

via https://news.ycombinator.com/item?id=32077853

14 Jul 2022

PicoMite  Basic Interpreter for the Raspberry Pi Pico 
https://news.ycombinator.com/item?id=32096392

cristoperb writes:

Geoff's PicoMiteVGA project[1] is a Pico which boots to BASIC and has VGA
output:

"The VGA output is generated using the second CPU on the RP2040 processor
plus one PIO channel so it does not affect the BASIC interpreter which
runs at full speed on the first CPU. A handfull of components (resistors
and a couple of diodes) is all that is required to connect the VGA
monitor"

1: https://geoffg.net/picomitevga.html

Uses PS/2 keyboard

Lots of other links to elecronics and microcontroller DIY on that page.

ASCII Video Terminal
https://geoffg.net/terminal.html

VT100 compatible, PS2 keyboard, VGA out.  PIC32 uP.  Links to longer
description in this magazine article:

https://www.siliconchip.com.au/Issue/2014/July/Micromite%2C+Pt.3%3A+Build+An+ASCII+Video+Display+Terminal

25 Jul 2022

Edbrowse  A Command Line Editor Browser 
https://news.ycombinator.com/item?id=32148474

Comments have links to other text browsers and similar programs like
news readers.  Also discusses libraries vs. purpose-built code.

Raspberry Pi Pico W Silicon Level Teardown
http://electronupdate.blogspot.com/2022/07/raspberry-pi-pico-w-silicon-level.html

"Conclusion

The Pico W is a great example of modern silicon engineering.  

1) An ASIC which provides a CPU, RAM, Peripherals
2) An RF chip which provides WIFI (and, unused, Bluetooth)
3) A memory device (the SPI NOR Flash)
4) A power supply PMIC

All wrapped in a compelling state-of-the-art assembly.  nice."

via https://news.ycombinator.com/item?id=32200444

CrowPi L is a $200 laptop shell for Raspberry Pi 4
https://www.cnx-software.com/2022/06/17/crowpi-l-200-laptop-shell-for-raspberry-pi-4/

CrowPi L Raspberry Pi 4 laptop review  Part 1: Unboxing and teardown
https://www.cnx-software.com/2022/07/19/crowpi-l-raspberry-pi-4-laptop-review-part-1-unboxing-and-teardown/


26 Jul 2020

Unboxing a $100 Chromebook 
https://news.ycombinator.com/item?id=32198762

about https://twitter.com/timsneath/status/1550598445248811008

Stefani got one of these at Best Buy at Northgate
Can run Linux in a VM in 'developer mode'.

HN article has links to lots of information about it, for example:

https://chromium.googlesource.com/chromiumos/docs/+/HEAD/containers_and_vms.md

https://chromeos.dev/en/linux/linux-on-chromeos-faq#am-i-running-linux-on-chrome-os

https://mrchromebox.tech/#devices

https://galliumos.org/

Even cheaper - $59 on sale

Evolve III Maestro E-Book 11.6" Laptop Computer - Dark Grey Intel Celeron N3450 1.1GHz Processor; 4GB LPDDR4-2133 RAM; 64GB ROM Data Storage; Intel HD Graphics 500
Available for In-Store Pickup Only.
$129.99 SAVE $70.00
$59.99 
https://www.microcenter.com/product/649971/evolve-iii-maestro-e-book-116-laptop-computer-dark-grey

You can put Linux on it

https://www.reddit.com/r/linuxhardware/comments/tk6hdp/evolve_iii_maestro_ebook_116/

What happens when you press a key in your terminal? (jvns.ca)
https://news.ycombinator.com/item?id=32175100

dundarious: "Anyone interested in the machinations of all of this terminal
stuff should look at antirez kilo, a terminal text editor in under 1000
lines of code: https://github.com/antirez/kilo There is a nice tutorial
that walks through how one might write it from scratch:
https://viewsourcecode.org/snaptoken/kilo/ "


28 Jul 2022

https://github.com/matu3ba/mtm

"mtm is the Micro Terminal Multiplexer, a terminal multiplexer. ...
The entire project is around 1000 lines of code. ...
You need ncursesw. ..."

There are 64 color combinations (8 ANSI colors fg text X 8 colors bg)  
The page has a color picture of all 64 combinations
Oh, but there is another option for 256 colors, more than many 
terminals acually support.

via https://news.ycombinator.com/item?id=32231519 

links to other projects by the same author, including a plan 9 sam editor
port to X windows.   Also mt, a mini terminal emulator.

Another comment mentions socat as an alternative to rlwrap.

31 Jul 2022

Connecting the Pico W to the Web with Anvil
https://anvil.works/pico/how-it-works

Anvil is an all-python web app frameowrk.   Can connect to 
Pico W for IoT applications, using websocket.

They provide some security, including their own certificate authority.
Explanation of certificates and CA in the article.

via https://news.ycombinator.com/item?id=32292628

skybrian writes: "Looks like they are contributing certificate
verification to MicroPython as part of this project:

https://github.com/micropython/micropython/pull/8854 "


 3 Aug 2022

https://blog.arduino.cc/2022/08/02/introducing-multitasking-to-arduino/

via https://news.ycombinator.com/item?id=32320727

Much more in the HN comments than in the article (which is not unusual).

Parallel Programming for FPGAs
https://github.com/KastnerRG/pp4fpgas

"An open-source high-level synthesis book

http://hls.ucsd.edu/  "

via https://news.ycombinator.com/item?id=32314700 

with several long answers to " How does one actually program on an FPGA?"

Cornell Course on Raspberry Pi Pico 
https://ece4760.github.io/

also PIC32

via https://news.ycombinator.com/item?id=32307870, not much more info

Running Linux microVMs on macOS (M1/M2)
https://slp.prose.sh/running-microvms-on-m1

"krunvm is just a simple CLI utility. The heavy lifting here is done by
buildah, libkrun and the Hypervisor.framework" (links to all)

via https://news.ycombinator.com/item?id=32304056 with more links

Tang Nano 9K  FPGA SBC with HDMI
https://wiki.sipeed.com/hardware/en/tang/Tang-Nano-9K/Nano-9K.html

via https://news.ycombinator.com/item?id=32299544 with more links

mentions open source FPGA toolchains

several comments mention vendor  aliexpress

"the "Apicula" project for yosys/nextpnr support for Gowin FPGAs is pretty
good ..."

"Using obscure boards (lattice vvml) with obscure languages (chisel,
myhdl, spinalhdl) and obscure tools (nextpnr, yosys) has been an exercise
in careful reading of documentation and disciplined experimental strategy...."

"PYNQ is an interesting project. It blends python / jupyter notebooks
running on the embedded processor in the FPGA ps with any custom hardware
you design for the FPGA pl (programmable logic). You can generate the
hardware logic by writing a Verilog module, or else using HLS which is a
flow for taking c code and creating hardware. ..."

MangoPi MQ Pro Benchmarks & Review
https://bret.dk/mangopi-mq-pro-benchmarks-review/

Raspberry Pi Zero vs MangoPi MQ Pro Benchmarks
https://bret.dk/raspberry-pi-zero-vs-mangopi-mq-pro-benchmarks/

Nice photos of the boards too.

via RISC-V based single board computers are getting there 
https://news.ycombinator.com/item?id=32298137#32299330

Lots of discussion of RPi alternatives and wisdom of using Chinese parts.

https://github.com/lurk101/pshell

"A tiny Raspberry Pico shell with flash file system, Vi, and C compiler.

To build for UART (USB is the default):

cmake .. -DUSB_CONSOLE=OFF

C source code examples.

Example console log.

Pico Shell - Copyright 1883 (c) Thomas Edison
...

console on UART [120 X 48]

enter command, hit return for help

file system automatically mounted

/: ls

       0 [src]
       9 .exrc
     960 b.c
      39 test.c

/: cd src

changed to /src

/src: ls

     270 blink.c
     319 clocks.c
     103 crash.c
      59 hello.c
    1133 io.c
     203 pi.c
     225 printf.c
     531 sieve.c
     298 sine.c
     584 string.c
     256 tictoc.c

/src:

    cat - display text file
     cc - compile C source file
     cd - change directory
  clear - clear the screen
     cp - copy a file
 format - format the filesystem
     ls - list directory
  mkdir - create directory
  mount - mount filesystem
     mv - rename file or directory
   quit - shutdown system
 reboot - Restart system
     rm - remove file or directory
 status - filesystem status
unmount - unmount filesystem
     vi - editor
   xget - get file (xmodem)
   xput - put file (xmodem)

https://news.ycombinator.com/item?id=32333467

a9h74j: "To be fair, I am all in favor of bringing boot-to-editor or boot-
to-shell to this level of processor. Some level of autoexec or init.sh
would be helpful for deployment. Invites comparisons to MMBasic for pico. ..."


14 Aug 2022

A small statically linked Linux system

https://github.com/oasislinux/oasis

"... quite a bit different from other Linux-based operating systems you might
be familiar with, and is probably better compared to a BSD. ..."

via https://news.ycombinator.com/item?id=32458744, 180 comments on 
pros and cons of static linking etc.


22 Aug 2022

QEMU internals
https://airbus-seclab.github.io/qemu_blog/

via https://news.ycombinator.com/item?id=32548853 with refs to related


Pico-10BASE-T
https://github.com/kingyoPiyo/Pico-10BASE-T

10BASE-T from Raspberry Pi Pico using 2 GPIO pins.

Shows how to connect Pi GPIO pins to twisted-pair ethernet cable 
useing resistors and transformer

via https://news.ycombinator.com/item?id=32548905 with links to similar
using different chips and techniques

vbezhenar  writes:
"... Bit-banging high-speed protocols is not easy and usually not
possible. 10 Mbit ethernet is 10 million bits per second. So it's almost
always requires external modules which implement this protocol in hardware
and provide some high-level interface to MCU.

Rpi Pico MCU has an interesting feature called PIO. It's basically a
dedicated module with some extremely simplified assembly support. It works
independently from the MCU cores. People implement various kinds of
protocols using bit-banging with PIO.

Basically if you don't care about power, you can theoretically save some
money by not including an ethernet module in your device, but rather
implementing things with bit-banging. Or it might be an interesting
experience for someone who implemented it.

Usually in reality you just buy STM32 with ethernet support and let it
deal with all the protocol intricancies. ..."

ADAM '74
https://www.engineersneedart.com/adam74/adam74.html

emulates old ADM-3A with 3" LCD display and Teensy Microcontroller.

many more details at github:

https://github.com/EngineersNeedArt/Adam74

via https://news.ycombinator.com/item?id=32545131 with detailed
dialog between kragen and others about implementing ADM-3A, VT52 etc.
with FPGAs and microprocessors, with links.


23 Aug 2022

Hand Made Lil UEFI  Allen Webster Ryan Fleuy
https://handmade.network/p/308/lil-uefi/

"Simple, headers-only C library with definitions of UEFI types and
protocols, intended for UEFI application (operating system) programming,
for the 2022 Wheel Reinvention Jam. ...

... We've packaged up a number of UEFI types and definitions in a hopefully
straightforward way, and commented where in the spec each piece of code
was derived from. So, you can just #include the library and get rolling
with using UEFI protocols to communicate with hardware. NOTE THAT we have
not yet covered the entire spec, and we did take some design liberties in
organizing and naming the code.

We've included an example "operating system" that boots up and uses some
of the most basic UEFI protocols to grab memory information about the
system, and then draw a simple solid color to the display."

https://git.mr4th.com/Mr4th/lil_uefi   - git but not github!

via https://news.ycombinator.com/item?id=32561352

mathews2 writes:  "The UEFI applications that you can build with Lil UEFI
can be shoved into a special FAT32 partition on your disk and named
EFI/BOOTX64.EFI[1], the firmware finds this file and will start executing
it. ..."

This article didn't mention the UEFI shell.

28 Aug 2022

Build and run a minimal Linux kernel
https://www.subrat.info/build-kernel-and-userspace/

On qemu, using BusyBox for the userspace.  

via https://news.ycombinator.com/item?id=32624981 but no comments

 1 Sep 2022

Programming On 34 Keys 
https://peppe.rs/posts/programming_on_34_keys/

Homemade two-piece keyboard (one for each hand) with unusual shape and
key layout, rationale explained in detail.

 2 Sep 2022

In praise of QEMU
https://drewdevault.com/2022/09/02/2022-09-02-In-praise-of-qemu.html

via https://news.ycombinator.com/item?id=32688863 with much more 
about how QEMU works with KVM, VFIO etc.


      
      
ZeroNilNanNada writes:  "Few years ago there was an uprise of blog posts
explaining how to run Linux as a primary system and virtualize Windows
machine with GPU passthrough for gaming. ~ 1 year ago I took a dive and
did a lot of reading and attempts to make it work, the final results made
me really happy. QEMU/KVM/VFIO is one of the best software combinations
I've ever used. ..."

See following comment by sm_ts on pros and cons of VFIO, that is VGA passthrough
including instructions https://github.com/64kramsystem/vga-passthrough

dinom writes: "It's truly awesome and has nearly become synonymous with
emulation on Linux. Of course without things like KVM, and assorted
accelerators, etc. it would lose a fair bit of luster ..."


 5 Sep 2022

Researching the virtio approach - boot a baremetal hypervisor that 
supports virtio, then run Piety OS with support only for virtio devices.
So the baremetal hypervisor + virtio plays the same role as Linux or
UEFI or a unikernel or NopSys - it's a way to boot, and get device drivers.
Writing Piety OS with virtio might be easier than writing real device 
drivers.  Search for 'virtio' in baremetal.txt for more on this.

Say, doesn't Mirage work like this?  It runs on Xen, not a bare machine, 
right?  Could we use the Mirage interface to Xen as a model?

https://phoenixnap.com/kb/what-is-hypervisor-type-1-2

Type 1 hypervisors run on bare metal - Xen is an example.
Others are Microsoft Hyper V, Oracle VM Server for x86, VMware ESXi ...

Type 2 hypervisors run on top of an OS -
examples are VirtualBox, Qemu, VMware Workstation Player, and Parallels. ...

"Type 1 hypervisors are an OS themselves, a very basic one on top of which
you can run virtual machines. The physical machine the hypervisor is
running on serves virtualization purposes only. You cannot use it for
anything else. ...

Given that type 1 hypervisors are relatively simple, they do not offer
many functionalities.

Once you boot up a physical server with a bare-metal hypervisor installed,
it displays a command prompt-like screen. If you connect a monitor to the
server, what you get to see are some of the hardware and network details.
This consists of the CPU type, the amount of memory, the IP address and
the MAC address. ...

In order to create virtual instances, you need a management console set up
on another machine. Using the console, you can connect to the hypervisor
on the server, and manage your virtual environment. ..."

Boo!  hiss!  Does Xen require this?

https://www.how2shout.com/tools/8-free-best-open-source-bare-metal-hypervisors-foss.html

(not too helpful)

(Says KVM on Linux is a type 1 hypervisor?  BUT it's on Linux ... !?

Virtio On Xen
https://wiki.xenproject.org/wiki/Virtio_On_Xen

virtio is apparently not built into Xen (boo! hiss!) but 
there are various add-ons, this page described four.
This looks like a complicated mess....

https://wiki.libvirt.org/page/Virtio

"Virtio is a virtualization standard for network and disk device drivers
where just the guest's device driver "knows" it is running in a virtual
environment, and cooperates with the hypervisor. This enables guests to
get high performance network and disk operations, and gives most of the
performance benefits of paravirtualization.

Note that virtio is different, but architecturally similar to, Xen
paravirtualized device drivers ...

This page describes how to configure libvirt to use virtio with KVM
guests. Requirements

    KVM or recent (not 0.9.1) development QEMU
    A virtio-compatible guest: any Linux OS with kernel >= 2.6.25 should be OK. 
    libvirt >= 0.4.4

External links

    http://www.linux-kvm.com/content/block-driver-updates-install-drivers-during-windows-installation
    ...
    http://www.linux-kvm.org/page/Virtio
    http://www.linux-kvm.org/page/Using_VirtIO_NIC
    http://www.linux-kvm.org/page/Boot_from_virtio_block_device
    ...

https://wiki.xenproject.org/wiki/Xen_EFI

(apparently EFI can boot Xen directly - then you get ... what?)

https://www.oreilly.com/library/view/professional-xen-virtualization/9780470138113/ch04.html

"Chapter 4. Booting and Configuring a Xen Host

In this chapter, we finally get to start the Xen hypervisor and boot a
paravirtualized Linux kernel under the hypervisor. By the end of this
chapter, you'll have a fully functioning administrative domain for Xen
(domain0) and will be ready to move on to installing paravirtualized Xen
virtual machines and/or fully virtualized Hardware Virtual Machines (HVMs)
in your Xen environment, depending upon the capabilities of your hardware.
..."

And soon after it ends.  You have to sign up with O'Reilly to see the rest.

https://wiki.archlinux.org/title/Xen

"Xen is an open-source type-1 or baremetal hypervisor, which makes it
possible to run many instances of an operating system or indeed different
operating systems in parallel on a single machine (or host). Xen is the
only type-1 hypervisor that is available as open source.

The Xen hypervisor is a thin layer of software which emulates a computer
architecture allowing multiple operating systems to run simultaneously.
The hypervisor is started by the boot loader of the computer it is
installed on. Once the hypervisor is loaded, it starts the dom0 (short for
"domain 0", sometimes called the host or privileged domain) which in our
case runs Arch Linux. ..."

WE would want to run Piety instead.

Lots of details in this Arch page.  Best explanation I found.

Next look up how Mirage works.

https://mirage.io/docs/hello-world

describes building and running small Mirage applications 
on Unix and Solo - some kind of VM hypervisor - not Xen.

This paper is about the Xen backend for Mirage, but doesn't seem
to explain the mechanics of building and running Mirage on Xen.

https://anil.recoil.org/papers/2010-hotcloud-lamp.pdf

 7 Sep 2022

QEMU supports virtio.  But, QEMU has to run on a host OS.  So you 
have your host OS, QEMU, then your VM.  Too much machinery.

Doesn't look like Xen is a good foundation for Piety.   Xen was never
intended to be a standalone OS of its own - it's built to host many VMs.
As I understand it from the archlinux page, when you boot Xen, it has to
boot a guest OS to run in DOM0 - usually it's Linux.   Then you use that
Linux to start other VMs in DOM1, DOM2, ...  Too much machinery.

So, how *does* Mirage work?  Maybe explained in 'GEtting Started'
section at https://mirage.io/docs

https://mirage.io/docs/hello-world

Tells how to make simple Mirage apps and for Unix or the Solo5 hvt backend
-  that's another VM hypervisor, not Xen  "When your unikernel is run, it
starts much like a conventional OS does when run as a virtual machine..."

This is about Xen backend for Mirage, but doesn't explain details
of starting and running Mirage on Xen:

https://anil.recoil.org/papers/2010-hotcloud-lamp.pdf

This page 

https://mirage.io/docs/learning

"xen (the Xen backend to Mirage) requires that Xen be run underneath your
operating system(s), and that Mirage will be run directly on top of Xen.
Installing Xen is not hard (about 20 minutes), and it may conveniently co-
exist as a dual-booted environment if you don't want to dedicate your host
machine exclusively to it."

https://github.com/Solo5/solo5/blob/v0.6.3/docs/building.md

discusses virtio.

"Solo5 is essentially a piece of "middleware" interfacing unikernel-style applications with their host systems ..."

Supports IncludeOS unikernels as well as Mirage.

More details about Mirage and Xen here:

https://mirage.io/docs/xen-events

"MirageOS applications running on Xen are linked with a small C library
derived from mini-os. This library takes care of initial boot: mapping the
shared info page and initialising the event channel state. Once the domain
state is setup, the OCaml runtime is initialised and the OCaml OS.Main.run
callback is evaluated repeatedly until it returns false, signifying exit. ...

mirage-platform/xen/runtime/kernel/eventchn_stubs.c:evtchn_look_for_work
contains mini-os boilerplate to safely interrogate the event channel ..."

These two pages provide all the details we were curious about - how build
then boot Xen with Mirage - the exact commands and what you see on the screen.

https://mirage.io/docs/xen-on-cubieboard2

This one even tells how to get libvirt into Xen (it's not built-in)

https://mirage.io/docs/libvirt-on-cubieboard

Apparently the cubieboard is ARM7.

BUT both pages say:

"Warning: Out of date  (Updated 2020-10-26. The following information is
of historical interest, since MirageOS 3.9.0 our Xen backend has been
revised, and only supports PVH mode and x86_64 as architecture.)"

So that's that for Mirage and Xen.

But what's that mini-os - ?  Oh, but --

"(Updated 2020-10-26. The following information is of historical interest,
since MirageOS 3.9.0 our Xen backend has been revised, and only supports
PVH mode and does not use mini-os anymore.)"

This is now a 404: https://github.com/mirage/xen/tree/master/extras/mini-os

https://wiki.xenproject.org/wiki/Mini-OS

"Mini-OS is a tiny OS kernel distributed with the Xen Project Hypervisor
sources. It is mainly used as operating system for stub domains that are
used for Dom0 Disaggregation. But it is also used as a basis for
development of Unikernels, having been instrumental in the formation of
multiple examples including ClickOS and Rump kernels. "

SO it seems if you want to run software on Xen you port it to mini-os
not virtio.

A tour of the Mini-OS kernel
https://www.cs.uic.edu/~spopuri/minios.html

"Mini-OS is a small OS kernel distributed with the Xen hypervisor sources.
I have documented some of the basic parts of this kernel for the reference
of people trying to port their OSes to Xen (also for people writing new
OSes for Xen). This work is not completed yet. The present document
includes a discussion of initialization and page table setup. Watch this
space for more on event channels, grant tables, Xen bus etc. ..."

The only other pertinent thing in that space is

Ethos - An Operating system for the Xen hypervisor
https://www.cs.uic.edu/~spopuri/ethos.html

"Both Ethos and Linux are shown running on top of Xen. Ethos will delegate
all file system, networking and device driver work to a Dom0/DomU Linux
kernel. The rest of the tasks are handled within Ethos. ..."

   -----------------------------
    | Ethos   <--|-->   Linux   |
    ----------------------------
    |           XEN             |
    -----------------------------

Oh, for pity's sake...

All this mini-os stuff may be obsolete - Mirage has replaced it with
PVH mode, whatever that is.


 9 Sep 2022

Julia Evans: How to send raw network packets in Python with tun/tap
https://jvns.ca/blog/2022/09/06/send-network-packets-python-tun-tap/

"Recently Ive been working on a project where I implement a bunch of tiny
toy working versions of computer networking protocols in Python without
using any libraries, as a way to explain how computer networking works.

Im still working on writing up that project, but today I wanted to talk
about how to do the very first step: sending network packets in Python. ...

...

Ill close with a plug for scapy here: its a really great Python networking
library for doing this kind of experimentation without writing all the
code yourself.

This post is about writing all the code yourself though ..."


13 Sep 2022

Reading 'Turning Down the LAMP: Software Specialisation for the Cloud'
by Anil Madhavapeddy et al, in file  mirage-on-xen-2010-hotcloud-lamp.pdf 
about Mirage on Xen

"The key principle behind Mirage is to treat cloud vir- tual hardware as a
compiler target, and convert high-level language source code directly into
kernels that run on it. Our prototype compiler uses the OCaml language ...

We do not modify the OCaml compiler itself, but rather the run- time
libraries it provides to interface with the OS. This code is mostly
written in C, and includes the garbage col- lector and memory allocator.
...

...Mirage provides a persistence mechanism as a non- intrusive language
extension to OCaml [12]. For each datatype specified by the programmer, we
statically gen- erate functions at compile time to save and retrieve val-
ues of this type to and from the Xen virtual block devices. ...

The backend uses the SQLite database library, and SQL is automatically
generated from the applications datatypes and never used by the programmer
directly. SQLite has a VFS layer to let OSs define their own I/O
mechanisms. Mirage implements a Xen blkfront VFS which interacts directly
with a block device with- out an intervening filesystem. This layer
performs highly optimised I/O ..."

Block diagram in Fig 1 shows Mirage kernel running right on (Xen)
hypervisor which runs right on hardware.   There is no Linux in Dom0 in
the diagram - Xen Dom are not mentioned.

----------------
Application Code
.............
Mirage Kernel
------------
Hypervisor
------------
Hardware 
------------

Fig 1

This is all quite interesting but makes it clear that Xen is complicated
and it is a major job to adapt Mirage to run on Xen.  Probably similar
large amounts of work are needed for the other Mirage backends.

Also it is clear that both Xen and Mirage are intended for 'the cloud'
and are not a suitable foundation for a standalone personal computer.
I saw no mention of any console - recall the NetBSD based Rump Kernel
had none, had no keyboard support nor any stdin.


14 Sep 2022

Unikernels: Rise of the Virtual Library Operating System
Anil Madhavapeddy and David J. Scott in ACM Queue
In my mirage-os-acm-queue-2557963.2566628.pdf 

"... A modern hypervisor provides VMs with CPU time and strongly isolated
virtual devices for networking, block storage, USB, and PCI bridges. A
libOS running as a VM needs to implement only drivers for these virtual
hardware devices and can depend on the hypervisor to drive the real
physical hardware. Isolation between libOS applications can be achieved at
low cost simply by using the hypervisor to spawn a fresh VM for each
distinct application, leaving each VM free to be extremely specialized to
its particular purpose. The hypervisor layer imposes a much simpler, less
fine-grained policy than a conventional operating system, since it just
provides a low-level interface consisting of virtual CPUs and memory
pages, rather than the process- and  file-oriented architecture found in
conventional operating systems. 

Although OS virtualization has made the libOS possible without needing an
army of device- driver writers, protocol libraries are still needed ...

... In MirageOS, the OCaml compiler receives the source code for an entire
kernels worth of code and links it into a stand-alone native-code object
le. It is linked against a minimal runtime that provides boot support and
the garbage collector. There is no preemptive threading, and the kernel is
event-driven via an I/O loop that polls Xen devices. ...

...Developers just starting out want to explore their code interactively
using a Unix-style development environment. The Cohttp library needs a TCP
implementation to satisfy its module signature, which can be provided by
the UnixSocket library. 

When the programmers are satis ed that their HTTP
logic is working, they can recompile to switch away from using Unix
sockets to the OCaml TCP/IP stack shown by MirTCP in  gure 3. This still
requires a Unix kernel but only as a shell to deliver Ethernet frames to
the Web-server process (which now incorporates an OCaml TCP/IP stack as
part of the application). The last compilation strategy drops the
dependency on Unix entirely and recompiles the MirNet module to link
directly to a Xen network driver, which in turn pulls in all the
dependencies it needs to boot on Xen. This progressive recompilation is
key to the usability of MirageOS, since we can evolve from the tried- and-
tested Linux or FreeBSD functionality gradually but still end up with
specialized unikernels ..."

Table 1 of code sizes in Mirage running a webserver shows total 43 kLOC of
C and 52 kLOC of OCaml - so it's not nearly an all-OCaml system, it's
roughly half-and- half.   Boot uses 18 kLOC of C and 0 OCaml, OCaml
runtime uses 20 kLOC of C and 0 OCaml, TCP/IP uses trace amounts of C and
12 kLOC of OCaml, HTTP uses 0 lines C and 11 kLOC OCaml etc. The network
driver and block driver both use 0 lines C and 1 kLOC of OCaml - those are
the drivers on the Mirage side that talk to Xen.

Table 2 shows other unikernels, including HalVM, ErlangOnXen, NetBSD Rump,
and several others.  They all run on Xen.

(Later, added 20 Sep 2022)

Read the Xen 2003 SOSP paper: Xen and the Art of Virtualization
in file  xen-art-of-virtualization-2003-xensosp.pdf

Xen is *not* a suitable platform for a single VM!  Paper says
it's planned to support ~100 VMs with fast startup and shutdown.

The I/O is interesting - it doesn't use same scheme is QEMU virtio
but has its own virtual devices.   And, instead of delivering host's
interrupts to guests, it has some event scheme.  So the device-and-interrupt
story is interesting. 

BUT there is a lot of stuff in Xen we don't need: intricate multiplexing of
CPU and menory.

Paper explains at length that Xen supports 'paravirtualization' - unlike QEMU,
have to modify the guest OS.  Moreover, it seems that (also unlike QEMU) it can
only run programs for the *same* architecture as the x86 host - the guest
machine instructions run on the host, there is no emulation of a different 
architecture from the host - so it's quite fast but not as 
flexible as QEMU.

(later, added 22 Sep 2022)

Links on IBM's early VMs:

The IBM 360/67 and CP/CMS
https://www.multicians.org/thvv/360-67.html

Short History of IBM’s Virtual Machines
http://cap-lore.com/Software/CP.html

Both have many links to more.


16 Sep 2022

https://f4pga.org/

"F4PGA is a fully open source toolchain for the development of FPGAs
of multiple vendors. Currently, it targets the Xilinx 7-Series,
Lattice iCE40, Lattice ECP5 FPGAs, QuickLogic EOS S3 and is gradually
being expanded..."

via https://news.ycombinator.com/item?id=32861075


https://github.com/librerpi/

includes rpi-open-firmware Open source VPU side bootloader for
Raspberry Pi, other repos too.

See also https://librerpi.github.io/

via https://news.ycombinator.com/item?id=32848110


17 Sep 2022

Bitbanged DVI On A Raspberry Pi RP2040 Microcontroller
https://hackaday.com/2021/02/12/bitbanged-dvi-on-a-raspberry-pi-rp2040-microcontroller/

"... the Raspberry Pi Pico and its RP2040 microcontroller (is) more
than just yet another ARM chip ... (it has) something special ...  its
onboard PIO peripherals. ... [Luke Wren] provides us with an example,
as he pushes an RP2040 to produce a DVI signal suitable to drive an
HDMI monitor.

It shouldn’t be a surprise that the chip can be overclocked, however
it’s impressive to find that it can reach the 252 MHz necessary to
generate the DVI timing. ...

The result is a usable DVI output which though it is a relatively low
resolution 640×480 pixels at 60 Hz is still a major advance over the
usual composite video provided by microcontroller projects. With
composite support on monitors becoming a legacy item it’s a welcome
sight to see an accessible path to an HDMI or DVI output without using
an FPGA. ..."

Much much more at 

Bitbanged DVI on the RP2040 Microcontroller
https://github.com/Wren6991/picodvi

Hack-a-Day also links to this FPGA alterative

https://github.com/hdl-util/hdmi/

"SystemVerilog code for HDMI 1.4b video/audio output on an FPGA."

with links to several pages on DVI and HDMI

via https://news.ycombinator.com/item?id=32865956 packetlost writes:

"(On the RP2040) The 4 PIO state machines are pretty unique in the MCU
ecosystem as far as I can tell. It makes "bitbanging" a completely
acceptable approach for a huge number of protocols. ...

It's like a microprocessor with fine-grained clockspeed control
(fraction of the main CPU clock) and like 9 instructions that focus on
driving GPIO pins. There's FIFO queues for pushing/pulling data
from/to the PIO from/to the main CPU, so you don't have to waste any
real clock cycles ...

The datasheets gives an example of serial communication ...  it's not
 just another MCU, there is actually some hardware that makes it
 somewhat unique."

in https://news.ycombinator.com/item?id=32863053 vardump writes:

"Programmable IO such as RP2040 (Raspberry Pi Pico) are eating a tiny (but increasing) part of FPGA lunch. ...

there are applications where you just need high speed "bit banging",
where you pretty much had to use an FPGA before.

I meant to mention RP2040 as an example, since I was talking about
it's PIO feature, not because other microcontrollers do not have
similar features, but because it's the most well known.

For example, RP2040 PIO is flexible and fast enough to run DVI/HDMI
purely in software.  ..."

The RP2040 can be programmed in Circuit Python, right?  Probably not
for this high-performance low-level stuff, but doesn't Circuit Python
(a Micro Python fork from Adafruit) provide optional compilation to
native code and inline assembly code - ?

----

https://github.com/pfalcon/awesome-python-compilers

Added to Piety/doc/language.md

via 
    
S6: A standalone JIT compiler library for CPython 
https://news.ycombinator.com/item?id=32879636


18 Sep 2022

DE10-Nano Kit
https://www.terasic.com.tw/cgi-bin/page/archive.pl?Language=English&No=1046

"The DE10-Nano Development Kit presents a robust hardware design
platform built around the Intel System-on-Chip (SoC) FPGA, which
combines the latest dual-core Cortex-A9 embedded cores with
industry-leading programmable logic..."

via 

MiSTer FPGA
https://mister-devel.github.io/MkDocs_MiSTer/

"MiSTer is an open source project that aims to recreate classic
computers, video game consoles, and arcade machines using modern
hardware ...  MiSTer utilizes an FPGA board called the DE10-Nano which
connects to your TV or monitor via HDMI video out. It can also be
expanded with various add-on boards such as a 7-port USB hub, a 128MB
SDRAM module, and either a Digital I/O or Analog I/O board. ..."

via https://news.ycombinator.com/item?id=32887388

Related:

Kiwi - a 68k Homebrew Computer
https://www.ist-schlau.de/

"The operating system is a modified version of Enhanced Basic
68k. When the system is switched on, the look and feel is as old
school as it was intended to be. One can just start typing PRINT,
GOTO, LIST, LOAD, RUN like used to do two decades ago."

http://svn.ist-schlau.de/repos/EmuTOS

via 

Kiwi – a 68k hobby homebrew computer running EmuTos and Enhanced 68K BASIC 
https://news.ycombinator.com/item?id=32886643
    
EmuTOS – Free OS for Atari ST and more
https://news.ycombinator.com/item?id=32887199


22 Sep 2022

The Last Working Olivetti Mainframe Sits In a Tuscan High School 
https://spectrum.ieee.org/when-the-history-of-computing-comes-alive

from 23 May 2019  - w/color picture of console with operator

https://site.ieee.org/sb-uol/the-last-working-olivetti-mainframe-sits-in-a-tuscan-high-school/

text from the above spectrum page

via https://news.ycombinator.com/item?id=20632227 from Aug 7 2019, 46 comments

https://spectrum.ieee.org/the-italian-computer-olivettis-elea-9003-was-a-study-in-elegant-ergonomic-design

from 21 May 2019

https://spectrum.ieee.org/rediscovering-the-remarkable-engineers-behind-olivettis-elea-9003

from 17 Jun 2019

"Rediscovering the Remarkable Engineers Behind Olivetti’s ELEA 9003 A
 new graphic novel explores the forgotten history of the ELEA 9003,
 one of the first transistorized digital computers ..."

includes link to this 5 minute video, in Italian with subtitles:

La Macchina Zero Booktrailer
https://www.youtube.com/watch?v=9dVHc9AGXHY

https://www.enggtalks.com/news/112283/the-italian-computer-olivetti-s-elea-9003-was-a-study-in-elegant

More and different text than the spectrum page


29 Sep 2022
   
Security in Plan 9 (2002) (9p.io)
https://news.ycombinator.com/item?id=33007117

"tyingq: The 9p filesystem lives on in a few "modern" places, like
within WSL, QEMU, and other places where it's a good bridge between a
host OS and container or VM.

macshome: Apple added support just in 2019!

  man mount_9p

codemac: ChromeOS uses it as well to proxy files between containers.

spijdar: I think GP meant to say (the extremely confusingly named)
virtio-fs, as opposed to virtfs/9pvirtio.

Virtio-fs is independent of 9P and has optional support for using
shared memory to greatly increase performance, it also maps better to
the permissions and metadata of "modern" filesystems IIRC, not sure if
9pvirtio had this problem but I remember coworkers having permissions
problems with the 9P bridge in WSL2 (Plan9's permission system is very
simple and doesn't map well to other VFS's)

MisterTea: > Plan9's permission system is very simple and doesn't map
well to other VFS's

Plan 9 is a pure VFS OS. 9p uses regular unix permissions which map
just fine. The major issue is that since plan 9 is all vfs, there are
no crufty unix leftovers like hidden dot files or hard/soft
links. User specific configuration files belong in $user/lib and bind
replaces hacky links. These old unix hacks were accommodated in
9p2000.u. Further extensions to .u resulted in 9p2000.L which adds
some Linux metadata stuff (I cant remember right now, my memory of
9p2000.u/L is fading)."
     
enriquto: Unfortunately, kids these days seem to be afraid of
files. For a hardcore unix fan, curl and wget are useless tools when
you can just cat /www/url

ithkuil: It's seems nice on a first glance. But how do you set headers
and content type for example?

oneplane: You echo the request into /www/url and cat the response from it
	
stusmall: How does it know where to send it? Does it just assume it
should use the contents of the Host header and send the request there
or is the "url" in your path the destination? Does it support things
like SNI?[1] Can you spoof that? Does it expect clients to parse out
the raw output of the HTTP response? I have so many questions. From a
quick glance this seems a lot harder to work with than curl for both
trivial and non-trivial uses.

I tried to find docs on it, but couldn't. If you could link me to some, I'd appreciate it.

[1] After posting this I remember like a doofus this is an OS from the 90s. Of course it doesn't. But a similar question could be asked about any other TLS level setting. That's just one I've had to spend more time debugging using curl in the past.
	
seiferteric: To be fair you'd probably end up with a tool like curl
just for setting all the options and headers, but it would just be a
wrapper around sending the request to the url file. Just like there
are tools for reading and parsing files in /proc.
	
enriquto: or even better, to avoid state, the url "file" is executable
and you pipe through it:

    /www/url < request > answer
	
theamk: that already exists, the command is "wget -i - -o -"
 
p_l: > That said, I can't say I've seen anyone try to write anything
that scales like nginx on Plan 9.

Because you really don't need those big web serving monoliths on plan
9. You wire things up using rc scripts and programs like execfs
(implements cgi) plus httpd/tcp80 or another web serving listener and
sandbox code using namespaces. Plan 9 is more true to unix philosophy
and more unix than unix. (edit: execfs is experimental but available
on shuthub.us along with other webstuff like tcp80)

---

An Offline-First browser for the smolnet
https://notabug.org/ploum/offpunk

"OFFPUNK

A command-line and offline-first smolnet browser/feed reader for
Gemini, Gopher, Spartan and Web by Ploum.

The goal of Offpunk is to be able to synchronise your content once (a
day, a week, a month) and then browse/organise it while staying
disconnected. ...

Offpunk is a fork of the original AV-98 by Solderpunk and was
originally called AV-98-offline as an experimental branch. ...

Offpunk is a single python file. Installation is optional, you can
simply download and run "./offpunk.py" or "python3 offpunk.py" in a
terminal.

You use the go command to visit a URL, e.g. go
gemini.circumlunar.space. (gemini:// is assumed is no protocol is
specified. Supported protocols are gemini, gopher, http, https,
mailto, spartan and file). ...

Offpunk has no "strict dependencies", i.e. it should run and work
without anything else beyond the Python standard library and the
"less" pager. However, it will "opportunistically import" a few other
libraries if they are available to offer an improved experience or
some other features. Python libraries requests, bs4 and readability
are required for http/html support. Images are displayed if chafa or
timg are presents (python-pil is needed for chafa version before
1.10). When displaying only a picture (not inline), rendering will be
pixel perfect in compatible terminals (such as Kitty) ..."

This looks quite interesting.  Download .tar.gz from notabug web page
into ~/piety.downloads-etc/code then

Jonathans-MBP:code jon$ tar xfvz offpunk-master.tar.gz 
...

Got it.  Hey, we also have 

Jonathans-MBP:code jon$ ls -l *.tar.gz
-rw-r--r--@ 1 jon  staff  198024 Mar 14  2022 AV-98-offline-master.tar.gz
...

Offpunk via https://misc.l3m.in/txt/smollweb.txt

---

https://davidvujic.blogspot.com/2022/08/joyful-python-with-repl.html

via https://news.ycombinator.com/item?id=32890895 but no comment, no upvotes!

"With some help from IPython, it is possible to write, modify & evaluate Python code in a REPL Driven way. ... (configuration details follow)

 set IPython as the default shell in Emacs. Have a look at my Emacs
 setup for the details. ...

For a live demo, have a look at my five minute lightning talk from PyCon Sweden about REPL Driven Development in Python. 

https://www.youtube.com/watch?v=0HaIYpxTzX8

The video:

"... I got it from Clojure ...

REPL-driven development is NOT about typing code into your REPL.
You type the code into your editor - with all its facilities - 

He shows emacs, editing python in the window on the top and showing
the IPython shell in the window on the bottom.

He writes a function in Python, then right below it writes a little
function that calls it - a kind of a test.

Then he selects that little function and types an emacs keycode to 
execute it.   The output appears in the IPython window.

He repeatedly edits the function, invokes his tester function, and
gets another line of output in IPython.   The IPython window shows

[In1]
[Out1] < python output from first version >

[In2]
[Out2] < python output from second versoin  >

[In3]
[Out3] < python output from third version >

...

Somehow he has configured his emacs sessino so the selected code
acts as IPython [In..]  each time - it doesn't echo in IPython window - 
and IPython [Out...] shows the output from it.

Pretty simple, crude even, but he says it's very effective - like
unit testing but much more convenient.  You can easily turn the 
test functions in the python window into a unit test module.

His emacs screen looks a lot like VS Code or other cool kids editors.
It's got a black background, lots of syntax coloring, and a sort
of navigation/browser/directory listing on the left edge

In the blog post he also shows how to set up VS Code to do this.

----

https://github.com/antirez/load81

"Load81 is an attempt at creating a Codea-inspired environment to
teach children how to write Lua programs. It features a graphical
programming environment and a Commodore-64 style integrated editor so
that the programmer is confined into a friendly environment with a
simple editor ...

(picture looks like C64 screen, even the color scheme)

Load81 is written in ANSI C and uses SDL and SDL_gfx and SDL_image, so
should compile on Mac OS X and Linux without issues. ...

I wrote it mainly because I and my children have fun with Codea but we
don't have an iPad at home, and using a real keyboard sometimes can be
less frustrating. ..."

Via both boffinAudio and oliwary in separte comments in
https://news.ycombinator.com/item?id=33003245, the recent thread on
Snakeware.

I have seen load81 before but I think I didn't put it in precursors.md
because it doesn't attempt to be a standalone OS or OS-like environment.
I suppose I could call it 'hosted'.

-----

Show HN: Refurb – A tool for refurbishing and modernizing Python codebases 
https://news.ycombinator.com/item?id=33003929

"simonw: This is the largest codebase I've seen that makes extensive
use of the new Python match: statement introduced in Python 3.10 -
example:
https://github.com/dosisod/refurb/blob/master/refurb/checks/...

dosisod: Thank you! I have found that pattern matching has made this
project a whole lot easier.

One of the other cool features about this project is how the check()
functions are loaded based off the type of the node argument:

https://github.com/dosisod/refurb/blob/master/refurb/loader....

This also supports type unions, so you can register your check for
binary and unary expressions by typing node as `BinaryExpr |
UnaryExpr`.

zem: that code is pattern matching on an ast node; the complexity is from
the data structure involved, not the language. there is no more
concise way to match a specific node and get at the relevant fields,
just various different forms of verbose code.
	
jraph: If anything, this matching on an AST is very readable and elegant, and
that just convinced me that the syntax of Python seems really good to
write a parser."

I wonder if this 3.10 pattern matching would be useful in the FLiP
proof checker?


 7 Oct 2022

The seL4 whitepaper explains this microkernel OS can *also* be used as
a hypervisor.  They achieve security by running each application and
system component (network stack, storage) in different VMs, with
access guarded by capabilities.

https://sel4.systems/About/seL4-whitepaper.pdf 

----

This wiki on self-hosting:  https://wiki.r-selfhosted.com/
via HN: 

How can a total beginner start with self-hosting?
https://news.ycombinator.com/item?id=33095823

anderspitman writes: "The reality is that we've let you
down. Self-hosting shouldn't be any more complicated or less secure
than installing an app on your phone. You shouldn't need to understand
DNS, TLS, NAT, HTTP, TCP, UDP, etc, etc. Domain names shouldn't be any
more difficult to buy or use than phone numbers. Apps should be
sandboxed in KVM/WHPX/HVP-accelerated virtual machines that run on
Windows, Mac, and Linux and are secure-by-default. Tunneling out to
the public internet should be a quick OAuth flow that lets you connect
a given app to a specific subdomain, with TLS certs automatically
obtained from Let's Encrypt and stored locally for end-to-end
encryption.

The technology exists to do all of these things, but no one has taken
the time to glue it all together in a truly good UX (I'm working on
it). Pretty much every solution in this space is targeted at the
developer market, not self-hosters.

So for now I'd recommend using a VPS. Your main challenge is going to
be learning a lot about security. There's currently no way around
that. A VPS limits the scope of damage that can be done if you get
hacked. Once you've learned enough you can move to your own
hardware. At that point I'd recommend setting up tunneling[0] and
using either Docker or QEMU/KVM."

jrockway: "My thought on networking is to make sure you only expose
SSH and HTTPS; firewall everything else off. SSH seems like a constant
source of problems for people new to running servers; within seconds
of your server coming online, people will be trying to guess usernames
and passwords. Configure it so you can't log in as root, and you can
only authenticate with a key. These folks will never guess your key in
a billion years ...

For HTTPS, run everything through a proxy...

Anything that you expose to the Internet on a well-known port with an
easy-to-guess password will be hacked instantly; SSH, MySQL,
Wordpress, you name it, they'll own it ..."

whartung: "I think you not start at home. That "last mile" of
connectivity is fraught with challenges of dealing with your internet
provider and all sorts of other things. It can be a headache, and it's
very particular to your situation, and your provider.

If you start "self hosting" on a cloud based instance, all that you
learn in doing so will carry over to when you finally are able to move
everything to a machine in house. ..."

 	   
arantius: > If you start "self hosting" on a cloud based instance ...
"I can't anti-suggest this more. Everything I've done on anything
labeled "cloud" is weird and special, in ways that would impede
learning or dilute its quality. They're several wrapper layers above
what's really going on.

Get a bare VPS (I'd start with one listed at LowEndBox for a couple
bucks a month) or dedicated host for learning. After you've learned
there, you can try learning the significant extra complexity of
"cloud". "

 	 
leejoramo: > In short it’s all about control, privacy, and security, in that order.

"I am going to strongly urge you to consider changing that order and
move *security* to the first priority. I have long run my own servers,
it is much easier to setup a server with strong security foundation,
than to clean up afterwards.

As a beginner, you should stick to a well known and documented Linux
server distribution such as Ubuntu Server LTS or Fedora. Only install
the programs you need. Do not install a windowing system on it. Do
everything for the server from the command line.

Here are a few blog posts I have bookmarked over the years that I
think are geared to beginners:

"My First 5 Minutes On A Server; Or, Essential Security for Linux
Servers": An quick walk through of how to do basic server security
manually [1]. There was a good Hacker News discussion about this
article, most of the response suggests using tools to automate these
types of security tasks [2], however the short tutorial will teach you
a great deal, and automation mostly only makes sense when you are
deploying a number of similar servers. I definitely take a more manual
hands-on approach to managing my personal servers compared to the ones
I professionally deploy.

"How To Secure A Linux Server": An evolving how-to guide for securing
a Linux server that, hopefully, also teaches you a little about
security and why it matters. [3]

Both Linode[4] and Digital Ocean[5] have created good sets of
Tutorials and documentation that are generally trustworthy and kept
up-to-date

Good luck and have fun

[1]: https://sollove.com/2013/03/03/my-first-5-minutes-on-a-serve...

[2]: https://news.ycombinator.com/item?id=5316093

[3]: https://github.com/imthenachoman/How-To-Secure-A-Linux-Serve...

[4]: https://www.linode.com/docs/guides/

[5]: https://www.digitalocean.com/community/tutorials "

That's just the beginning. 185 comments, many quite long and detailed
with links.


10 Oct 2022

Developing Common Lisp using GNU Screen, Rlwrap, and Vim 
https://blog.djha.skin/blog/developing-common-lisp-using-gnu-screen-rlwrap-and-vim/

Most interesting for its use of rlwrap, including the big rlwrap command 
he uses:

rlwrap \
    --break-chars "(){}[],'#\";|\\" \
    --case-insensitive \
    --file ~/.config/common-lisp/edi-weitz \
    --history-filename ~/.cl-history \
    --forget-matching '^[[:blank:]]*$' \
    --forget-matching '^[[:blank:]]*[^[:blank:](]' \
    -M '.lisp' \
    --multi-line='  ' \
    --only-cook '^[^[:blank:]]*>>* *' \
    --prompt-colour=red \
    --quote-characters "\"" \
    --remember \
    ros run "${@}"
    #ros run --load tools/load-clpm.lisp

And the commands and keystrokes he uses

Explanation 	 Key Presses
-----------      -----------
Start up GNU Screen  screen -dRR -S ergo -t djha-skin
Name the window repl 	    C-a A repl
Start the REPL 	clrepl
Start new window	C-a c
Start up the editor 	nvim <file>.lisp

Key Presses 	Explanation
-----------     -----------
g g V G C-c C-c		Evaluate whole file in REPL
C-a C-a     Switch to REPL or back to editor
C-^ 	    Open editor in REPL
v a F C-c C-c 	 Evaluate top-level form in REPL
v a f C-c C-c 	 Evaluate current form in REPL
g g V G = 	 Indent file
C-a C-a :doc <thing> 	View docs of thing (ECL)
C-a C-a (apropos <thing>)    Search for things

----

INF551 – Computational logic: from Artificial intelligence to Zero bugs
http://www.lix.polytechnique.fr/Labo/Samuel.Mimram//teaching/INF551/

Course web page with lots of links about formal methods, several
provers, OCaml programming, companies that use FM, etc...

----

Steven Kell's liballocs
https://github.com/stephenrkell/liballocs/

via 

Liberating the Smalltalk lurking in C and Unix (2014) [video] (youtube.com)
https://news.ycombinator.com/item?id=33130701

spindle writes: "I love this video!

I'm sad to say that it has nothing at all to do with Smalltalk.

Its topic is an attempt to make all programs that run in Linux (and
similar systems) able to access each others' data structures,
including each others' functions, using new work built on the
debugging facilities that unixes already have. The big picture is that
so-called static languages actually provide enough information (via
debugging mechanisms) so that OTHER languages can treat them as if
they were dynamic languages, and (really fun big picture stuff) can
potentially automate discovery of their structure to the extent that
all languages can interoperate without FFIs."

16 Oct 2022

https://github.com/pfalcon/pycopy/blob/master/README.md

Fork of Micro Python -- with ambitions.

"Pycopy aims to develop and maintain a minimalist, lightweight, and
extensible implementation of Python(-compatible) language. Pycopy to
CPython is a similar thing as Scheme to Common Lisp. Pycopy works
similarly well in the cloud, on desktop systems, on small embedded
systems, and scales all the way down to microcontrollers. The project
is developed and maintained by Paul Sokolovsky and is originally based
on MicroPython, developed by Damien George, Paul Sokolovsky and
contributors. Names "Pycopy" and "MicroPython" are used
interchangeably in the project documentation and source code.

WARNING: this project is in beta stage and is subject to changes of
the code-base, including project-wide name changes and API changes. ...

Just as "big Python", Pycopy has its "Zen". The main principles of
Pycopy are simplicity, minimalism, and light-weightedness.

At the same time, Pycopy strives to be a full-stack language and be
compatible with wider Python ecosystem. The Pycopy project resolves
these seemingly conflicting goals in a well-known and elegant way: by
being a multi-level project, and by providing flexible configuration
options. Specifically, there's a well-defined lightweight core written
in C, defining the "native Pycopy language". Above it, a number of
options are provided, implementing additional functionality
(oftentimes offering more CPython compatibility). For example, on top
of the core, "native Pycopy builtin modules" are provided, defining
the native Pycopy API, which provides a subset of CPython's modules
functionality, and at the same time, some extensions to it (driven by
Pycopy's goal to be efficient). These native Pycopy modules are
clearly namespaced, to allow to implement modules fully compatible
with CPython API without any changes to the main project.

On top of this primary project, there are separate projects to further
extend Pycopy functionality and achieve full-stack ecosystem. For
example, there's a pycopy-lib project (see below) to implement a fully
compatible CPython standard library for Pycopy.  ..."

----

https://applied-langua.ge/posts/i-dont-want-to-go-to-chel-c.html

reports experiment where they compile uxn bytecode program to machine
code by simply replacing each bytecode with the sequence of machine 
instructions that implement it.  Then they run that machine code program
directly on the processor, instead of running a bytecode interpeter.

"Our translation is done solely with the macro feature of the nasm
assembler. Each uxn instruction is translated to a sequence of x86-64
instructions, with no optimisation between instructions performed. The
translation (including macros) consists of 91 lines of assembly code,
so we have put it in another file."

The translator is in uxn.S (saved in kindle/uxnS.txt) - it is not a
general purpose translator, it just translates that one uxn test
program, which calculates fibonacci numbers.

"We observed that the C program takes 5.8ms to call fib(0x20), the uxn
virtual machine 537ms, and the translation 82ms. ... a simple
translator is successful at improving throughput by about 6.5
times. However, the translated code is still 14 times as slow as the
output of an optimising compiler" (applied to the C program)

Could this approach make a crude Python to native code compiler?
(Is that how MicroPython does it?)

17 Oct 2022

https://nechtan.io/articles/openbsd_minimalist_desktop.html

Hardware: Lenovo Thinkpad X280 (8GB RAM / 256GB NVMe / Intel Wifi)

Image (screen capture?) shows four 80 col x 24 line terminals tiled on 
screen.  Width accommodates two 80 col terminals side by side.

-----

Pine64 Ox64 $6 RISC-V Linux hybrid SBC (cnx-software.com)
https://news.ycombinator.com/item?id=33227375

techdragon: "I think theres a pretty good niche to be carved out here,
the Raspberry Pi Pico is just too minimal to run Linux or another
"full" operating system like it, which can give you several quality of
life features for free especially networking related ones like
DHCP/mDNS/etc... meanwhile the Raspberry Pi Zero family are all but
impossible to get in stock ..."

karmanyaahm: "The Ox64 and Pi Zero W have another advantage over the
Pico: USB 2.0. ..."

More about the board, with pictures, at

https://www.hackster.io/news/pine64-unveils-the-ox64-a-low-cost-dual-core-risc-v-single-board-computer-with-breadboard-support-36465495dcbe

---
	
Alpine Linux Minimalist Desktop
https://news.ycombinator.com/item?id=33236127

Discussion of minimalist Linux


20 Oct 2022

https://www.joelw.id.au/FPGA/CheapFPGADevelopmentBoards

https://www.fpgadeveloper.com/comprehensive-list-of-fpga-development-boards/

via https://news.ycombinator.com/item?id=33252556


24 Oct 2022

Python and Async Simplified
https://www.aeracode.org/2018/02/19/python-async-simplified/

via https://news.ycombinator.com/item?id=33283938


25 Oct 2022

http://incise.org/tinywm.html

"TinyWM is a tiny window manager that I created as an exercise in
minimalism. It is also maybe helpful in learning some of the very
basics of creating a window manager. It is only around 50 lines of
C. There is also a Python version using python-xlib."

via https://news.ycombinator.com/item?id=33330804

auraham: "Wonder how hard could it be to add tiling support?"

Beltalowda "You don't even strictly need it in the WM, as you can
resize windows from other programs, even shell script with xdotool
etc, although xdotool/shell quickly becomes somewhat unwieldy I once
wrote a "tiling WM" like this. It actually worked fairly well, and I
kind of liked the modularity of it.

At any rate, I dug up the old thing: https://pastebin.com/i91yD96F – I
also had some other scripts to control window placement, movement,
etc. I once planned to rewrite it to a "real" language and combine it
with a "slightly less tiny wm" as a full release, but never really got
around to it, and I also don't really use tiling any more (I just have
one full-screen window all the time)."
    
Beltalowda: 'This isn't a "real program", as such. It's a demo or
"rainy Sunday fun to figure out a bit how X11 works".'


https://hackaday.com/2022/10/23/design-your-own-chip-with-tinytapeout/

"You get eight digital inputs, eight digital outputs, and there are
200 gates at your disposal. What could you build with this? For a
start, a BCD to 7-segment decoder, a UART transmitter, or even a full
4-bit CPU"

https://github.com/maehw/wokwi-verilog-gds-lowspeed-tiny-uart

https://github.com/tommythorn/tinytapeout-4-bit-cpu

The cult of dd (2017) (eklitzke.org)
https://news.ycombinator.com/item?id=33324704

HN comments look much more useful than the article.  What dd is really 
useful for, including:

"colonwqbang: "The author neglects to mention any of the use cases
where "dd" really is the best alternative. Such as when you need to
copy a bootloader from an existing image without damaging your
partition table:

# My partition table is in sector 0 and my Linux partition starts at
  sector 62500

dd if=random-linux-image.img of=/dev/mmcblk0 bs=512 count=62499 seek=1 skip=1

How do you make "cat" seek 512 bytes into its stdout before writing?
You can't.  ..."

elteto: "I just recently used dd to binary patch some files. I needed
to read n bytes from offset p in file1 and write them to offset q in
file2:

  dd if=file1 of=file2 bs=1 skip=p seek=q count=n conv=notrunc
"

0xbadcafebee: "Proud member of the cult! I've used dd for all kinds of things:

  - Extract the magic bits from a file
  - Copy the disk MBR
  - Make a disk image with a specific block size and confirm it wrote correctly
  - Create loopback disk images
  - Over-format floppy disks for Linux distros that need every extra byte
  - "Securely" delete files (overwrite exact file size with random junk)
  - Copy data more efficiently by changing block size

Some of dd's useful functions:

  - format fixed-length records from newline-separated input
  - transform lowercase to uppercase and vice-versa
  - create sparse files
  - don't truncate data
  - don't stop processing on errors
  - skip and seek in files, input and output, separately"
  
1letterunixname: "`dd` has purposes, so the author must not do anything real:

0. Clearing volume tables

1. Creating files of fixed sizes

2. Varying block sizes

3. Partial reads

4. Unaligned reads

5. Differing block sizes

6. Character set translation"

Many more examples in the HN comments


26 Oct 2022

This looks astonishingly detailed and thorough.  

via https://news.ycombinator.com/item?id=33345040

User:Sakaki/Sakaki's EFI Install Guide/Disabling the Intel Management Engine 
https://wiki.gentoo.org/wiki/User:Sakaki/Sakaki%27s_EFI_Install_Guide/Disabling_the_Intel_Management_Engine

"The Intel Management Engine ('IME' or 'ME') is an out-of-band
co-processor integrated in all post-2006 Intel-CPU-based PCs. It has
full network and memory access and runs proprietary, signed,
closed-source software at ring -3,[1][2][3][4] independently of the
BIOS, main CPU and platform operating system[5][6] — a fact which many
regard as an unacceptable security risk (particularly given that at
least one remotely exploitable security hole has already been
reported[7][8][9]).

 Warning The process involved will require re-flashing your system's
BIOS-chip firmware image, and will almost certainly void your system
warranty. It may result in your machine becoming 'bricked'. On some
(though not many) PCs, the ME is used to initialize or manage certain
system peripherals and/or provide silicon workarounds — if that is the
case on your target machine, you may lose functionality by disabling
it.  Remember: disabling the IME is a completely optional step:
proceed entirely at your own risk.

The process we will be following is as follows:

    ensuring you have the necessary components available;
    locating (and identifying) the BIOS flash chip on your target PC;
    setting up a Raspberry Pi 3 Model B (or B+) ('RPi3') or Pi 4 Model B ('RPi4') as an in-system flash programmer;
    reading the original firmware from the BIOS flash chip (and validating this), using the RPi3/4;
    creating a modified copy of this firmware using me_cleaner;
    writing the modified copy of the firmware back to your PC's BIOS flash chip, again using the RPi3/4;
    restarting your PC, and verifying that the IME has been disabled.

Although some systems do allow the full contents of the BIOS flash
chip to be reprogrammed using software tools only (so called 'internal
flashing'), on most PCs this facility is either completely
unavailable, or can only write to the unprotected areas of the flash
filesystem (excluding the ME area), or will only write vendor-signed
images. Accordingly, we will describe the approach of using 'external'
flashing in this guide, as that is the most reliable.  ..."


28 Oct 2022

Project Details For Microcode-less TTL CPU 
https://hackaday.io/project/11703-microcode-less-ttl-cpu/details

Detailed explanation of design

Microcode-less TTL CPU Gallery
https://hackaday.io/project/11703/gallery#5963315bb00cacb87ad07dbdf33f3e2c

Block diagram and schematic appear here

"A discrete-logic CPU that fits on a prototype board, and is able to
run complex C programs, all without microcode."

Compiler, toolchain
https://github.com/szoftveres/ttlcpu/


30 Oct 2022

How to write a bootloader from scratch (2019) (memfault.com)
https://news.ycombinator.com/item?id=33360830


1 Nov 2022

The pdb interact command
https://til.simonwillison.net/python/pdb-interact

trace - Trace or track Python statement execution - Python 3.11.0 docs
https://docs.python.org/3/library/trace.html

(this was also linked to a til.simwillison page)


2 Nov 2022

A Register-Based Python Interpreter for Beter Performance (acm.org)
https://news.ycombinator.com/item?id=33436394

links to PDF

https://github.com/zq1997/RegCPython

---

Booting an Embedded OS: the Booting and U-Boot Phase
https://serhack.me/articles/os-embedded-booting-phase-uboot/

part 2 of a series:

Introduction to Firmware Analysis of a Reolink IP Camera
https://serhack.me/articles/introduction-firmware-analysis-ip-camera-reolink/

    Part 1: Introduction to Firmware Analysis
        Embedded Devices
        The Reolink IP Camera
        Software Part
        Analysis through Binwalk
    Part 2: Booting an Embedded OS
        Booting Phase
        U-Boot
        Loading Phase
    Part 3: Hardware Devices of Reolink
        Image Extraction with DD
        Flattened Device Tree
        Reolink Hardware Devices
    Part 4: File System of an Embedded Device
        Introduction to the File System
        UBI File System
    Part 5: The Operating System
        Buildroot and Busybox
        Typical Paths of an Embedded Linux Distribution
        Configuration Files


 5 Nov 2022

Hack Club Sprig
https://github.com/hackclub/sprig

"Sprig is a game console where every user is a creator. It can only be
obtained by building a tile-based game in the web-based game editor
and shipping it in the community gallery. It's made by Hack Club. ...

Sprig is a custom handheld game console built by Hack Club. Fall of
2022, we are giving a Sprig (valued at over $100 in components alone)
to every teenage hacker that successfully shares a game they create in
our community gallery. ...

hardware development kit. It’s not just for gaming! The Sprig console
is designed to be assembled and disassembled. Each kit includes parts
needed for getting started with hardware engineering and embedded
systems programming. This includes a Raspberry Pi Pico, a TFT7735
screen, a MAX98357A I2S class D audio amplifier, a whole bunch of
buttons, LEDs, a speaker, and a carrier board which wires all these
components together while exposing the remaining pins on the
microcontroller. It’s a complete system for generating graphics,
sound, and handling tactile inputs which is reprogrammable at the
touch of a button. ...

Sprig is open source. Shipping a game to the Sprig Gallery is
contributing to an open-source project. Everything about Sprig is
transparent and editable. That includes the hardware designs, the game
engine for the web (this repo), the embedded game engine for the
RP2040 chip, the web-editor itself (this repo), and even the gallery
and intro pages! We did some fun engineering to get Sprig to work and
to make your games run the same on your desktop computer and a $4
microcontroller. That involved custom JS runtimes with optimizations
in C and even PIO assembly. We also documented some behind-the-scenes. ...

Only teenagers and younger can receive Sprigs! All are welcome to
submit to the gallery though. ..."

Sprig Assembly Guide
https://github.com/hackclub/sprig/blob/main/docs/ASSEMBLY.md

with lots of big photos.

via https://news.ycombinator.com/item?id=33451148

cedric-h: "Hey everyone, I'm Cedric and part of the Sprig team. I'm 19. ...

The runtime also runs on personal computers, not just arm-eabi-none,
to help us test the games to get better error messages than the
physical hardware can give (because no operating system). We call this
our Sprig emulator, even though it's just the runtime compiled to a
different architecture, hooked up to CoreAudio and a minifb
window. ...

... It all started as a module for Kaluma, but we hit so many
performance, RAM and flash constraints that we found it was better to
write our own JS runtime. Apologies to Kaluma which is also trying to
frontpage HN right now! We both use JerryScript heavily, but Kaluma
connects you directly to the GPIOs and IRQs. We just connect you to
the screen and the buttons through the same API as in the web browser,
which is handy for making tile-based games. ..."

cedric-h: https://imgur.com/VTXNCcS got it working on the device!  the
performance is quite horrible ... enough to make you question why
running JS on embedded devices is a fad ... so it's time to start
profiling."

pjmlp: In a way it is funny to see JavaScript vs Python competing for
the next BASIC in this kind of platforms.  Good work, it looks cool.

apexedison: We debated running JS (Kaluma) or micropython on the
Pico. We started with Kaluma because the editor is in the
browser. After we got some game submissions though we realized we'd
have to do our own wrapper around Jerryscript for performance reasons
which is what the console ships with.

cedric-h hi - Sprig firmware dev.  Things would go wrong on the device
but I would have no idea how to diagnose it because I didn't know what
all Kaluma was doing for us. EX: to write to flash, you can't have any
IRQs going or code running on another core. How do we know what all
Kaluma is doing while running our code?

We were going to need a Kaluma-less runtime just to debug our
renderer, audio and input handling anyway, haha. I didn't think you
were going to let me spend time doing it instead of scrambling to fix
bugs with our Kaluma-based impl, so I spent a weekend prototyping our
own runtime. It worked, so I didn't have to wait for Kaluma's 2 minute
build times anymore. ..."


 9 Nov 2022

https://www.linux-kvm.org/images/f/fa/Kvm-forum-2013-firmware.pdf

BIOS (Seabios), UEFI, Coreboot ...

Find your way through the x86 firmware maze (2013) [pdf] (linux-kvm.org)
via https://news.ycombinator.com/item?id=33537180

video: https://youtu.be/kSCgsifwnDw


10 Nov 2022

Python Asyncio: The Complete Guide
https://superfastpython.com/python-asyncio/

via https://news.ycombinator.com/item?id=33547323

andrewstuart: "... The most frustrating thing about async Python is that
it has been improving greatly. That means that it’s not obvious what
“the right way” is, ie using the latest techniques. This is actually a
really big problem for async Python. I’m fairly competent with it, but
still have to spend ages working out if I’m doing it “the right
way/the latest way”.

The Python project really owes it to its users to have a short
cookbook that shows the easiest, most modern recommended way to do
common tasks. Somehow this cookbook must give the reader instant 100%
confidence that they are reading the very latest official
recommendations and thinking on simple asyncio techniques.

Without such a “latest and greatest techniques of async Python
cookbook” it’s too easy to get lost in years of refinement and
improvement and lower and higher level techniques.

The Python project should address this, it’s a major ease of use problem.

Ironically, pythons years of async refinement mean there’s many many
many ways to get the same things done, conflicting with pythons “one
right way to do it” philosophy.

It can be solved with documentation that drives people to the simplest
most modern approaches."

ltbarcly3: "Python asyncio is pretty awful. The libraries are of
extremely poor quality, and the slightest mistake can lead to blocking
the event loop. After a few years of dealing with it I refuse to
continue and am just using threads."

Many comments like that"
     
nineplay: "Not mentioned: The behavior is different between python 3.6
and 3.8. That was fun to debug.

Python is simply not the right language for asynchronous
programming. Things that are easy in many other languages are hard and
don't work as you'd expect. If you are in a python-only shop, brush up
on your presentation skills and see if you can convince them to branch
out.

Or write a shell script. You're better off with "./read_socket.sh &"
than you are with any python library."

packetlost: "The asyncio module was heavily refactored in 3.7, which
introduced the async/await keywords which was a *huge* improvement
over the 3.6 and below implementation.

I don't agree with this, but I will concede that async Python is
rarely the correct choice."


11 Nov 2022

https://spivey.oriel.ox.ac.uk/corner/Setting_up_a_Raspberry_Pi

"Steps to set up a Raspberry Pi for ssh access on the local network,
without ever needing to connect a keyboard or monitor to the Pi. These
instructions were prepared using a Pi 1 model B and checked on a Pi 3,
but other Pi's should be almost the same.

(These instructions require a Linux machine, ...

An alternative

    Get a Pi Zero (or Zero W) and follow the instructions here: https://gist.github.com/gbaman/975e2db164b3ca2b51ae11e45e8fd40a
    Further config info is here: https://gist.github.com/lurch/ad939bbce48064cffdb215268eac9f62
    Another helpful page: http://www.circuitbasics.com/raspberry-pi-zero-ethernet-gadget "


12 Nov 2022

Also via Mike Spivey's page:

Bare Metal Programming on Raspberry Pi 3
https://github.com/bztsrc/raspi3-tutorial

...What about Raspberry Pi 4?

More or less the same hw with the same peripherals, only the MMIO_BASE
address is different (as long as this tutorial concerned, most of the
differences are irrelevant for us). For RPi4 tutorials I'd recommend

Writing a “bare metal” operating system for Raspberry Pi 4
https://www.rpi4os.com/


14 Nov 2022

Pragmatic Unicode
https://nedbatchelder.com/text/unipain.html

by Ned Batchelder, at PyCon 2012.  Explains Unicode, encodings, 
text handling in Python 2 and Python 3.

----

0. Introduction: Traversing the Python Standard Library Documentation
https://rixx.de/blog/0-introduction/


15 Nov 2022

https://github.com/akhin/microarchitecture-cheatsheet

"Modern CPUs are very complex beasts and there are so much information
about them across different departments , therefore they can be
overwhelming. Microarchitecture cheat sheet aims to provide an
organised collection of topics about X86 CPUs that developers shall
have on their mind when considering performance : 

It divides that huge subject into following realms :

    Pipeline realm
    Arithmetic realm
    Branch prediction realm
    Load store realm
    Cache memory realm
    System memory realm
    Virtual memory realm
    Multicore realm
    MultiCPU realm
    "Across realms" realm"

It's a big poster!  Just a big .png.  README has list of references,
with links

17 Nov 2022

Why is the terminal input so weird?
https://www.warp.dev/blog/why-is-the-terminal-input-so-weird

About a new term emulator product that provides in-line editing and
other conveniences.

via https://news.ycombinator.com/item?id=33628205

Suggestions for alternatives, from readline to shells to many emacs
packages.


20 Nov 2022

How we ran a Unix-like OS (Xv6) on our home-built CPU with our home-built C compiler
https://fuel.edby.coffee/posts/how-we-ported-xv6-os-to-a-home-built-cpu-with-a-home-built-c-compiler/


TinyBIOS - A minimalist open source BIOS project for fun
https://github.com/pwk4m1/TinyBIOS

via https://news.ycombinator.com/item?id=33670963 with 23 comments

ECE 4760/5730, Cornell University
Digital Systems Design Using Microcontrollers
https://ece4760.github.io/

"... The course is currently taught using the RP2040 microcontroller on
the Raspberry Pi Pico development board. ..."


Accessing QEMU storage features without a VM
https://lwn.net/Articles/911281/

"The QEMU emulator has a sizable set of storage features, including
disk-image file formats like qcow2, snapshots, incremental backup, and
storage migration, which are available to virtual machines. This
software-defined storage functionality that is available inside QEMU
has not been easily accessible outside of it, however. Kevin Wolf and
Stefano Garzarella presented at KVM Forum 2022 on the new
qemu-storage-daemon program and the libblkio library that make QEMU's
storage functionality available even when the goal is not to run a
virtual machine (VM). ..."

Explains how QEMU block storage works.

21 Nov 2022

https://github.com/brutal-org/brutal

"... BRUTAL is an operating system built from scratch in modern C.
BRUTAL is built on top of a capability based micro-kernel.
BRUTAL targets x86_64, i686, RISC-V and ARM. ..."

https://github.com/brutal-org/brutal/blob/main/meta/credits.md

The BRUTAL Operating System takes inspirations and/or reuse code from
the following projects. ...

via https://news.ycombinator.com/item?id=33690679 - but nothing informative


The 539kernel Book
https://539kernel.com/

"This free book is intended to teach the reader how to create an
operating system's kernel called 539kernel. ...

    Read Online
    Download PDF

    Introduction
    Chapter 1. Let's Start with the Bootloader
    Chapter 2. An Overview of x86 Architecture
    Chapter 3. The Progenitor of 539kernel
    Chapter 4. Process Management
    Chapter 5. Memory Management
    Chapter 6. Filesystems
    Chapter 7. What's Next?
    References"

via https://news.ycombinator.com/item?id=33680869

"sasas: Very quickly skimming through the various chapters, it appears
that content offers a gentle introduction to the topic. Attention has
been made to provide clear and verbose explanations with supportive
diagrams.

Comparable other "guides" that I have stumbled across is osdev101 [1]
and "Writing an operating system from scratch" [2].

c0deR3D: If I want to porting it to x86_64, except the register width,
what else do I mainly need to take care of? Thanks!

muricula: If you're going to port it to a different architecture, do
arm64 or risc-v. Don't waste your time learning about the quirks of a
processor lineage which has compatibility with features meant to solve
problems from the 70s, like segmentation for example.

If you do want to do x86_64, off the top of my head by rough
order where you will encounter things:

0. bootstrapping the kernel either gets more complicated or easier
based on whether you start in 32 bit mode or 64 bit mode with
UEFI. Just start from UEFI and save yourself the headache.

1. The gdt (segmentation table) format changes

2. The tss (another segmentation table) format changes

3. The idt (interrupt table) format changes

4. The ABI (application binary interface, calling convention mostly)
changes, leading to a ton of subtle changes to the asm, much deeper
than just the register width

5. The page table format changes.

6. Modern processors kick off sibling cores slightly
differently. That's not really a 32->64 bit thing but is good to keep
in mind.

7. I didn't look to see how they implement their syscall path, but you
want to have your kernel ABI be the sysenter instruction, and not say
int 0x80. It will simplify your life"

Wow - it's really quite different!


23 Nov 2022

Lima: Linux virtual machines (on macOS, in most cases)
https://github.com/lima-vm/lima

"Lima launches Linux virtual machines with automatic file sharing and
port forwarding (similar to WSL2), and containerd.

Lima can be considered as a some sort of unofficial "containerd for
Mac".

Lima is expected to be used on macOS hosts, but can be used on Linux
hosts as well. ...

The talks page contains links to slides and video from conference
presentations about Lima. ...

How it works
    Hypervisor: QEMU with HVF accelerator
    Filesystem sharing: Reverse SSHFS (default), or virtio-9p-pci aka virtfs
    Port forwarding: ssh -L, automated by watching /proc/net/tcp and
    iptables events in the guest
..."

Much detail - looks mature.

24 Nov 2022

Ask HN: Ways to deal with Python 3.11 breaking change to asyncio
https://news.ycombinator.com/item?id=33727311

"AFAICT 3.11 requires your code to call asyncio.run(), whereas earlier
versions (for some definition of "earlier") required you to inject
your coroutines and then call loop.run_forever(). ..."

An answer linked to this:

Event Loop
https://docs.python.org/3.10/library/asyncio-eventloop.html

"The event loop is the core of every asyncio application. Event loops
run asynchronous tasks and callbacks, perform network IO operations,
and run subprocesses.

Application developers should typically use the high-level asyncio
functions, such as asyncio.run(), and should rarely need to reference
the loop object or call its methods. This section is intended mostly
for authors of lower-level code, libraries, and frameworks, who need
finer control over the event loop behavior. ..."


25 Nov 2022

An FPGA And A Few Components Can Make A Radio
https://hackaday.com/2020/04/18/an-fpga-and-a-few-components-can-make-a-radio/

via https://news.ycombinator.com/item?id=33734731

"rasz: Fun little known fact - all the cheap Chinese walkie talkies
(Baofeng etc) are SDR (software defined) since 2009.

https://hackaday.com/2022/11/15/getting-to-the-heart-of-a-ba...

All based on RDA1846 introduced in 2008. Inside this chip you will
find LNA, mixer, PLL, ADC/DAC, and a DSP. Complete dual band radio on
a chip. Cheap too.

https://datasheetspdf.com/pdf-file/1473066/RDA/RDA1846/1 


https://iffybooks.net/zines/


26 Nov 2022

https://anewsession.com/issue1/editors_howto/1.html

27 Nov 2022

Running a Unix-like OS on a home-built CPU with a home-built C compiler (2020) (edby.coffee)
https://news.ycombinator.com/item?id=33761419
	
robinsonb5: "Yes indeed - the open source toolchain (yosys, nextpnr
and GHDL for VHDL support) isn't 100% "there" yet, but it is good
enough to use for real projects as long as you keep the limitations in
mind. It supports several different FPGA families now, with Lattice
ICE40 (project icestorm) and Lattice ECP5 (project trellis) being
pretty mature, and (somewhat more experimentally) project XRay for
Xilinx series 7 and project Mistral for Cyclone V - and others too.

My own CPU (EightThirtyTwo) and SoC project (SDRAM, video, sound,
interrupts, uart) can be built for ECP5 using Yosys and friends, as
well as for a number Altera/Intel FPGAs using the proprietary Quartus."


https://mastodon.social/@mntmn/109089456714332716

"mntmn
minute
@mntmn@mastodon.social

MNT Reform laptop powered by 2x 100MHz VexRiscV/LiteX (running in open
hardware MNT RKX-7 Kintex-7 FPGA module). Full HD eDP display,
Ethernet, 1GB DDR3 (actually 2), SD card, SPI flash, USB host for
keyboard and trackball" (with many photos)

Runs on this computer:

MNT Reform: The Much More Personal Computer
https://mntre.com/media/reform_md/2020-05-08-the-much-more-personal-computer.html

video: MNT Reform, Open Hardware Laptop

Welcome to MNT Research.
https://mntre.com/

"MNT Reform The Much More Personal Computer. MNT Reform is the
radical, ultimate open hardware laptop, designed and assembled in
Berlin. ..."

Hey, didn't we run across this mnt guy's projects before?  Yes!
in Piety/doc/precursors.md

https://github.com/mntmn/interim  

Also, didn't he do a homemade FPGA video board?  Yes!

MNT VA2000, an Amiga 2000 Graphics Card (Zorro II/III)
https://github.com/mntmn/amiga2000-gfxcard

"I decided in October 2015 in a feat of madness: "I'll just make my
own graphics card. How hard can it be?"

It turned out to be a very, very challenging project, but luckily I
got much further than expected. On the way, I had to learn how to
design a PCB and get it manufactured, how to work with SMD parts, how
to program in Verilog and synthesize code for an FPGA, how SDRAM and
DVI/HDMI work (or how to get them to do at least something). I also
had to find out how to write a driver for the sadly
closed/undocumented Picasso96 "retargetable" graphics stack for
AmigaOS 3.

The Amiga is probably the last 32-bit personal computer that is fully
understood, documented and hackable ..."

Ah yes, it's in my

https://github.com/jon-jacky/home/blob/gh-pages/computing.md#30-Oct-2020


29 Nov 2022

Programming with Unicode
https://unicodebook.readthedocs.io/

Looks like a whole book online.


https://github.com/cnlohr/mini-rv32ima

"mini-rv32ima is a single-file-header, mini-rv32ima.h, in the STB
Style library that:

Implements a RISC-V rv32ima/Zifencei+Zicsr (and partial su), with
CLINT and MMIO. ..."

I don't get it.  How can a C header file implement a CPU?
But it looks like there is a lot of work here.

Includes link to video:

Writing a Really Tiny RISC-V Emulator 
https://www.youtube.com/watch?v=YT5vB3UqU_E

via https://news.ycombinator.com/item?id=33792974

"CNLohr is a well known youtuber among electronics enthusiasts; take a
look at his channel and you won't be disappointed.

https://www.youtube.com/@CNLohr/videos "

Keyboard Shortcuts every Command Line Hacker should know about GNU Readline 
https://www.masteringemacs.org/article/keyboard-shortcuts-every-command-line-hacker-should-know-about-gnu-readline

via https://news.ycombinator.com/item?id=33785631 154 comments, some
quite long

A Forth Apologia
http://holonforth.com/duncan.html

via https://news.ycombinator.com/item?id=33772435 42 comments, some quite long

"... mid-1980s ... Back then, it was one of the few ways to do
interactive development on really tiny machines. In that niche, it was
useful."

Paredit 25 released, after 8 years
https://news.ycombinator.com/item?id=33751935  72 comments, some quite long

"Paredit changed the way I write Common Lisp, and I personally
consider it a sort of killer feature of developer experience. ..."

etc, etc. Recommendations for videos and other sites that teach paredit.

Using nREPL as System Interface
https://yogthos.net/posts/2022-11-26-nREPL-system-interaction.html

That's Clojure.  

via https://news.ycombinator.com/item?id=33761877 23 comments, but long ones.


30 Nov 2022

Why your REPL experience sucks
https://srasu.srht.site/var-evaluation.html

Clojure

via https://news.ycombinator.com/item?id=33800175 55 comments, some very long.


 1 Dec 2022

https://github.com/ericchiang/pup

"pup is a command line tool for processing HTML. It reads from stdin,
prints to stdout, and allows the user to filter parts of the page
using CSS selectors. ...

Clean and indent ... Filter by tag ... Filter by id ... Filter by attribute..."

github says it's written in HTML and Go.

via https://news.ycombinator.com/item?id=33805732 36 comments, 
"Pup: Parsing HTML at the command line ... pup seems to be abandoned.  It's
surprising that there isn't a well supported standard tool to work
with html in the terminal ..."


 3 Dec 2022

Use Python and Terminal to Quickly Share Files Locally
https://medium.com/@aplaceofmind/use-python-and-terminal-to-quickly-share-files-locally-9e30775441e0

Both source and destination computers have to be connected to internet.

Source: Run the Python simple HTTP server in the source directory,
port 8000 or whatever - find your IP address-

Destination - open browser to source IP address, port 8000 or whatever,
browse, open files, Save As...

via https://news.ycombinator.com/item?id=33844300  but not comments

 
 6 Dec 2022

#Zepir Raspberry Pi Zero mini computer
https://hackaday.io/project/176706-zepir-raspberry-pi-zero-mini-computer

"on rpi GPIO is enough signals to direct button matrix + 2" IPS 320x240
display."

Tiny handheld coputer - smaller than a phone.  There is a
circuit card with an array of tiny buttons for keyboard and the tiny
display mounted on it - just one card about the size of a credit card,
maybe a bit bigger.  The RPi is a bit smaller, is mounted on the back
of this card.  Then two smalll cables go from the RPi, apparently to
power supply.   According to the writeup, it's running some flavor
of Linux.

via HN but no comments.

Nibbler 4 Bit CPU 
https://www.bigmessowires.com/nibbler/

"Nibbler is a 4 bit CPU built from standard 7400 series logic chips ...
Nibbler is built using wire-wrapping on a 5 x 4 inch (127 x 102 mm)
perfboard. The CPU contains 17 chips in total. ..."

Includes on board 16 x 2 alphanumeric display but no full keyboard,
just a few (looks like 4) buttons.

Architecture diagram and writeup looks interesting.

Has a microcoded instruction set.

via https://news.ycombinator.com/item?id=33860648

"dbcurtis: Well, he uses a '181 ALU chip -- which is very nice but you
have to scour the universe to find vintage logic parts like that any
more. ...

Lerc: The gigatron implements an 8-bit ALU in 10 chips. Four 74hc153
and one 74hc283 for each nibble. Quite a nice solution to avoid the
181 ...

omgtehlion: If you look closer, this CPU _is_ actually some roms
sandwiched between registers.

All the logic remaining are bus arbiters and IO access. You can
replace 74-181 with one more rom though, but it will not decrease chip
count..."

---

Comments on Mac OS 9 (macos9.app) which emulates OS 9 in the browser
https://news.ycombinator.com/item?id=33868197

"slowmotarget: It's a great reminder of how well MacOS 9 UI and UX
were designed, and how space efficient the whole OS was on screen.

mk_stjames: The whole system.. from the sizing of the borders and
titlebars to the font and the menu density to the icon sizing,
spacing, and design in general...

All feels more coherent than anything today. It feels like it was
sketched out by a small group of people and executed incredibly
well. Meanwhile things today look more disjointed like the product of
a lot of design-by-committee.
    
resters: I agree it was a high point for UI/UX logic. The filesystem
was part of the OS experience and it generally made sense with little
magic going on.

I have wondered in the years since whether the newer abstractions and
UI patterns we find in MacOS and Windows are actually necessary. These
days both OSes are trying to be tablet friendly, trying to discourage
user-installed/curated software, and trying to promote bundled cloud
services, so it's not even clear to me whether the MacOS 9
abstractions are really the correct ones anymore, as evidenced by the
many problems with cloud backed file explorer interfaces,
synchronization, etc. ...

bitwize:
> But then how do you easily navigate / launch apps? Dig thru your
  folder trees each time in Finder?

Back in the day, Finder used to remember whether folders were open on
the desktop or "put away". It was a direct, one-to-one mapping between
your spatial awareness of objects in the real world and the
representation of objects in the computer. Meaning that things were
left exactly where you put them on-screen, just like in the real world
and, hence, it was easy to find your applications because they will be
right where you left them.

But you don't need to launch applications, you just double-click on
documents. Mac OS remembered which program was associated with each
document -- not each document type or extension, each document. Each
file had distinct type and creator codes associated with it, so that a
JPEG created in Photoshop will be opened in Photoshop, and a JPEG
downloaded off the web might be opened in a browser, when
double-clicked.

Mac OS, pre-X, was quite simply the best UI ever designed. It took
advantage of pioneering research into human-computer interaction and
the underlying psychology of how humans relate to objects in a way
that nobody today -- not even Apple -- is doing. It is what all UIs
should aspire to be like, even today.

jwr: A desktop where windows remember their positions… so refreshing
in today's world, where every window and app has total amnesia and
launches in random places. ..."

But also, lots of comments from people who *didn't* like the old Mac GUI.


MIOS: IBM 5150 BIOS Replacement Project
http://www.mtmscientific.com/mios.html

Replaces BIOS/boot ROM for original IBM PC with custom program -
also tested on later, smaller 386 board.

 8 Dec 2022

Debugging Lisp: fix and resume a program from any point in stack (lisp-journey.gitlab.io)
https://news.ycombinator.com/item?id=33880909 

Lots of comments about experiences.  Some links about how to do something
similar about Python.

Didn't look at linked article.

 9 Dec 2022

How the 8086 processor's microcode engine works
https://www.righto.com/2022/11/how-8086-processors-microcode-engine.html

via https://news.ycombinator.com/item?id=33845941 81 comments, some quite long

12 Dec 2012

Reasoning about asyncio.Semaphore 
http://neopythonic.blogspot.com/2022/10/reasoning-about-asynciosemaphore.html

This is Guido's blog.

via https://news.ycombinator.com/item?id=33939950 with 1 comment 

"Guido van Rossum and Lex Fridman discuss this in a recent podcast[1].

1: https://www.youtube.com/watch?v=-DVyjdw4t9I&t=6905s "

Synthesizing optimal 8051 code
https://lab.whitequark.org/notes/2020-04-06/synthesizing-optimal-8051-code/

uses Racket and SMT solver.  via https://news.ycombinator.com/item?id=33934634

" __init: Check out angr [1], a symbolic execution engine, and claripy
[2], its frontend to SMT solvers like z3. Depending on your
background, I probably wouldn't describe angr as "for newbies," but
claripy is a very clean SMT interface!

[1] https://angr.io

[2] https://api.angr.io/claripy.html
	
c0742e9366: The (freely available) book "SAT/SMT by Example" [1] shows
how a lot of different problems can be tackled with an SMT solver. I
highly recommend it!

[1] https://sat-smt.codes/

A bare metal programming guide
https://github.com/cpq/bare-metal-programming-guide

"This guide is written for developers who wish to start programming
microcontrollers using GCC compiler and bare metal approach. We are
going to use a Nucleo-F429ZI development board with STM32F429
microcontroller (buy on Mouser).

In this guide, I'll show how to program a microcontroller using just a
compiler and a datasheet, nothing else. ..."

via https://news.ycombinator.com/item?id=33955107  3 comments


17 Dec 2022

The $8 linux computer (part 1.) 
http://thelittleengineerthatcould.blogspot.com/2022/12/the-8-linux-computer.html

Tiny microcontroller with 3 RiscV cores

via https://news.ycombinator.com/item?id=34024914 - 144 comments
on small microcontrollers, running Unix on small machines, running
Unix on phones, RPi etc. etc.


19 Dec 2022

Discrete logic IC CPU
https://imihajlov.tk/blog/posts/ccpu/

This is a new design - we haven't seen this before.

Other posts at this blog:

    Ethernet transceiver
    Discrete logic chips VGA video card
    Building a new discrete logic ALU
    Discrete logic IC CPU


27 Dec 2022

https://cgit.freedesktop.org/~dvdhrm/kmscon/plain/README

"Kmscon is a simple terminal emulator based on linux kernel mode
setting (KMS).  It is an attempt to replace the in-kernel VT
implementation with a userspace console. See kmscon(1) man-page for
usage information.

Website:
  http://www.freedesktop.org/wiki/Software/kmscon
..."

Lots about Linux terminal/console - all unknown to me.

via https://news.ycombinator.com/item?id=34153404 - 12 comments after 7 hours


https://github.com/enjoy-digital/litex

LiteX, Build your hardware easily, buy Enjoy-Digital

"The LiteX framework provides a convenient and efficient
infrastructure to create FPGA Cores/SoCs, to explore various digital
design architectures and create full FPGA based systems. ...

... have a look at Linux-on-LiteX-Vexriscv project and try running
Linux on your FPGA board!

LiteX's digital logic is currently described with Migen which does not
prevent users to create mixed language projects ..."

via https://news.ycombinator.com/item?id=34151299 no comments intitially

Numba: A High Performance Python Compiler
https://news.ycombinator.com/item?id=34149642

This comment reviews/compares PyPy, NumPy, Numba, Cython, "vectorization" etc.


29 Dec 2022

http://riskfive.com/

Web page for SkuTek.com, makes programmable scientific instruments for
nuclear physics based on FPGAs running Niklaus Wirth's Oberon 2013
version.  Last updated Jun 2020.  via HN I recall, but no comments.


https://squidgeefish.com/projects/rotary-keyboard/

Hardware/software project - adds a rotary telephone dialer to a keyboard,
alternative to keypad.   Not practical but illustrates some hw/sw techniques.

via https://news.ycombinator.com/item?id=34115747

---

https://cl5944.myportfolio.com/product-service-scripto

Scripto - "distraction-free" (that is, single application) word
processor built from RPi Zero and an e-ink touch screen in a laptop
form factor - with full-sized keyboard.  Hand-built prototype, not a
product.  Page has a photo of the prototype and some drawings showing 
the internals.  Maybe it's just a mockup?

via https://www.raspberrypi.com/news/scripto-distraction-free-writing-tool/

in turn via https://news.ycombinator.com/item?id=34157756


30 Dec 2022

https://github.com/g1776/termgame

All Python. Very little explanation in README.  via HN:

Termgame: Terminal-based, graphical game engine for Python (github.com/g1776)
https://news.ycombinator.com/item?id=34190791

More explanation here by the author, g1776

"Ever wanted to create graphical (vs text-based) games, directly in
the terminal? Look no further! Today I am releasing my open-source
game engine for creating graphical games right in the terminal. This
engine uses colored whitespace to act as pixels and can clear the
screen without flashing to allow realtime animation and user input. It
also has full support for physics and collision detection through
Pymunk! Some features include: ..."  (list follows)


 2 Jan 2023

What can I buy instead of an RPi for my nephew to learn to program on?
https://news.ycombinator.com/item?id=34197804

...

nonrandomstring: Here's a list of keywords to search for clones: Udoo
Bolt V3 Asus Tinker Onion Omega ClockworkPi Rock64 Odroid Beagle
Potato BananaPi Orange Pi NanoPi Atomic Pi LattePanda

Have a look here [1] for a neat table:

[1] 10 Best Raspberry Pi Alternatives Comparison: x86 And ARM SBCs For 2019
https://fossbytes.com/best-raspberry-pi-alternatives-x86-arm/

nonrandomstring: For my kids setup I actually went with a Pi Zero 3
(It's a RPi but without the USB or Ethernet ports. It's hot-glued to
the back of a monitor. She's 7 and all I need is for it to run a
python program that she practices typing on. They are in much better
supply than the full 4GB RPi-v4 boards. You need to break out the USB
with a powered hub and any connection must be by WiFi/Bluetooth, so
it's harder to set up (although I did it by using an "overlay" to make
the USB be a temporary TCP port to get set up).

...
	
sargstuff: (from search engine terms "raspberry pi alternatives") 

10 Cheap Raspberry Pi Alternatives (updated 2022)
https://linuxhint.com/cheap_raspberry_pi_alternatives/

...

 greggarious: I have concerns about the tracking present in Ubuntu [link] ...

 than3: "It is possible to remove parts of the system, but you have to
 know Linux fairly well to do it, its time consuming trial and
 error. ...  Canonical have designed it so it is not easy, and their
 team is actively trying to monetize this ...  They are having trouble
 monetizing their business model which is why its largely gone
 downhill since 18.04. I can't recommend any newer LTS for use with
 production. 

 I ended up building my own OS using LFS given the
 high number of shenanigans Canonical has done, and the
 untrustworthiness of any company in the monetization stage. ...

 You should be able to disable a service, and have it never load with
 a single command. Imagine my surprise when systemd masked services
 continued to load.

 There are at least 3-4 different areas of the system that will allow
 loading despite the user making choices to disable or stop certain
 services. Dbus is the primary offender, it loads on-demand with no
 centralized logging. ..."

 Details about systemd and dmesg follow ...

---

Building a Frankenstein 64 (celso.io)
https://celso.io/retrocomputing/2022/12/27/c64-from-scratch

via https://news.ycombinator.com/item?id=34211922

 djmips: Nice work and thanks for the writeup. Ted Fried has a variety
of microsequencer based CPU cores based on FPGA (and ARM) and I think
they are quite good.

https://microcorelabs.wordpress.com/2021/04/19/mcl64-worlds-fastest-commodore-64/

https://github.com/MicroCoreLabs/Projects 


 3 Jan 2022

Using RPI Pico for System & FPGA Integration 
https://www.adiuvoengineering.com/post/using-rpi-pico-for-system-fpga-integration

Uses RPi Pico to interface and test FPGAs

"The RPI Pico is very flexible in that it provides the developer with
a range of commonly used embedded systems interfaces such as SPI,
UART, GPIO, PWM and I2C.  The real benefit however is the Programmable
IO state machine (PSM), the PSM enables us to create both more complex
and more deterministic interfaces. These include protocols and coding
like Manchester(differential) Encoding, Generating Clocks, Regular
Pulses."  (more detailed explanations follow)

---

https://github.com/dthain/basekernel

"The Basekernel Operating System Kernel

Basekernel is a simple operating system kernel for research, teaching,
and fun.

Basekernel is not a complete operating system, but it is a starting
point for those who wish to study and develop new operating system
code. If you want to build something different than Windows, Linux, or
Multics, Basekernel may be a good place to try out your new ideas.

Basekernel can boot an Intel PC-compatible virtual machine in 32-bit
protected mode, with support for VESA framebuffer graphics, ATA hard
disks, ATAPI optical devices, process management, memory protection,
simple graphics, and basic filesystem. From there, it's your job to
write user-level programs and expand the system. ...

This project is led by Prof. Douglas Thain at the University of Notre Dame.
..."

also https://github.com/dthain/basekernel/wiki/Basekernel-Vision and
other pages at the wiki

 8 Jan 2023

https://github.com/vvaltchev/tilck

"Tilck is an educational monolithic x86 kernel designed to be
Linux-compatible at binary level. Project's small-scale and simple
design makes it the perfect playground for playing in kernel mode
while retaining the ability to compare how the very same usermode bits
run on the Linux kernel as well. ...

Tilck is fundamentally different from Linux as it does not aim to
target multi-user server nor desktop machines ...

The operating system has been regularly tested on physical hardware
from its inception by booting it with an USB stick ...

Tilck has a simple but full-featured (both soft and hard links, file
holes, memory mapping, etc.) *ramfs* implementation ...  read-only
support for FAT16 and *FAT32* ... there is no support for block
devices in Tilck yet, so everything is in-memory. ..."

... The effort to implement such a powerful console was driven by the
goal to make Vim work smoothly on Tilck ...  obeing able to run a
"beast" like Vim on a simple kernel like Tilck, is a great achievement
by itself because it shows that Tilck can run correctly programs
having a fair amount of complexity. ...

Looking at the FAQ we find that tilck is a one person project.

via https://news.ycombinator.com/item?id=34295165 with links to 
several alternatives.


13 Jan 2023

RISC-V SBC VisionFive 2 Officially Shipped (starfivetech.com)
https://news.ycombinator.com/item?id=34339752

Lots of comments/comparison on this and other RISC-V boards and
alternatives (various RPi etc.), what software runs on them (or
doesn't): Linux, BSD...

---

What happens when a CPU starts (tripod.com)
https://news.ycombinator.com/item?id=34333638

Lots of comments on the many processors in a modern computer and
the non-obvious ways they start up...

----

Directly Access Your Physical Memory (dev/mem) 
https://bakhi.github.io/devmem/

https://news.ycombinator.com/item?id=34369374


14 Jan 2023

Kristall Small-Internet Browser
https://kristall.random-projects.net/

"Kristall is a browser without support for css/js/wasm or graphical
websites. It can display user-styled documents in several formats,
including gemini, html, markdown, … provided by a server via gemini,
gopher, http, finger, …

Browser-like UI based on Qt5 ... Fully customizable document styling
... Document outlines (in panel on L side), TLS with TOFU and CA
support, First-class client certificate support ..."

https://github.com/MasterQ32/kristall

via https://news.ycombinator.com/item?id=34350436

"hooby: As someone who has come to prefer viewing web-pages in
reader-mode rather than their default-layouts, I really love the idea
of having a leaner, more minimalist web. Just pure content without all
the bloat...

__void: kristall is along with geminaut and lagrange, the perfect triptych
for wandering the small web! ..."

It might be interesting to see how they extract the useful text from
all the junk.  It must do something similar to readability.


15 Jan 2023

Recreating classic games with a bare MCU
https://lcamtuf.substack.com/p/recreating-classic-games-with-a-bare

Makes 3 different handheld games each with just a circuit board with a 
MCU directly driving a tiny display.   Just enough details about hardware
on each.

via https://news.ycombinator.com/item?id=34390621 but no comments yet (1 hour)


16 Jan 2023

https://github.com/javaplus/PicoProjects

"Pico Projects

This is our amazing introduction to basic electronics and working with
the Raspberry Pi Pico microcontroller. These lessons will help you
bring code to life and release your inner mad scientist!"

For RP2040 microcontroller.  Uses MicroPython.

---

Trace your Python process line by line with minimal overhead
(github.com/furkanonder)
https://news.ycombinator.com/item?id=34393271

Links to other Python tracers also.


17 Jan 2023

Keyboard as a Python Code
https://hackaday.io/project/188907-keyboard-as-a-python-code

"
Description
Python is one of the best programming languages.
It can do everything.

So I have designed the entire keyboard, including the PCB, case, and
firmware, using only Python.  No need to use Kicad and Fusion360.

It is explained on Jupyter Notebook(Google Colaboratory or binder),
and you can customize it to make your own keyboard.

    Design not only the firmware, but also the schematic (netlist),
    PCB, and case all in Python.

    Mainly introduce the design flow (please read the documentation
    and source code for the detailed)

    The code will be explained in a runnable jupyter notebook (google
    colaboratory) environment. See Build Instructions.

    There are also libraries for drawing schematics, wiring PCBs,
    creating 3D models, and even running microcontrollers in Python.

    The libraries to be used are as follows

Circuit	skidl
PCB	pcbflow(my folk)
Case	cadquery
Firmware	KMK Firmware, circuitpython

Components

    1 × Python environment
    1 × XIAO RP2040
    10 × Cherry MX style switch + keycap
    10 × SMD Diode
    1 × OLED module 

via https://news.ycombinator.com/item?id=34420722 - no comments after 5 hours

19 Jan 2023

SCAMP Forth processor
https://udamonic.com/what-is-a-scamp.html

"Scamp is based on the Microchip PIC24F64GB202 microcontroller
(datasheet). It has a useful mix of peripherals (including a USB
interface). It has 64K of flash and 8K of RAM, a good amount for
running Forth. This may not seem much, but FlashForth requires on the
order of 20K flash, and only 2K of RAM. It is a very efficient
programming environment. So, the PIC24F64GB202 has plenty of spare
memory for your application code and variables. You will be surprised
just how far you can get with 8K of RAM! ..."

It's the MCU mounted on a small circuit board.  Pictures show one
edge of the circuit board plugged into a solderless breadboard
with another small circuit board also plugged in, and cables plugged
directly into both boards (not via the breadboard)

via https://news.ycombinator.com/item?id=34436049, 19 comments after 15 hours


23 Jan 2023

NomadBSD: Persistent USB flash drive based desktop OS (nomadbsd.org)
https://news.ycombinator.com/item?id=34471899

How to boot but also save files on a USB stick.  Apparently that's not
so easy.

   
Ultibo – Bare-Metal Pascal for Raspberry Pi (ultibo.org)
https://news.ycombinator.com/item?id=34445367

Already in precursors.md a few years ago, with link to earlier HN page,
but this is a recent sighting.


https://github.com/TheMozg/awk-raycaster

via
	
A first person shooter in 571 lines of GNU Awk (2016) (github.com/themozg)
https://news.ycombinator.com/item?id=34442528  106 comments with lots of links

Entirely done in terminal graphics!  See github page for screenshot - it's
surprisingly convincing.   And the code looks very nicely organized.
An example of a small, well-written, capable program.

"oweiler: I am shocked how readable the code is.  ..."

"carapace: This was linked from "The State of the Awk (2020)" on the
front page earlier today:
https://news.ycombinator.com/item?id=34438560

See also "AWK As A Major Systems Programming Language — Revisited"
also linked from that article: http://www.skeeve.com/awk-sys-prog.html"

also here, in 2016: https://news.ycombinator.com/item?id=10896901

" __jal on Jan 14, 2016: General greatness aside, I have to say that's
the best quality awk code I've seen. ..."

"TheMozg (the author) on Jan 13, 2016: There is a great tutorial (it's
actually a series of them) which I used:
http://lodev.org/cgtutor/raycasting.html It's old and C++ but explains
raycasting very well.

And there is also a similar project in just 265 JS lines:
http://www.playfuljs.com/a-first-person-engine-in-265-lines/"

"emmelaich on Jan 14, 2016: I was wondering how you'd read a key in
raw mode in awk. The answer, I found with a mix of horror and
admiration is 3 forks. Two stty and one bash (presuming read and echo
are builtins)

i336_ on Jan 15, 2016: Now it's been updated to use dd, and can run
with /bin/sh.  It's sad that languages rise and fall by the feature
base present in their standard libraries."

     
DiscoBSD: 2.11BSD-Based OS for STM32 and PIC32 Microcontrollers (github.com/chettrick)
https://news.ycombinator.com/item?id=34446251

"somat: I have to admit I am not sure why you need a 16 bit os for a
32 bit processer like the pic32. Best I can come up with is that
because 16 bit is such a constrained memory space it runs well on
small microcontrollers.

caned: The latter, but also 2.11bsd does not have virtual memory, and
thus does not require an MMU. It was written with the segmentation
features of a PDP-11 in mind, which so happen to adapt to PIC32 as it
has kernel/user separation and memory protection via a kseg/useg
segmentation (as opposed to a TLB with individual page protections).

actionfromafar: It's not 16-bit as such. But since it's small enough
to fit in 16-bit, it's small enough to fit on the small memory
available on pic32.  It's like what if you have an 80386. It can run
Linux (which is 32 bit). But your 80386 only has 1 megabyte of RAM. ..."

26 Jan 2023

PyCharm plugin for Reloadium – Hot Reloading and Profiling for Python
https://plugins.jetbrains.com/plugin/18509-reloadium--hot-reloading--profiling-for-python

---

Two articles on personal projects:

I Am The Only User 
https://blubsblog.bearblog.dev/i-am-the-only-user/

via https://news.ycombinator.com/item?id=34520537  which recommends

An app can be a home-cooked meal
https://www.robinsloan.com/notes/home-cooked-app/  which had 

https://news.ycombinator.com/item?id=32800518 5 months ago, 51 comments
https://news.ycombinator.com/item?id=22332629 3 years ago, 130 comments

This is by the author of the novel, 'Mr Penumbra's 24 hour book store'!


27 Jan 2023

How a CPU works: Bare metal C on my RISC-V toy CPU 
https://florian.noeding.com/posts/risc-v-toy-cpu/cpu-from-scratch/

Another one of these projects. This one has an especially nice writeup
with good organization, clear explanations, and lots of code samples
for each step.  At the end, links to many references.

"Goals
    implement a CPU in a hardware description language (HDL),
    code must be synthesizable (except memory),
    simulate it,
    and run a bare metal C program on it.

In a future iteration I plan to run my project on a real FPGA"

Also an emulator:

"Writing an emulator, i.e. a program that can execute the instructions
of a CPU, is an excellent stepping stone towards a hardware
implementation. ...

The emulator is implemented in C++ with a C-style interface in a
shared library. This makes it easy to hook it into Python via
cffi. This saved me quite a bit of time for file system and user
interactions, which were all done in Python. ..."

This is an interesting technique possibly worth studying.

"My CPU only supports the RISC-V 32 bit integer instruction set, but my
host system is running on x86-64. So I needed a cross compiler and
used the Ubuntu package gcc-riscv64-unknown-elf. ...


Then I could compile my code using the following command:

riscv64-unknown-elf-gcc -march=rv32i -mabi=ilp32 \
    -nostdlib -ffreestanding -Tprograms/memory_map.ld \
    -o life.rv32.elf life.c

Let’s take this apart:

    execute the RISC-V cross-compiler
    set it’s architecture to rv32i, which is RISC-V 32bit integer instruction set
    define the application binary interface, i.e. conventions how to emit assembly. This makes it so that integers, longs and pointers are 32 bit
        these three are needed to emit code compatible with my emulator and later CPU
    compile without a standard library
        Standard libraries like the system libc assume operating system support, but my toy CPU will be running bare metal. So we have to switch that off. This means we won’t have access to malloc, printf, puts etc. Instead we’ll need to implement this ourselves, if we want to use it. This means we have no startup code either.
    compile freestanding, that is, do not assume presence of a operating system or library and switch of libc specific optimizations and defaults
        for example we won’t have a main function, which is otherwise required
    use a memory map
        we need to tell the compiler and linker where instructions and global variables will be placed in memory. We do not have a loader to do this at application startup

With the emulator completed I now have a working reference system to
debug my CPU. And so I started working implementing it. ...

Hardware is designed with special programming languages, called
hardware description languages (HDL). The most common ones are Verilog
and VHDL. For my project I decided to use Amaranth HDL, ..."

via https://news.ycombinator.com/item?id=34533752 37 comments, some from author

"carry_bit: Nice that you support multi-cycle memory instead of
essentially using a big register file like https://nandgame.com/ uses. ...
	
codepoet (this is the author): The idea with multi-cycle memory was to
create a special challenge for myself. Also I thought about using the
same technique would be useful if I later on wanted to have mul / div
in hardware, which would take a couple of cycles too."

codepoet: I'll think about sharing the code. Large code parts - while
working - did not pass my quality bar, since I did not have enough
time to clean and refactor while learning. But maybe that's fine. Hmm.

bogomipz: >"But maybe that's fine."  Oh I think it's more than fine :)

codepoet: You are right :)  Here's the repo: 

https://github.com/fnoeding/fpga-experiments "


28 Jan 2023

Ask HN: Math books that made you significantly better at math?
https://news.ycombinator.com/item?id=34439828

317 comments, some very long.

The Point of the Banach-Tarski Theorem (solipsys.co.uk)
https://news.ycombinator.com/item?id=34482226   104 comments
					
An intutive counterexample to the axiom of choice (rongarret.info)
https://news.ycombinator.com/item?id=34487944  253 comments

29 Jan 2023

Low-level is easy (2008)
http://yosefk.com/blog/low-level-is-easy.html


31 Jan 2023

Ctrl-C: Why Programmers Can’t "Reset" Programs With Ctrl-C, but Used
to Be Able To, and Why They Should Be Able to Again
https://kevinlawler.com/ctrl-c

PDP 11/70 emulator
https://skn.noip.me/pdp11/pdp11.html

with front panel switches and lights.  several boot demos.  links to videos.

via comment in https://news.ycombinator.com/item?id=34565202

Ask HN: Which book would you recommend for learning Python in detail?
https://news.ycombinator.com/item?id=34569425

various recommendations, also this:
 	
"CraigJPerry: I wouldn’t recommend a book, instead i’d give you a
couple of challenges, each of these is <1-2 hours in isolation:

    1. Explain to me like i’m 5, what exactly __slots__ is for? Write
    me some demo code to illustrate - the reason i’d set this
    challenge is because you’d come out the other side knowing how
    objects work and how it’s more or less dicts all the way down (to
    be clear, slots is an exception to the dicts all the way down view
    which is why i think its a good example to get stuck into)

    2. Write me some demo code that explains the purpose of locals()

    3. Teach me how to use dis.dis(), explain to me what each possible
    opcode means

    4. Explain to me how to use pdb, include conveniences like
    breakpoint() in your explanation

    5. Show me 3x working examples of calling a c function from
    python. Explain the different approaches you took

If you can nail these 5 questions, I’d feel pretty confident betting
on you knowing enough python to be able to take on something really
advanced like modifying the supported grammar of jinja for example.

emmelaich: These seem to be too deep in the internals for most Python
programmers.

CraigJPerry again: You definitely don't need this stuff to be a solid,
competent Python developer.  I was suggesting these topics because i
feel like understanding these were what unlocked the ability for me to
handle new things - things new to me, not necessarily new to python -
and be able to intuit what they meant or were doing behind the
scenes. This knowledge made it so that i stopped feeling like "i don't
know exactly how that works" when i saw new things in Python."


 1 Feb 2023

Python Is Not Java
https://dirtsimple.org/2004/12/python-is-not-java.html

It's from 2004!  Almost 20 years old!

See in this HN comment today: https://news.ycombinator.com/item?id=34615749


 5 Feb 2023

How to Paint Like Hayao Miyazaki
https://animationobsessive.substack.com/p/how-to-paint-like-hayao-miyazaki

via https://news.ycombinator.com/item?id=34640833

munificent commenting on this from original article:

> What Miyazaki makes clear throughout the guide is that he is,
  proudly, a cheapskate who isn’t fussy about tools. He looks for
  reliability and convenience. His pitch for Holbein paints is just
  that they’re “reasonably priced and a little goes a long way.”

> In his notes, Miyazaki purposely leans into sounding old and stuck
  in his ways. He rants about how he’s painted with nothing else for
  40 years, how easy and cost-effective his tools are — and then he
  undermines himself by suggesting that, really, this is all he knows
  how to do.

munificent writes:

"There's a deeper truth which is easy to overlook here.

If you want to get good at some creative pursuit, you have to put a
lot of time, attention, and decision making effort into the skill. All
of those are finite resources.

It's really easy to squander an unbelievable amount of time and effort
on *choosing gear*. Doing that is time *not* spent mastering the
craft. You might get really good at picking shit out, but you won't
get good at painting, or poetry, or song-writing, or whatever.

This is why so many successful artists seem stuck in their ways or
dismissive of gear, or, conversely, fetishize certain gear. Those are
all mental techniques to minimize the effort they spend on picking
stuff so that they can focus that effort on creating."


Oblique Strategies: Prompts for Programmers
https://kevinlawler.com/prompts

"Brian Eno created a collection of strategies to help artists break
creative block. We can do something similar for programmers stuck on
problems. ...

*If you lack motivation, find the most interesting thing in the
project, start on that, and branch from there.*

*Work append-only.* Don't worry about mistakes. Don't worry about
revising. Later on is when you can go back and edit.

Revisions keep you covering the same ground, but working append-only
keeps you focused on your destination. Re-review causes you to
internalize work. You don't want to internalize prematurely because
the work might be wrong. You want to look at the work with fresh eyes
later, and you can't do that if it's memorized.

*Run through the thornbushes.* If many small, nagging, potentially
interlocked, hard-to-resolve details are preventing forward progress,
put those thoughts aside and just start. Get which details you
can. Then go back and untangle everything.

*Change your mind.* If something seems wrong, maybe it is. Chuck it and
start over. ..."

*Mark it WONTFIX.* The best solution to any problem is to avoid having
to solve it in the first place. This is one of your most important
tools. All the work you cut is energy saved. Pure gain. If you can't
immediately think of a reason not to do something, postpone work on it
as long as you can while you try to find a reason. Is it possible to
just drop the task? Will your world explode? If not, you probably
can. A lot of work is wasted.  ...

15 Feb 2023

Somebody has built a standalone MicroPython-based OS for ESP32 !

Tulip Creative Computer
https://notes.variogram.com/2023/02/14/tulip/

https://github.com/bwhitman/tulipcc

via https://news.ycombinator.com/item?id=34797041 just 1 comment - my own!

from the variogram page:

The “OS” of the computer itself is Python. It’s not running something else
with a shell on top. You write and execute programs on the device itself. You
have access to the entire hardware ... Under the hood, Tulip is a
(complicated!) “port” of the great MicroPython project running on the
Espressif ESP32-S3 – a cheap (and in stock!) MCU with 8 or 32MB flash storage
and 8MB of SPI-attached RAM. ... Tulip comes with a built in text editor, and
soon a music editor. ...

(this text needs to be wrapped - this excerpt also appears on HN page)

Clone github repo to our Mac:

Jonathans-MBP:code jon$ pwd
/Users/jon/piety.downloads-etc/code
Jonathans-MBP:code jon$ git clone https://github.com/bwhitman/tulipcc
Cloning into 'tulipcc'...
remote: Enumerating objects: 32776, done.
remote: Counting objects: 100% (9830/9830), done.
remote: Compressing objects: 100% (5345/5345), done.
remote: Total 32776 (delta 3944), reused 9712 (delta 3826), pack-reused 22946
Receiving objects: 100% (32776/32776), 200.32 MiB | 7.27 MiB/s, done.
Resolving deltas: 100% (9240/9240), done.
Checking connectivity... done.
Checking out files: 100% (24456/24456), done.

Wow!  200 MB, almost 25,000 files!  Does it include all of Micro Python?

The Tulip Desktop runs on Macs and simulates the Tulip SW running on its
hardware - but it requires Mac OS 10.15 Catalina!  I only have 10.11 El Cap.!
This is the first program I would like to install, but can't due to old Mac.
Bah!

I am tempted to try installing it anyway - maybe he just hasn't tried it on 
10.11....

Jonathans-MBP:~ jon$ unzip Tulip.CC.4.zip 
Archive:  Tulip.CC.4.zip
   creating: Tulip CC.app/
   creating: Tulip CC.app/Contents/
  inflating: Tulip CC.app/Contents/CodeResources  
   creating: Tulip CC.app/Contents/_CodeSignature/
  inflating: Tulip CC.app/Contents/_CodeSignature/CodeResources  
... much more ..

Jonathans-MBP:~ jon$ open Tulip\ CC.app/
LSOpenURLsWithRole() failed with error -10825 for the file /Users/jon/Tulip CC.app.

Indeed, it doesn't work.

Open it from Finder.  Popup appears:

You can't use this verions of the application "Tulip CC" with this version 
of OS X.  You have OS X 10.11.16.  The application requires OS X 10.15 or later.
So that's that.

We investigated Mac OS upgrades years ago - see  notes/mbp-installs.txt 
on 19 Nov 2020, L5785:
"10.14 is Mojave - https://support.apple.com/kb/SP777?locale=en_US
Hardware requirements: MacBook Pro (Mid 2012 or newer)"

So 10.13 is the highest we could go on this Early 2011 Macbook Pro.
But that OS version was no longer offered at the App Store even then.

We could try building it ourselves, but build instructions say Mac OS 10.15
or higher - I'm sure that's right.  So we're out of luck.

Well, we could skip the Tulip Desktop and try to build our own actual Tulip.
Looks challenging.  The breadboard version looks like it could be very
flakey.  They also have two circuit board versions, you can buy the board but
you have to put on the components yourself - there is a slick SMT board - looks
tough to build - and a simpler through-hole-solder version which also looks
tough.
Too bad about the desktop.  I would really like to try running our
existing Piety - both versions - on it.
Is it worth buying a new Mac *just to try it* ?

16 Feb 2023

I think the next step with Tulip is just read the build script and see
if we can find where the OS dependency is.   What we really want to do 
is try out the version of MicroPython it uses - can it run our existing Piety
code, could we do our live coding in it?  So maybe we could hack a build 
script that builds their Python REPL etc, never mind the graphics and sound.
BUT the screen shot shows their editor with syntax coloring, so even that
probably depends on the graphics.

9 Feb 2023

https://github.com/blueloveTH/pocketpy

"PocketPy is a lightweight(~5000 LOC) Python interpreter for game engines.

It is extremely easy to embed. Including a compiler, optimizer and
bytecode virtual machine. All of them are available in a single header
file pocketpy.h, without external dependencies.

Please see https://pocketpy.dev for details ..."

via https://news.ycombinator.com/item?id=34702386

versteegen: I've been waiting a long time for MicroPython to become
usable as an embedded script interpreter -- it can't be run
asynchronously [1] so scripts can't do waits (aside from that,
MicroPython is amazingly full-featured). CPython can't either, which
is why the Stackless Python fork was created, which is used in games
such as EVE Online. But that's far too heavy for my tastes.

So I was hoping that PocketPy could do that, but after looking around
I can't find any suggestion it's possible, and the API looks very
sparse ...

[1] https://github.com/micropython/micropython/issues/3619

sitkack: MicroPython is 286kloc of C.

askvictor: ... Also, micropython, in its hundreds of thousands of
lines of code, supports quite a number of microcontrollers and boards;
I suspect the core language is smaller, or counting lines used for a
single build target would drop it considerably.

tredre3: You are correct, the micropython vm/interpreter + the unix
target (one of the simplest) combined are ~50k lines of C.

Note that to run correctly micropython also needs its python stdlib
which is about 15k lines of Python."

Ask HN: I just want to have fun programming again
https://news.ycombinator.com/item?id=34713308

NortySpock: "Your long list of desired features and properties,
especially cross compatibility, is sucking all the fun out of the
project. ...

Make a list of non-goals for your project: e.g. it will not be
cross-compatible, it will not be multi-threaded, it will not support
multiple users, it will not be scalable, it will not support multiple
resolutions, etc. Try to make it so dang simple you think you can
knock it out in 2 days. (It might still take a month) ...

And then write your project, preferably all in one big ugly file that
does not meet anyone's definition of organization or documentation or
quality.

That's when it's fun, when the scope is small and understandable, and
there is no expectation of having to fix anyone else's bug reports but
your own."

rjmill: "Write it as a CLI first, if you can. Python with rich (for
output formatting) is a great choice. ...
I had an idea of what I wanted to do. I had some prototype code
written up as a web app in JS. ...
But then I realized it was too much pressure. I wanted this for myself
more than anything else. So I sat down and hammered it out in python
in an afternoon. ...
And the best part: when I tell certain people about what I built, they
don't care that it's a janky CLI. They're just happy they don't have
to build/commission it themselves.
Embrace jankiness and get something working. You'll have fun."


12 Feb 2023

https://textual.textualize.io/blog/2023/02/11/the-heisenbug-lurking-in-your-async-code/

via https://news.ycombinator.com/item?id=34754276, about asynch Python.

17 Feb 2023

https://sr.ht/~lioploum/offpunk/

OFFPUNK

A command-line and offline-first smolnet browser/feed reader for Gemini,
Gopher, Spartan and Web by Ploum.

The goal of Offpunk is to be able to synchronise your content once (a day, a
week, a month) and then browse/organise it while staying disconnected.

Offpunk is a single python file. Installation is optional, you can simply
download and run "./offpunk.py" or "python3 offpunk.py" in a terminal.

You use the go command to visit a URL, e.g. go gemini.circumlunar.space.
(gemini:// is assumed if no protocol is specified. Supported protocols are
gemini, gopher, finger, http, https, mailto, spartan and file).

Offpunk has no "strict dependencies", i.e. it should run and work without
anything else beyond the Python standard library and the "less" pager.
However, it will "opportunistically import" a few other libraries if they are
available to offer an improved experience or some other features. ..."

Jonathans-MBP:code jon$ git clone https://git.sr.ht/~lioploum/offpunk
fatal: destination path 'offpunk' already exists and is not an empty directory.
Jonathans-MBP:code jon$ ls offpunk
CHANGELOGrequirements.txt
LICENSEscreenshot_offpunk1.png
README.mdscreenshot_offpunk2.png
debian/setup.py*
doc/ubuntu_dependencies.txt
offpunk.py*
Jonathans-MBP:code jon$ ls -ld offpunk
drwxr-xr-x@ 14 jon  staff  476 Sep 29 05:49 offpunk/

SO I got it last Fall and forgot about it!

See also https://news.ycombinator.com/item?id=30669799, 11 months ago, 17 comments

20 Feb 2023

https://sr.ht/~vdupras/duskos/

"A whole OS built from source on boot

One thing that makes Dusk OS special is that it boots from a very tiny core
(1000 lines of i386 assembly). From this tiny core, on boot, it builds its way
up to a system that has a functional C compiler, which then allows it to
bootstrap itself some more. ,, Stop at end of buffer if we reach it.  Set dot
to last line p.

This peculiarity of Dusk OS has interesting properties. The nicest one, in my
humble opinion, is that this allows us to sidestep the entire problems of
binary compatibility and relocation and only deal with source compatibility.
So, no ELF, no binutils, only code that is designed to run from where it was
generated in the first place. This is so much simpler!

https://news.ycombinator.com/item?id=34876256 - link to vimeo Dusk OS demo
Demos his interactive C compiler, his ged vi-like editor.
"Did I mention the C compiler is less than 200 lines?  Did I mention the
editor is less than 500 lines?"

https://news.ycombinator.com/item?id=34865421

comments on  	
	Show HN: Replbuilder, quickly build a Python REPL CLI prompt 

 	
BiteCode_dev 27 minutes ago | unvote | next [–]

As a side note, if you want an efficient python REPL and you don't need custom
commands like offered in the project above, you can do the following:

- install ipython and rich

- set PYTHONSTARTUP to auto load whatever you like on start up

- call rich.pretty.install() in your startup script for a boosted repr()

- set %autocall to 1 to benefit from optional parentheses

- use ! to call shell commands

This covers most people needs for a non-custom REPL.

Still no reload() though, but python really doesn't like that. 

We could use ipython -- or any shell -- as an alterative to standard CPython
repl for shell for sked.

https://news.ycombinator.com/item?id=34918782

Books in your terminal
 	
extr0pian 2 minutes ago | unvote | parent | next [–]
I occasionally use epr to read epubs in a terminal. Works pretty well.
https://github.com/wustho/epr

	
farconics 1 minute ago | unvote | parent | prev [–]
I’ve been using epy/epr to read novels, and I think it’s great.
https://github.com/wustho/epy 

24 Feb 2023

Many more comments this morning in the HN Books in your terminal page:

regarding epub readers,

 	
gandalfff 10 hours ago | parent | prev | next [–]

I've used bk https://github.com/aeosynth/bk

also:

	
	
synergy20 11 hours ago | prev | next [–]

if you use kitty,you can read pdf in the terminal via termpdf.py

There's a termpdf.py!

	
	
esrh 11 hours ago | parent | prev | next [–]

I use console emacs and nov.el (https://depp.brause.cc/nov.el/) for this. You
can then use emacs features like keyboard navigation and dictionaries.

 	
sussexby 4 hours ago | unvote | parent | next [–]

There's a beauty in people finding and fixing these seemingly tiny gaps in
their daily lives. It reeks of the serenity in someone's world where 1) this
is a problem they're willing to invest time in, 2) they have the time to
resolve the problem, and 3) they seem to really enjoy it.

It's in my mind akin to the master craftsperson perfecting their work over the
years.

True vocation. 

	
	
rizky05 12 hours ago | prev [–]

OP is the only user. I like that mindset.

Another comment links to:
https://github.com/phiresky/ripgrep-all

"rga is a line-oriented search tool that allows you to look for a regex in a multitude of file types. rga wraps the awesome ripgrep and enables it to search in pdf, docx, sqlite, jpg, movie subtitles (mkv, mp4), etc."

Blog about it:

https://phiresky.github.io/blog/2019/rga--ripgrep-for-zip-targz-docx-odt-epub-jpg/

https://jaycarlson.net/embedded-linux/


" So you want to build an embedded Linux system?
A primer on how embedded Linux systems are developed, plus an exploration of
the hardware and software ecosystems of ten different commonly-available CPUs"

Long, lots of details.

nlnet Foundation: funds open source projects, European

Current projects
https://nlnet.nl/project/current.html

Thematic index
https://nlnet.nl/thema/index.html

via  	
	Marginalia Search has received an NLNet grant
https://memex.marginalia.nu/log/74-marginalia-2-years.gmi

that via https://news.ycombinator.com/item?id=34945541

https://tilde.news/ - HN-like but for the tildeverse of unix console systems

27 Feb 2023

DOS conio
https://opensource.com/article/21/9/programming-dos-conio

The DOS analog to curses, for programming TUIs. 

via https://news.ycombinator.com/item?id=34949015, DOS CPU simulator

Turning a typewriter into a linux terminal
https://habr.com/en/post/692488/

Brother portable with Arduino to scan keys then RPi or something for CPU.

via https://news.ycombinator.com/item?id=34892792, links to similar projects.

https://ploum.be/2022-01-11-offpunk-web.html

Implementing a web browser in a weekend (and in Offpunk)


"The http part was easy thanks to the python-requests library. But displaying
HTML is still a nightmare.

First of all, I decided to sanitise any HTML page through python-readability.
I don’t plan to implement a full browser, just to be able to read articles.
Readability gives me a somewhat saner HTML that I can parse afterward with
BeautifulSoup ..."

elsewhere he says offpunk is a single Python file.

https://ploum.be/2022-04-02-offpunk13.html

"Why I’m doing Offpunk

Browsing through the command line protects me from sensory overload. It makes
me less angry, less anxious. It also makes me a better reader. Do the
experience : construct a small book where each page is of a completely
different format from the others. Different fonts, different colours, pictures
mixed with it. And print exactly the same content in a boring black and white.
Which one is the more readable? Which one will allow you to get the
information of the text? ...

I try to make a command line browser that is relatively easy and useful. At
first, it was only a small tool for myself but what if people trying it
realize they could handle 20%, 50% or 80% of their web browsing in the command
line instead of the 1% they usually did? % of their web browsing in the
command line instead


What’s next?

I’m proud that Offpunk is a single python file with quite minimal dependencies (in fact, it works as a Gemini/Gopher client without any dependency at all). But let’s face it: this file is a huge spaghetti blob. A fairly-well-structured spaghetti but still spaghetti. As I’m fond of the UNIX philosophy, I plan to rewrite the whole stuff as a set of 3 or 4 independent tools that would be combined to create Offpunk. That would allow other projects to use Offpunk back end without the front end (think an offline-first graphical browser) and, if needed, to rewrite some parts using something else than Python. ..."

28 Feb 2023

https://drewdevault.com/2018/09/04/Conservative-web-development.html

 Conservative web development
September 4, 2018 on Drew DeVault's blog

Today I turned off my ad blocker, enabled JavaScript, opened my network
monitor, and clicked the first link on Hacker News - a New York Times article.
It started by downloading a megabyte of data as it rendered the page over the
course of eight full seconds. The page opens with an advertisement 281 pixels
tall, placed before even the title of the article. As I scrolled down, more
and more requests were made, downloading a total of 2.8 MB of data with 748
HTTP requests. An article was weaved between a grand total of 1419 vertical
pixels of ad space, greater than the vertical resolution of my display.
Another 153-pixel ad is shown at the bottom, after the article. Four of the
ads were identical. ...

The text of the article is a total of 9037 bytes, including the title, author,
and date. I downloaded the images relevant to the article, including the
1477x10821 title image. Before I ran them through an optimizer, they weighed
260 KB; after, 236 KB (using only lossless optimizations). 8% of the total
download was dedicated to the content. 5 discrete external companies were
informed of my visit to the page and given the opportunity to run artibrary
JavaScript on it. ...

https://drewdevault.com/2019/11/26/Avoid-traumatic-changes.html

 Software developers should avoid traumatic changes
November 26, 2019 on Drew DeVault's blog 

The weaker kind of traumatic change is more subtle, and less talked about.
It’s a slow burn, and it takes a long time for its issues to manifest.
Consider the case of asyncio: clearly it’s an improvement for Python, whose
previous attempts at concurrency have fallen completely flat. The introduction
of async/await and coroutines throughout the software ecosystem is something
I’m generally very pleased about. You’ll see me reach for threads to solve a
problem when hell freezes over, and no earlier, so I’m quite fond of first-
class coroutines.

Unfortunately, this has a chilling effect on existing Python code. The
introduction of asyncio has made large amounts of code idiomatically obsolete.
Requests, the darling of the Python world, is effectively useless in a
theoretical idiomatic post-asyncio world. The same is true of Flask,
SQLAlchemy, and many, many other projects. Just about anything that does I/O
is unidiomatic now.

Since nothing has actually broken with this change, the effects are more
subtle than with strong traumatic changes. The effect of asyncio has been to
hasten the onset of code rot. Almost all of SourceHut’s code pre-dates
asyncio, for example, and I’m starting to feel the limitations of the pre-
asyncio model. The opportunity to solve this problem by rewriting with asyncio
in mind, however, also presents me a chance to rewrite in anything else, and
reevaluate my choice of Python for the project entirely. ...

https://www.python-httpx.org/

"The new requests for Python" (headline of HN link, not this article)

A next-generation HTTP client for Python.

HTTPX is a fully featured HTTP client for Python 3, which provides sync and
async APIs, and support for both HTTP/1.1 and HTTP/2.
...
$ pip install httpx[brotli]

HTTPX requires Python 3.7+

 2 Mar 2023

https://github.com/ncrawforth/VT2040

VT2040

Portable serial terminal, based on an RP2040 dev board, with a Gherkin
keyboard and an ILI9488 480x320 LCD screen.

Github page says language is C but photo shows MicroPython banner and prompt.

" It has a socket for an ESP-01 - the one in the pictures has MicroPython
installed. "

So that is the host the terminal is connected to!  Right on the same board!

https://bradsprojects.com/digirule2/


"he Digirule 2U is basically an 8-bit programmable computer from the 1970’s,
built into a 20cm Ruler. You can program binary code directly into the
Digirule 2U using the push buttons and LED’s or you can write programs in
assembly language on your computer then download them to the Digirule 2U via
USB."

via https://news.ycombinator.com/item?id=34974113


I have a Digirule and a Digirule 2a. They scratch many itches...neat gadget
goblin, vintage computing goblin, buttons and flashy lights goblin, fidget
goblin.

These are Altair 8800s for those who are curious but not curiou enough to
click. Have LED outputs push button inputs and a usb connection to load/unload
backup programs.

 3 Mar 2023

https://www.cnx-software.com/2021/02/23/fuzix-unix-like-operating-system-ported-to-raspberry-pi-pico-and-esp8266/

"The Raspberry Pi Pico port comes with many benefits like a well-structured
Unix filesystem with its compatibility for SD cards through the SPI interface.
Hence, supporting the Fuzix operating system. The full set of Fuzix binaries
is available through a serial console to UART0. ..."

via https://news.ycombinator.com/item?id=34981059 with links to dev boards for
other 8 bit processors.

 4 Mar 2023

https://ralsina.me/weblog/posts/so-i-built-a-laptop.html

So I built a ... laptop?

 the ob­vi­ous thing was to use a SBC, such as a Rasp­ber­ry Pi.

OTOH I start­ed the project in the mid­dle of the pan­dem­ic short­age of
SBC­s, which is still sort of on­go­ing, so those were hard to get, and
ex­pen­sive.

So I turned to a lesser-­known brand which had the mag­i­cal thing: stock.

So, the SOC is a Radxa Ze­ro, a tiny SBC in the same form fac­tor as a
Rasp­ber­ry Pi Ze­ro, ex­cept it's ridicu­lous­ly more pow­er­ful:

    Quad core
    4GB of RAM
    32GB eMMC (no need for SD card)
    USB 3.0
    Mi­cro HD­MI port ca­pa­ble of 4k 60Hz

This is rough­ly 70% of the pow­er of a Rasp­ber­ry Pi 4, in a much small­er pack­age that us­es less than 5W of pow­er.

It is complete system, totally DIY, COTS kb and display, homemade battery 
power supply, found USB hub, DIY 3D printed case from a service that uses
CAD files he generated from a Python program, all held together with 
software he found/fixed:

This weird sort of screen may or may not work with your op­er­at­ing sys­tem, spe­cial­ly if you are us­ing a not-­so-well-­known SBC like the Radxa Ze­ro.

I had to build a cus­tom ker­nel from github and that on­ly on Ubun­tu YM­MV.

Software

This is run­ning Ubun­tu Fo­cal with a cus­tom ker­nel and a patched dwm

The ter­mi­nal of choice is alacrit­ty be­cause while it us­es a lot more RAM than st it runs a bazil­lion times faster.

To mux the ter­mi­nal (alacrit­ty has no tab­s) I use zel­lij an awe­some and
friend­ly al­ter­na­tive to tmux/screen/etc.

To browse the web I would love to use qute­brows­er be­cause of its awe­some
key­board sup­port that makes the mouse an af­ter­thought. Bu­u­u­ut it's
re­al­ly re­al­ly bro­ken in this Ubun­tu, so Falkon it is.

 5 Mar 2023

http://catern.com/caternetes.html

No more DSLs: Implement and deploy a distributed system with a single program

Long and detailed, uses 'modern' Python: types, asyncio etc.  Links to 
still more detailed pages with more explanation.   Can't grasp significance
on a quick look, might be interesting.
via http://leahneukirchen.org/trivium/ 5 Mar 2023

 7 Mar 2023

https://utcc.utoronto.ca/~cks/space/blog/unix/TerminalColoursNotTheSame

ANSI colours aren't consistent across X terminal programs

There is a long standing set of 'ANSI colour codes' in terminal emulators,
including terminal programs for X. Here is a table of them, and fidian/ansi
will provide you with a convenient Bash script that will show you what these
colors look like in your terminal program.

(color codes, table, fidian/ansi are all links)

I've traditionally been very against using colours in my terminals, because in
my normal black on white choice, the colours programs chose often wind up
looking like an angry fruit salad explosion. Given how glaringly annoying
colours looked to me, I didn't really understand why other people liked them
until, a few years ago, I noticed that the same colours in Gnome Terminal
looked rather different and generally came across as less of an assault on my
eyes.

 8 Mar 2023

Building A Jank UART to USB Cable From Scavenged Parts
https://github.com/francisrstokes/githublog/blob/main/2023/3/1/building-a-jank-uart-cable-from-scavenged-parts.md

About simple UART -> complex USB.  Uses FTDI chip.

via https://news.ycombinator.com/item?id=35007555

	
	
magnat 1 day ago | root | parent | next [–]

You can actually bit-bang low speed USB on Arduino [0]. There is even a
bootloader [1] for ATtiny visible to host as HID USB device. It is obviously
not compatible with Arduino, but those tiny boards look too cute to ignore
[2]. Also, you can use USB port both for downloading firmware and your
application.

[0] https://github.com/obdev/v-usb

[1] https://github.com/micronucleus/micronucleus

[2] https://cpldcpu.wordpress.com/2014/04/25/the-nanite-85/ 

https://jack.valmadre.net/notes/2020/02/06/escape-key/

Has a list of *all* 32 ascii control characters ctrl-a etc. and their 
meanings in emacs, bash, and vim. The article title is
"Choosing an escape key for screen and tmux" - he doesn't want to use
their defaults ctrl-a and ctrl-b because they are ubiquitous in emacs.

10 Mar 2023

https://www.hackster.io/news/andreas-eriksen-s-potatop-is-a-lisp-powered-laptop-with-a-battery-life-measured-in-years-2f5d79653f24

With a tiny e-paper display

"The PotatoP prototype, which is more of a luggable than a traditional laptop,
is built using exclusively low-power parts. Its heart is a SparkFun Artemis
module, which has a single low-power Arm Cortex-M4F core running at up to
96MHz and Bluetooth 5.0 Low Energy (BLE) connectivity. On this, Eriksen runs a
modified port of uLisp, a Lisp designed specifically with microcontrollers in
mind, dubbed PotatOS.

With portable computers, the display is often the most power-hungry component.
To avoid draining too much power there, Eriksen has opted for a compact 4.4"
SHARP Memory Display — a technology mid-way between ePaper and traditional
liquid crystal displays (LCDs) that lacks a backlight and draws a minimum of
power...."

Links to github and hack-a-day

via https://news.ycombinator.com/item?id=35074233, 193 comments!

author: "Working with uLisp is fun - it's not super fast and it does have a
few limitations and gotchas, but it was by far the easiest option for this
project as so much was already supported. And the documentation and community
is very nice.
	
11 Mar 2023

https://nickdesaulniers.github.io/blog/2023/03/10/disambiguating-arm/

Disambiguating Arm, Arm ARM, Armv9, ARM9, ARM64, Aarch64, A64, A78, ...

via https://news.ycombinator.com/item?id=35100297 including 86 comments,
including one from Sopie? (Maybe)

12 Mar 2023

PicoVGA - VGA/TV display on Raspberry Pico
https://github.com/codaris/picovga-cmake

via https://news.ycombinator.com/item?id=35117847

"I have been hoping to make a Pico into a little 8-bit-micro style computer..."
Several long posts elaborating on this idea from people thinking/working on it.
Also several links to DVI from Pico:

 https://github.com/Wren6991/PicoDVI

 https://www.elektormagazine.com/news/dvi-sock-hdmidvi-for-the-raspberry-pi-pico
Also discussion of UARTs on Pico - 

https://github.com/yashsinghcodes/wik
wik is a tool to view wikipedia pages from your terminal. 

via https://news.ycombinator.com/item?id=35119681

"Why would I use this over for example, Lynx? ..."

13 Mar 2023

https://akawashiro.github.io/articles/how-device-file-in-linux-works.html

"A device file in Linux is an interface for various devices in the form of
files. Although we can read and write a device file just the same as a normal
file, read and write requests to device control requests by device file
mechanism.

This article explains how Linux kernel and kernel modules convert read and
write requests to device control requests. ...

VFS(Virtual File System)

VFS is a software layer in the Linux kernel that handles all standard UNIX
filesystem system calls. ..."

https://0pointer.net/blog/

Lennart Poettering's vision for the future of operating systems.
Lots on the details of booting. via https://news.ycombinator.com/item?id=35173839

"Central to the proposed design is the concept of a Unified Kernel Image
(UKI). These UKIs are the combination of a Linux kernel image, and initrd, a
UEFI boot stub program (and further resources, see below) into one single UEFI
PE file that can either be directly invoked by the UEFI firmware (which is
useful in particular in some cloud/Confidential Computing environments) or
through a boot loader
Whole OS embedded in the UKI

t is also possible to embed a regular root file system into the UKI and avoid
any transition to an on-disk root file system. In this mode the whole OS would
be encapsulated in the UKI, and signed/measured as one. In such a scenario the
whole of the OS must be loaded into RAM and remain there, which typically
restricts the general usability of such an approach. However, for specific
purposes this might be the design of choice, for example to implement self-
sufficient recovery or provisioning systems."

"So, let's see how I would build a desktop OS. If you press me hard, and ask
me why I would do that given that ChromeOS already exists and more or less is
a Linux desktop OS: there's plenty I am missing in ChromeOS, but most
importantly, I am lot more interested in building something people can easily
and naturally rebuild and hack on, i.e. Google-style over-the-wall open source
with its skewed power dynamic is not particularly attractive to me. I much
prefer building this within the framework of a proper open source community,
out in the open, ..."

17 Mar 2023

Using a Raspberry Pi to add a second HDMI port to a laptop
https://pierre-couy.dev/tinkering/2023/03/turning-rpi-into-external-monitor-driver.html

via https://news.ycombinator.com/item?id=35165798, 121 comments

Lots of details and system arcana about many many subsystems.
HN comments suggest alternatives.

https://github.com/Isysxp/Pico_1140



A PDP11/40 emulator that will run Unix v5/v6 on an RP Pico chip.

18 Mar 2023

https://matklad.github.io/2023/03/08/an-engine-for-an-editor.html

Emacs is different. Its thin waist consists of (using idiosyncratic olden
editor terminology) frames, windows, buffers and attributed text. This is less
general than canvas or HTML, but more general (and way more principled) than
ANSI escapes. Crucially, this also retains most of plain text’s composability.

The foundation is a text with attributes — a pair of a string and a map from
string’s subranges to key-value dictionaries. Attributes express presentation
(color, font, text decoration), but also semantics. A range of text can be
designated as clickable. Or it can specify a custom keymap, which is only
active when the cursor is on this range.

I find this to be a sweet spot for building efficient user interfaces.
Consider magit:

(screen shot)

The interface is built from text, but it is more discoverable, more readable,
and more efficient than GUI solutions.

Text is surprisingly good at communicating with humans! Forgoing arbitrary
widgets and restricting oneself to a grid of characters greatly constrains the
set of possible designs, but designs which come out of these constraints tend
to be better."

via The interface is built from text, but it is more discoverable, more
readable, and more efficient than GUI solutions.

Text is surprisingly good at communicating with humans! Forgoing arbitrary
widgets and restricting oneself to a grid of characters greatly constrains the
set of possible designs, but designs which come out of these constraints tend
to be better.

via https://news.ycombinator.com/item?id=35068891

"The concept of a narrow waist is really interesting. It is the common layer that the editor and package authors talk though. Emacs’ choice of string attributes is simple but also powerful. This is contrast to other editors that try to use something more structured like JSON or a DOM, which is probably easier for the editor, but is less hackable then attributes."


"it's the text-based nature that easily allows for something like macros to work everywhere.

reply "

19 Mar 2023

20 Mar 2023

https://enigmaticcode.wordpress.com/2015/09/24/running-the-first-program/

'Notes on Note G' - About Ada's 'program' for computing Bernoulli numbers -
with the author's own Python program that implement's Ada's algorithm!

21 Mar 2023

https://github.com/xenodium/chatgpt-shell/blob/main/chatgpt-shell.el

Run ChatGPT in emacs.   Nice example of elisp code.

https://news.ycombinator.com/item?id=35242662

comment on An Introduction to Computer Networks.  Links to other network 
books/pages, espcially 

High Performance
Browser Networking
https://hpbn.co/

Full text online, lots of details about network protocols including TLS.

22 Mar 2023

https://xenodium.com/a-chatgpt-emacs-shell/

Another ChatGPT in emacs.   Then the HN comments link to many more:

https://news.ycombinator.com/item?id=35254389

includig this exchange:

 	
koiueo 20 hours ago | prev | next [–]

Blasphemy! M-x doctor is the only AI emacs ever needs.

reply
	
	
ehecatl42 15 hours ago | parent | next [–]

Why do you say M-x doctor is the only AI emacs ever needs?

23 Mar 2023

https://tristancacqueray.github.io/blog/introducing-butler

This post introduces haskell-butler, a virtual operating system that runs
multi-players applications on the web. ...
Butler is a hobby project ...
Butler is not a computer hardware operating system. Instead, Butler is an
application environment that runs on top of an existing system. ..
     The REPL evaluates modification almost instantaneously. I run development
code through ghcid, and thanks to a simple client’s reconnect handler, the
services are hot reloaded in milliseconds when the source changes.


https://news.ycombinator.com/item?id=35218681

Long thread on RPi OS and performance, SD cards vs SSDs, 
in comments on article about Ken Thompson switching from Mac to Raspian

https://news.ycombinator.com/item?id=35218664

From the same discussion - about Raspian and Raspberry Pi OS history


https://github.com/DigitalMars/med, Micro Emacs in D

Nice summary of emacs keycodes on README.

More links from the ghu who made haskell-butler:

https://tristancacqueray.github.io/blog/introducing-functional-programming-to-pythonistas

https://www.softwarefactory-project.io/python-dataclasses.html

https://www.softwarefactory-project.io/haskell-for-python-developers.html

https://www.softwarefactory-project.io/react-for-python-developers.html
(this also includes Javascript for Python developers)

https://tristancacqueray.github.io/project/tiny-http
A tiny http server in 145 byte.   He also shows the assembler source code,
about 50 instructions.
including 6 syscall.

His haskell-butler includes this terminal program, 219 lines, 192 sloc:

https://github.com/ButlerOS/haskell-butler/blob/main/src/Butler/App/Terminal.hs

and this editor, 338 lines, 316 sloc:

https://github.com/ButlerOS/haskell-butler/blob/main/src/Butler/App/Noter.hs

 	
	Chatter – A Python CLI for OpenAI chat models 
https://github.com/mandgie/chatter

24 Mar 2023

https://hackaday.com/2023/03/19/rp2040-runs-linux-through-risc-v-emulation/

Attaches SD card to RP2040 - uses it as RAM, RP2040 onboard memory as cache
375 MHz overclock from stock 133 MHz.

via https://news.ycombinator.com/item?id=35284957

25 Mar 2023


Orange Pi 5 Is a Great and Fast Alternative to the Raspberry Pi 4
(phoronix.com)
https://news.ycombinator.com/item?id=35298339

Many detailed technical comments about this and other alternatives to RPi.

" 	
theamk 10 hours ago | next [–]

The hardware does not seem to be mainline supported, which means that you are at the mercy of a vendor.

In other words, when they say "Ubuntu, Debian, Android, and Armbian" they don't actually mean you can run any future version of it, like you could for Raspberry Pi or x86 hardware. Instead, what they mean is: "We took a latest version of Debian/Ubuntu/Android/etc... and applied some patches to it to make it work on our board. But hey, it works today, and would maybe work next year too! And if you complain super hard we can fix some kernel bugs but no promises!"

This lack of support is a big reason to stay away from less famous SBCs. ..."

	
	
PostOnce 10 hours ago | prev | next [–]

Every time somebody tells me something is a great alternative to a raspberry
pi, it doesn't work or idles at 90c or comes unsoldered quickly or is missing
critical software or all kinds of nonsense that makes it not a close
alternative, especially not at a near price point.

I'm willing to try stuff, but I'm skeptical of every new board because of
previous bad experiences.

reply
	
	
sliken 9 hours ago | parent | next [–]

I've had similar issues, but bought a NanoPi R6S with 8GB ram. Got ubuntu
22.04 going on the first day, and it's a nice little server. It's crazy faster
than a Pi4, stable, and runs cool. I paid for the $20 CNC machines case with
passive cooling. Under normal use it's quite cool to the touch, ...

And so on.  Lots of complaints, some reports of good experiences.

Also mention of some embedded OS:  Zephyr, NuttX (but poster said it's
much easier to just use Linux).

 	
YunoHost – Operating system aiming to simplify server administration (yunohost.org)
https://news.ycombinator.com/item?id=35300482

"> YunoHost is an operating system aiming for the simplest administration of a server, and therefore democratize self-hosting, while making sure it stays reliable, secure, ethical and lightweight. It is a copylefted libre software project maintained exclusively by volunteers. Technically, it can be seen as a distribution based on Debian GNU/Linux ..."


 	
the_common_man 2 hours ago | unvote | prev | next [–]

Yunohost, Cloudron, Sandstorm, maybe even portainer are similar platforms.
Highly recommend selfhosting

Comparing hobby PCB vendors
https://lcamtuf.substack.com/

his archives have more about diy/hobby electronics

via https://news.ycombinator.com/item?id=35285769, 74 long comments after
9 hours, lots of experiences with/advice about  these and other vendors.

https://github.com/shadlyd15/DoomLinux

A single script to build a minimal live Linux operating system from source
code that runs Doom on boot.

./DoomLinux.sh

This command will create an iso of DoomLinux which is bootable from USB stick.

Shows how to make a minimal bootable Linux.  Uses kernel and busybox.
Also configures grub to boot it.  This page references:

https://github.com/ivandavidov/minimal-linux-script

One script which generates fully functional live Linux ISO image with minimal
effort. This is based on the first published version of Minimal Linux Live

https://github.com/ivandavidov/minimal

Minimal Linux Live (MLL) is a tiny educational Linux distribution, which is
designed to be built from scratch by using a collection of automated shell
scripts. Minimal Linux Live offers a core environment with just the Linux
kernel, GNU C library, and Busybox userland utilities. Additional software can
be included in the ISO image at build time by using a well-documented
configuration file. ...

So, could we run CPython instead of Doom?

27 Mar 2023

baca: TUI Ebook Reader
https://github.com/wustho/baca

" epy's lovely sister ..."

CLI Ebook Reader.
https://github.com/wustho/epy

This is just a fork of epr with these extra features: ...

Terminal/CLI Epub reader written in Python 3.6
https://github.com/wustho/epr

Inspirations

    https://github.com/aerkalov/ebooklib
    https://github.com/rupa/epub

 	
 	
You Can Have the Blue Pill or the Red Pill, and We’re Out of Blue Pills
https://news.ycombinator.com/item?id=35293925

Harari et al on AI in NYT

https://web.archive.org/web/20230326005354/https://www.nytimes.com/2023/03/24/opinion/yuval-harari-ai-chatgpt.html

saved in ~/kindle/harari-et-al-on-ai-in-nyt.txt or something like that.

 Animats 3 days ago | unvote [–]

One of the more insightful comments about ChatGPT. It's not that it's going to
take over. It's that its easy to use but distorted view of reality will mess
with humans too much. Just as automated social media content selection did.

28 Mar 2023

http://mynor.org/my4th

This page is about My4TH. My4TH (pronounced "my fourth") is my fourth
homebuilt CPU-less computer after MyCPU, MyNOR and TraNOR. I wanted to build
the simplest computer possible, with a discrete CPU using as few gates and
components as possible, running a Forth operating system.

 is based on MyNOR, so it also has a very simple 1-bit NOR gate "ALU".

 My4TH hardware features:

    8-bit discrete logic CPU
    8 to 14 MHz clock frequency
    32 KB ROM, 32 KB RAM
    up to 256 KB EEPROM
    1-bit NOR gate "ALU"
    6300 8-bit additions / sec
    4 memory chips
    16 CMOS logic chips
    RS-232 with 4800 baud
    I2C-bus for extensions
    6 digital inputs
    5 digital outputs
    PCB size 10 x 10 cm

via https://news.ycombinator.com/item?id=35344227 no comments yet, see also

https://news.ycombinator.com/item?id=25195982
MyNOR: Single board computer that uses a single NOR gate as its ALU
2020, 66 comments

https://esp8266code.com/

"a tiny website all about ESP8266 tutorials "  for example

https://esp8266code.com/esp8266-getting-started.html

30 Mar 2023

https://news.ycombinator.com/item?id=35357238

Python PEP 582 Rejected (python.org)

 PaulHoule 1 day ago | prev [–]

The interference with virtual environments makes this a non-starter.

The newbie (not to mention the data scientist) is always looking for a way to
trash their Python environment.

Now they use

   pip install

outside a venv or (worse)

   pip install —user

which is truly a weapon of mass destruction. Both of these are globally
harmful and Python is right to stop the insanity by making pip not work
outside of a venv.

If Python lets the insanity comes back, a fresher will now trash their local
environment and then flail around like a fish out of water because they forgot
to make a venv before they start their Python.

What people don’t get is that the burden of using venv’s is finite, but the
amount of trouble you get into for not using venv’s is infinite. Engineering
managers are giving up on Python because they can’t successfully get code from
developers into production and the main problem is the recalcitrance of the
developers and refusal to follow good practices. It’s little understood that
there is a small (literally a handful) of problems that make Python
undeployable and make the gap from projects one person works on to ones that
two persons work on look unbridgeable."

What's he talking about?   What't the problem and how does venv solve it?

https://textual.textualize.io/blog/2023/03/15/no-async-async-with-python/

"No-async async with Python¶

A (reasonable) criticism of async is that it tends to proliferate in your code. In order to await something, your functions must be async all the way up the call-stack. This tends to result in you making things async just to support that one call that needs it or, worse, adding async just-in-case. Given that going from def to async def is a breaking change there is a strong incentive to go straight there.

Before you know it, you have adopted a policy of "async all the things".

Textual is an async framework, but doesn't require the app developer to use
the async and await keywords (but you can if you need to). This post is about
how Textual accomplishes this async-agnosticism. ..."

via HN, but no comments after 19 hours.

31 Mar 2023

Relieving your Python packaging pain
https://bitecode.substack.com/p/relieving-your-python-packaging-pain

"Now that the Python 3 transition is over and Guido is working on making the
language faster, the new topic of complaints for the community is
packaging...."

follow up:

Why not tell people to "simply" use pyenv, poetry or anaconda
https://bitecode.substack.com/p/why-not-tell-people-to-simply-use

via https://news.ycombinator.com/item?id=35379008, 123 comments after 18 hours

*Lots* of complaining about Python packaging and installs.

https://github.com/joeycastillo/The-Open-Book

https://www.oddlyspecificobjects.com/projects/openbook/#advanced-text-formatting
The Open Book is my long-standing attempt to design a comprehensible and
accessible e-book reader that you can build yourself ...

The most central part is the Raspberry Pi Pico ...
when you turn on your Open Book, the Pi Pico powers up the gadgets on the
board, including the SD card, the Flash chip and the e-paper driver. ...

... The solution is the 2 MB Flash chip that you soldered while assembling
your Open Book, and a library called Babel.

Babel is a lightweight Unicode text rendering library that can display bitmap
fonts of up to 16x16 pixels. ...

The canonical format for books is plain text with the book title on the first
line, OR plain text plus some front matter and some ASCII control codes for
chapter breaks and formatting, ...

via https://news.ycombinator.com/item?id=35388234, no comments after 5 hours.

http://akkartik.name/

"
about contact
Kartik Agaram
Dec 29, 2022
A year of freewheeling apps

Over the course of 2022, I've found myself gradually programming in a certain
way that has been working really well. Here, let me show you a few examples,
see if you can spot the pattern: ...

I've found myself calling these freewheeling apps to myself. They're
freewheeling in two ways. First, they're easy to get started with so you can
be off doing your thing. Second, they stay freewheeling over time. They don't
cramp your style with constraints after you've gotten suckered into adopting
them. ...

These apps should work anywhere (except mobile platforms), be easy to try out,
easy to edit in place, and easy to subvert if you dislike a design choice. I'm
going to continue improving the hacking experience ...

A lot of the bang here comes from the stack I'm using: the Lua programming
language and the LÖVE game engine for Lua. ..."

What he calls a "freewheeling app" seems similar to what I've been doing
with sked + frame - continually developing in the interpreter as we use 
and test the application - keeping the application lightweight and the 
development enviroment very responsive.

 8 Apr 2022

Project Gibson: A Cyberpunk-Themed Z80 Computer Project 
https://www.trashworldnews.com/project-gibson/

A little Z80 computer on a few small circuit boards much like many
from 40+ years ago.  But even fewer components - RAM is a 32K SRAM,
not a bunch of DRAM chips.  What's notable is that the parts for building
this are still readily available today.  And the development discipline:

"No code may enter the project from another computer. A lot of simple Z80
computers run code written and compiled on a modern computer, but that would
defeat the challenge of bootstrapping the Gibson from hardware up. ... he "no
foreign code" restriction also means no microcontrollers! Things like video
generation and interface peripherals will all have to be implemented in
discrete hardware. ..." "One of the biggest challenges of Project Gibson is
the nearly philosophical challenge of how to bootstrap a computer to an
operating system and applications starting with an unpowered CPU and empty
memory. ..."

This looks a lot like the CollapseOS project - also Z80 I recall - 
but these guys don't mention it.

 @gwangjinkim
gwangjinkim/how-to-save-entire-python-sessions-or-objects-or-session-code.py

https://gist.github.com/gwangjinkim/4579898848b0242ed76ed551db037661

"
The package `dill` seems to be the closest solution."

###################################################
# save and load session state
###################################################

pip install dill
import dill
filepath = "session.pkl"
dill.dump_session(filepath)
dill.load_session(filepath)

This page has other solutions using pickle, JSON etc.


 9 Apr 2023

https://news.ycombinator.com/item?id=35433326

" 	
ww520 5 days ago | parent | context | flag | favorite | on: His software sang the words of God, then it went s...

I heard that the creator of the K language Arthur Whitney would delete all old
versions of the compiler source code and binaries before working on the next
version. That's a unusual step to start afresh. It illustrates that giving
enough will and resource most software can be recreated.

 	
jamal-kumar 5 days ago | prev [–]

I've done that before and found it super refreshing. If the program is about
the size you can fit in your head you can probably end up re-writing it better
the second time around. Bonus points if it's in a new programming language"

Searching HN Algolia for "Arthur Whitney new version" finds many versions
of this story.

https://danielmangum.com/posts/risc-v-bytes-exploring-custom-esp32-bootloader/

Uses Minicom to talk to the ESP32.  Explains how to write custom 2nd state
bootloader to flash memory etc.  Lots about details of dealing with a 
system-on-a-chip on a board without an OS.

This is part of a long series by this author.


via https://news.ycombinator.com/item?id=35503855

"	
	
meepmorp 1 hour ago [–]

PSA - only the C family of ESP32 are RISC-V, the others are Xtensa.

reply
	
	
snvzz 51 minutes ago | parent [–]

Legacy chips are Xtensa.

Espressif has already decided to use RISC-V exclusively[0].

0. https://www.eenewseurope.com/en/espressif-moves-exclusively-...

"

https://www.eenewseurope.com/en/espressif-moves-exclusively-to-risc-v/

"The move was confirmed by Teo Swee Ann, CEO and president of Espressif
Systems, based in Shanghai, China. "

So Epressif is based in China.  Do the chips come from China, or do they just
assemble the boards?

https://www.eenewseurope.com/en/chinas-espressif-ships-100-million-iot-chips/

This article says that they ship the chips - they must make them?


https://en.wikipedia.org/wiki/ESP32

"ESP32 is created and developed by Espressif Systems, a Shanghai-based Chinese
company, and is manufactured by TSMC using their 40 nm process."

TSMC is in Taiwan.

Comments on Dooble web browser
https://news.ycombinator.com/item?id=35497728

" This is just another browser using Qt's WebEngine (uses chromium's blink
underneath) lib.

It would be interesting if it was an actual new engine.

Alternative (non khtml or gecko derivative) open-source engines sorted by descending perception of liveliness include: Ladybird[0], NetSurf[1], Links[2] and Dillo[3].

0. https://github.com/SerenityOS/serenity/tree/master/Ladybird

1. https://www.netsurf-browser.org/

2. http://links.twibright.com/about.php

3. https://www.dillo.org/

reply
	
	
jug 19 hours ago | parent | next [–]

Ladybird is so crazy. How they are accomplishing that much in this short
period of time with their manpower. I mean, it’s no small feat to make a web
browser render many of today’s websites. ...
"

Ladybird is the SerenityOS browser.  Lots of comments about it follow.

10 Apr 2023

http://dmitry.gr/?r=06.%20Thoughts&proj=09.ComplexPioMachines

 Using RP2040 PIO to drive a poorly-designed display

Lots of low-level details - "Waveshare - a 2.8inch 320x240 full-colour LCD."
apparently it's *also* a touch screen.

via https://news.ycombinator.com/item?id=35507933 43 comments, much detail

Ask HN: Show Code with Notes Alongside
https://news.ycombinator.com/item?id=35509461

" 	
blondin 12 hours ago | unvote | prev [–]

i have seen those in annotated javascript documentation. but it was the other
way around. (comment on the left, and code on the right). they all seem to use
docco[0] with the option to display comment in "parallel". the author of docco
used it in their library underscore[1].

[0]: https://github.com/jashkenas/docco

[1]: https://underscorejs.org/docs/underscore-esm.html

reply
	
	
glaucon 12 hours ago | unvote | parent [–]

This is spot on, thanks. In fact I'm reasonably sure that it was 'docco' I was
remembering having seen in the past.

While digging around with your references I came across Pycco [1] which is a
python optimized version of docco and as it's Python I'm trying to document
that's a very useful thing to find. Thanks.

[1] https://pycco-docs.github.io/pycco/ "

Text-based Tetris - "Textris"
https://aino.agency/game

This is a Swedish design firm.  Textris is just a demo in a web page,
they dont' show the code.

12 Apr 2023 

Comments on Nolibc: A minimal C-library replacement
https://news.ycombinator.com/item?id=35520710


"I don't understand the appeal of trying to strip the Linux kernel down, then introducing additional specialized code like nolibc, in order to obtain a hyper-minimal binary that can run a single program on bare metal.

Wouldn't it be easier to just use a simpler POSIX-like OS to begin with? ..."

HN comments are about the article https://lwn.net/Articles/920158/

Comments on  	
	Sony backs Raspberry Pi with fresh funding, access to A.I. chips 
https://news.ycombinator.com/item?id=35536303, 84 comments after 15 hours

Many recommendations and dis-recommendations for RPi alternatives,
comments on strengths and weaknesses of RPi.

14 Apr 2023

 	
Zylin ZPU: 32 bit CPU with GCC toolchain 
https://news.ycombinator.com/item?id=35552824

19 comments after 16 hours

" 	
dmitrygr 15 hours ago | prev | next [–]

Sadly it is mostly abandoned. But not only was it the smallest CPU with a gnu
toolchain, there was also a port of linux no-mmu unto it!

 	
dmitrygr 12 hours ago | parent [–]

There were a number of implementations in FPGA (it was designed to use very
few LUTs)

"

Several comments compare it to small RISC-V cpus, with links.

15 Apr 2023

RISC V emulator in Scratch boots Linux

https://old.reddit.com/r/linux/comments/12kc6ss/got_linux_booting_on_scratch_not
https://www.reddit.com/r/scratch/comments/12k8kvu/got_linux_booting_on_scratch/?utm_source=reddit&utm_medium=usertext&utm_name=linux&utm_content=t1_jg2vjer

https://scratch.mit.edu/discuss/topic/677788/?page=1#post-7148519

https://i.redd.it/vp839bq2bkta1.png


https://i.redd.it/vp839bq2bkta1.png

The Soul of an Old Machine
https://benjamincongdon.me/blog/2023/04/15/The-Soul-of-an-Old-Machine/

" April 15, 2023   •   3 minutes

I recently got an M2 MacBook Air to replace my 2014 MacBook Pro. Apple offered
to recycle my old machine (and give me a token $90 off my new laptop as a
trade-in), which I gladly opted-in to.

However, when it got time to actually wipe my old laptop and trade it in, I
couldn’t help but get a little sentimental about it. I’ve used this laptop for
nearly a decade ..."

"Unfortunately, a couple months ago I realized my MBP was struggling to manage
even a single Chrome tab, and noticed that is just was not pleasant to use
this machine anymore.

-- !?

17 Apr 2023

Booting modern Intel CPUs
https://mjg59.dreamwidth.org/66109.html

via https://news.ycombinator.com/item?id=35596748, 81 comments after 12 hours

18 Apr 2023

comments on A Design Analysis of Holy C (2019)
https://news.ycombinator.com/item?id=35589579

links to http://www.codersnotes.com/notes/a-constructive-look-at-templeos/

19 Apr 2023

Mandala: Python programs that save, query and version themselves
https://amakelov.github.io/blog/pl/

"Your code and its execution traces contain enough information to save, query
and version computations without extra boilerplate. mandala is a persistent
memoization cache on steroids that lets you tap into this information.
"

A little hard to understand but might be interesting both for 
what it does and for the coding technique.

via https://news.ycombinator.com/item?id=35580569

 emptysongglass 2 days ago | unvote [–]

I write Python (not well) and I don't understand any of this:

 amakelov 2 days ago | parent [–]

Hi, author here. Sorry about the confusion ...
- the whole thing is based on memoization. You put a memoization decorator on
all the functions whose results you want to persist/reuse, and you compose
entire programs by calling such functions on the outputs of other functions
... 


22 Apr 2023


Emacs standing alone on a Linux Kernel
http://informatimago.free.fr/i/linux/emacs-on-user-mode-linux.html

How to make a simple Linux and start emacs as its init.
Uses something called 'User Mode Linux'.

via https://news.ycombinator.com/item?id=35625877, mostly jokes but
maybe a few helpul comments on booting linux, init, and running a 
simple Linux.

http://www.chrisfenton.com/homebrew-cray-1a/

"The actual design was implemented in a Xilinx Spartan-3E 1600 development
board. This is basically the biggest FPGA you can buy that doesn’t cost
thousands of dollars for a devkit. The Cray occupies about 75% of the logic
resources, and all of the block RAM."

https://raymii.org/s/blog/Vim_as_PID_1_Boot_to_Vim.html

response to emacs article linked above.   Uses Tiny Core linux.
Builds an iso, only tested on qemu?

Links to

https://raymii.org/s/blog/Bare_Metal_Boot_to_Vi.html

"This is made possible by Cosmopolitan, a libc ..."
Boots on qemu, not tested on real bare metal.

via https://news.ycombinator.com/item?id=35662571 mostly jokes,
links to previous in 2014: https://news.ycombinator.com/item?id=8335226

23 Apr 2023

In 1981, Intel released the iAPX 432
https://oldbytes.space/@kenshirriff/110231910098167742

via https://news.ycombinator.com/item?id=35642712, 100 comments

links to other 432 information and other ambitious architectures
of the era.

29 Apr 2023

https://davidhampgonsalves.com/junk-drawer-phone-as-a-music-streaming-server/

via https://news.ycombinator.com/item?id=35747379 46 comments, about using 
Android devices for unusual purposes.

http://rocket.jonh.net/

"The Ravenna Ultra-Low-Altitude Vehicle is a backyard rocketship treehouse
nestled in the Seattle neighborhood of Ravenna. The best way to describe it is
to show you a flight! Rarely does building a treehouse require welding,
grinding, painting, riveting, bending, crimping, plumbing, brazing, laser
cutting, sound design, printed circuit board fabrication, thousands of lines
of C code, distributed network protocols, sewing and embroidery.

Ours did.

The RULAV is a hexagonal capsule, 7.5 feet (2.3 meters) high, atop a tripod 7.5 feet (2.3 meters) high, for an overall height of about 15 feet (4.6 meters). It is about 6.5 feet (2 meters) across at its widest point. The frame is welded mild steel with riveted aluminum skin. It contains nearly 800 LEDs forming dozens of numeric displays spread across 14 control panels, each with an acrylic face laser-cut and etched with labels such as "Lunar Distance" and "Hydraulic Pressure". The pilot controls the rocket using a joystick and panels full of working switches, knobs and buttons. Underneath the capsule are three "thrusters" that shoot plumes of water and compressed air under the control of the pilot's joystick, simulating real positioning thrusters. Takeoff and docking sequences are augmented by a paint-shaker that simulates the vibration of a rocket engine. Sound effects complete the illusion, with a powered subwoofer that gives the rocket a satisfying rumble.

Behind the scenes, rocket operations are controlled by three Atmega328 microprocessors on custom-fabricated printed circuit boards, running a small operating system, RULOS, that we built just for this project. The processors communicate using an in-rocket TWI network and will eventually talk back to the house over a serial port. A trench running from the house to the rocket carries 12VDC power for the lighting and electronics, water for the thrusters, compressed air, and several data signals.

The RULAV was built in 2009-2010 by Jon Howell and Jeremy Elson, with lots of help from other people. This site describes the rocket's design and construction in detail, along with dozens of photos and videos.

And, if you're ever in the Seattle area, stop by and visit ... you are go for launch!

via https://news.ycombinator.com/item?id=35690753

How little code can a filesystem be?
https://dernocua.github.io/notes/minifs.html

by Kragen Sitaker

"... This feels like it ought to be doable in about 200 lines of code in a
garbage-collected language."

 5 May 2023

UEFI Secure Boot on the Raspberry Pi (linux.it)
https://news.ycombinator.com/item?id=35815382

52 comment, lots of details.  So booting on RPi 4 is very complicated now.

Non-blocking UDP ethernet transmitter implemented on RP2040
https://vanhunteradams.com/Pico/Ethernet/UPD_TX.html

Very long and detailed.  Lots of C code.

via https://news.ycombinator.com/item?id=35810281

"Bit-banging Ethernet, now that is something I'd never thought to see."
Then someone links to:

Bit-banging Ethernet On An ATTiny85
https://hackaday.com/2014/08/29/bit-banging-ethernet-on-an-attiny85/


 8 May 2023

https://www.scattered-thoughts.net/writing/focus-intro/


Focus: Intro by Jamie Brandon  (Focus is the name of the editor the author wrote)

"It's a huge project to write a text editor that people will actually use, but it turns out to be fairly easy to write a text editor that only one person will use."

12 May 2023

https://github.com/mateuszb/tls1.3

"TLS 1.3 is a minimal common lisp implementation of the TLS1.3 specification"


https://github.com/antirez/freakwan/blob/main/splash.py

"FreakWAN is an effort to create a LoRa-based open WAN network, completely
independent from Internet and the cellular phones networks.

By antirez.  Uses MicroPython.

via https://news.ycombinator.com/item?id=35882967, 38 comments

https://subtls.pages.dev/

See this page fetch itself, byte by byte, over TLS

    This page performs a live, annotated https: request for its own source. It’s inspired by The Illustrated TLS 1.3 Connection and Julia Evans’ toy TLS 1.3.
    It’s built on subtls, a pure-JS TLS 1.3 implementation that depends only on SubtleCrypto. Raw TCP traffic is carried via a WebSocket proxy.

via https://news.ycombinator.com/item?id=35884437, 156 comments

https://technicshistory.com/the-backbone/

The Backbone, a book, is a history of the Internet.  Sequel to The Switch,
a sort of prehistory of computing.

https://buttondown.email/hillelwayne/archive/the-seven-specification-ur-languages/


" The seven specification ur-languages
A brief overview of the formal specification landscape "

via an HN page, with lots of comments.

https://news.ycombinator.com/item?id=35879302

	Building a Cathedral Without Science or Math: The Engineering Method Explained (youtube.com)

https://badar.tech/2023/04/30/electronics-lab-bench-setup-guide/

Very detailed, photos and descriptions of every tool etc.

via https://news.ycombinator.com/item?id=35903294

tverbeure: "Something isn’t right. You can see the bench surface.


https://gist.github.com/todbot/96a654c5fa27625147d65c45c8bfd47b

 @todbot
todbot/synthio_midi_synth.py

via https://news.ycombinator.com/item?id=35921745

	A RP2040 Powered MIDI-Controlled Synth in CircuitPython

14 May 2023

https://implement-dns.wizardzines.com/index.html

Implement DNS in a weekend

In Python, Jupyter notebook, by Julia Evans

via https://news.ycombinator.com/item?id=35916064, 71 comments.

https://www.leshenko.net/p/ugit/#

ugit: DIY Git in Python

via https://news.ycombinator.com/item?id=35932074  22 comments
with links to many other git implementations, many in Python.

https://github.com/yhzhang0128/egos-2000

"With only 2000 lines of code, egos-2000 implements every component of an
operating system for education. It can run on a RISC-V board and also the QEMU
software emulator.

Earth and Grass Operating System

We use egos-classic and egos-2000 as our teaching OS at Cornell. "

Earth and Grass Operating System

https://news.ycombinator.com/item?id=35939542

 	
	Worlds Simplest Bootloader (youtube.com)

"
    Coding and walkthrough for a simple Cortex-M bootloader. Part of a Youtube
    series on bare metal programming.

https://github.com/hperaza/RSX280

"RSX280 is an Operating System for the Zilog Z280 CPU that is similar in look and feel to the old DEC's RSX-11M.

via https://news.ycombinator.com/item?id=35932239 4 comments


15 May 2023

https://news.ycombinator.com/item?id=35915620

On the difficulties of installing Linux on recent Windows laptops, due
to Microsoft Secure Boot.   Suggestions for how to handle it.

18 May 2023

This blog is hosted on my Android phone
https://androidblog.a.pinggy.io/

    "I used Termux, which is an Android terminal emulator on which we can run
    a web server such as a Node.js http-server, and Pinggy for obtaining
    public URLs for accessing that server."

via https://news.ycombinator.com/item?id=35944315 210 comments

Comments on how to use a phone as a server, running general purpose Linux
on phones, other cheap alternatives etc.

https://github.com/zwegner/x86-sat

"... an autogenerated formal-ish model of x86 ...
... transforming it into a model for Z3."

via https://news.ycombinator.com/item?id=35946078 22 comments
on how this could be useful for model checking, theorem proving, 
superoptimization.

22 May 2023

https://github.com/lawrie/fpga_pio
FPGA RP2040 PIO

"This is an attempt to recreate the Raspberry Pi RP2040 PIO interface in
Verilog.

PIO stands for Progammable I/O, and it is a peripheral that is part of the
RP2040 SoC, which is much more flexible than hardware implementations of
specific protocols like SPI, I2C, UART etc. It can implement all these
protocols and more at high speed and on any GPIO pins.

It runs in up to 8 special processors, known as State Machines, which are
programmed in assembler using a machine language designed specifically for
fast cycle-accurate I/O. These processors run independently of the main CPUs."

via https://news.ycombinator.com/item?id=36022695 31 comments

qiqitori 15 hours ago | unvote | next [–]

The RP2040's PIO is awesome. Here are two retro-related projects I did in the
last ~year.

You can capture video in a weird format with PIO on one core, and output it
with PIO (in a standard format like VGA, or even DVI) on the other core, like
here: https://blog.qiqitori.com/2022/09/raspberry-pi-pico-15-6-khz...

https://nick-black.com/dankwiki/index.php/Io_uring

Io uring

Introduced in 2019 (kernel 5.1) by Jens Axboe, io_uring (henceforth uring) is
a system for providing the kernel with a schedule of system calls, and
receiving the results as they're generated. Whereas epoll and kqueue support
multiplexing, where you're told when you can usefully perform a system call
using some set of filters, uring allows you to specify the system calls
themselves (and dependencies between them), and execute the schedule at the
kernel "dataflow limit". It combines asynchronous I/O, system call
polybatching, and flexible buffer management, and is IMHO the most substantial
development in the Linux I/O model since Berkeley sockets (yes, I'm aware
Berkeley sockets preceded Linux. Let's then say that it's the most substantial
development in the UNIX I/O model to originate in Linux):

via https://news.ycombinator.com/item?id=36030958 10 comments

 	
iamwil 1 hour ago | next [–]

One interesting thing is that io_uring can operate in different modes. One of
the modes enables kernel-side polling, so that when you put data into the
buffer, the kernel will pull the data out itself to do IO. That means from the
application side, you can perform IO without any system calls.


23 May 2023

https://github.com/jbruchon/elks

ELKS is a project providing a Linux-like OS for systems based on the Intel
IA16 architecture (16-bit processors: 8086, 8088, 80188, 80186, 80286, NEC
V20, V30 and compatibles). Such systems are ancient computers (IBM-PC XT / AT
and clones) as well as more recent SBCs, SoCs, and FPGAs.


24 May 2023

https://til.simonwillison.net/hacker-news/recent-comments

"How to read Hacker News threads with most recent comments first"

"If you search for story:35111646, filter for comments and then order by date
you'll get the comments for that particular story, most recent at the top.
Problem solved!"

26 May 2023

https://github.com/fogus/papers-i-love

I downloaded Henderson's Purely Functional Operating Systems from the
Computer Architecture folder in this repo.

27 May 2023

Ask HN: What are some good resources for learning about low level disk/file IO?
https://news.ycombinator.com/item?id=36081540  41 comments

SectorC: A C Compiler in 512 bytes
https://xorvoid.com/sectorc.html

Remarkably ingenious, with good explanations.

"Things that seem impossible often aren’t and we should Just Do It anyway"

via https://news.ycombinator.com/item?id=36064971 80 comments

Links to other small C compilers and to boostrapping projecs. 

https://til.simonwillison.net/

Short notes on programming techniques etc. in dozens of categories.

via https://ask.metafilter.com/354812/Now-I-know-Ive-seen-it-around-here-somewhere-programming-edition

which recommends other searching and note-taking techniques.


28 May 2023

Relinquishing control in Python asyncio
https://til.simonwillison.net/python/yielding-in-asyncio

links to 

Question: How to relinquishing control to the event loop in Python 3.5 #284
https://github.com/python/asyncio/issues/284

with comments by gvanrossum !


31 May 2023

Using computers more freely and safely
http://akkartik.name/freewheeling

Describes the programming environment he built with Love,
a game engine built/programmed in Lua.  Several little
~30 sec video demos

    "Here's how I draw pictures in my text editor. One thing to notice is that
    there are no menus, dialogs or conventional UI elements. I've been trying
    to mimic the feel of paper and pen. "

"Teaching a new LÖVE app to listen for commands from the editor takes 250 LoC.

"My editing environment doesn't have find-and-replace yet. I haven't felt much
need for it, which is surprising because I used to use it all the time. I
recently realized why: small programs just tend to need less bulk replacement.

There are many features like this that my environment lacks at the moment.
Some of them I'll get to, some I may never add.

There will absolutely be programs that are difficult to create this way, but
that's ok. "

"I've surprised myself a couple of times when a seemingly complex program
turns out to have a simple core. This is a simple DOM model I wrote in 50
lines of code. It doesn't support 99.9% of CSS. It's just a simple way to
specify grid layouts. Throw in an infinite 2D surface with support for panning
and zooming, and it requires 350 LoC. "

(I think this is not a DOM in a browser, but in the Love engine canvas)

"Once I built it, it was easy to include in my editing app. Here you can see
my programming environment with the ability to view multiple definitions at
once. This is something I've wanted for a long time, to view not just
arbitrary files but arbitrary definitions side by side. "

"When I first started working on this environment I had a hazy desire for
multiple views. However, I found myself gravitating towards a style where I
positioned definitions once and never moved them thereafter. It was valuable
to give all the code for my apps a place, so I always have a sense of space
when I make changes to it. The computer contains my memory palace. "

(He can zoom out and shows this huge 2-d space with paragraphs of code
all over it!)

Later - I looked at the video (only 18 minutes).   The programming environment
is even more impressive when you see it animated.  His viewer that uses all
the width can have 3 pages side by side.   In the programming environment,
he doesn't display files or buffers - he just displays the definitions, each
in a window just big enough.   He leaves each window at a particular spot
he remembers in an infinite zoomable 2-d space.

The web page http://akkartik.name/freewheeling is a pretty complete 
transcript of the talk.

Also, the animations of the viewer, editor, and programming environment
are in the little 30 sec videos embedded in the web page.

 2 Jun 2023

Learn x86-64 assembly by writing a GUI from scratch
https://gaultier.github.io/blog/x11_x64.html

via https://news.ycombinator.com/item?id=36153237 139 comments


 3 Jun 2023

Connect to Your Raspberry Pi Over USB Using Gadget Mode
https://howchoo.com/pi/raspberry-pi-gadget-mode

via https://news.ycombinator.com/item?id=36176954 25 comments

with more advice on USB-related HW/SW for RPi.

My Business Card Runs Linux
https://www.thirtythreeforty.net/posts/2019/12/my-business-card-runs-linux/


" a complete, minimal ARM computer running my customized Linux firmware built
with Buildroot. ...  The whole thing costs under $3. It’s cheap enough to give
away. ..."

more details at

https://www.thirtythreeforty.net/posts/2019/12/designing-my-linux-business-card/

via https://news.ycombinator.com/item?id=36176198 45 comments
and https://news.ycombinator.com/item?id=21871026 397 comments

 4 Jun 2023

https://news.ycombinator.com/item?id=36179850

comments on Still Love Telnet (which I didn't look at)

Lots of comments recommend netcat or nc instead of telnet as a 
general-purpose TCP client these days.   Also recommendations for
'openssl s_client' which peforms netcat for SSL, so you can experiment
with HTTPS etc.
"It does just what netcat does, but initiates a secure SSL tunnel first."

Then lots of warnings about security risks with openssl s_client, scp, etc.

 5 Jun 2023

 Virtual I/O Device (VIRTIO) Version 1.1

Committee Specification Draft 01 /
Public Review Draft 01

20 December 2018 

https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.html

also

https://docs.oasis-open.org/virtio/virtio/v1.1/csprd01/virtio-v1.1-csprd01.pdf

via

MacOS Virtualization Framework
https://developer.apple.com/documentation/virtualization

"The framework supports the Virtual I/O Device (VIRTIO) specification, which
defines standard interfaces for many device types, including network, socket,
serial port, storage, entropy, and memory-balloon devices."

via https://news.ycombinator.com/item?id=36184400  118 comments


 8 Jun 2023

https://github.com/nanochess/bootOS/blob/master/os.asm

bootOS operating system in 512 bytes (boot sector)
by Oscar Toledo G. Jul/22/2019

os.asm in repo is 652 line assembler file with whole OS and lots of
explanation in comments.

via https://news.ycombinator.com/item?id=20569438

 kragen on July 30, 2019 | next [–]

    For those not aware of the background, the author is a wizard from a
    secretive underground society of wizards known as the Familia Toledo; he
    and his family (it is a family) have been designing and building their own
    computers (and ancillary equipment like reflow ovens) and writing their
    own operating systems and web browsers for some 40 years now.
    Unfortunately, they live on the outskirts of Mexico City, not Sunnyvale or
    Boston, so the public accounts of their achievements have been mostly
    written by vulgar journalists without even rudimentary knowledge of
    programming or electronics.

    A filesystem, a shell, a program loader, and a hex editor! Well, maybe
    "editor" is overselling it. But from my point of view, it's as much an
    "OS" as MS-DOS was. MS-DOS also depended on the ROM BIOS.

    I agree that it's probably not practically useful. But it's a brilliant
    hack!

 ChrisCinelli on July 31, 2019 | prev | next [–]

    It seems that this more than a OS is a minimal file system with a obvious
    limited feature set that relay on the
    https://en.wikipedia.org/wiki/INT_13H - It assumes that a BIOS that
    contains a lot more machine code is available.

devnulloverflow on July 31, 2019 | root | parent | next [–]

    Yes, BootOS very much in the same space as MS-DOS, although leaning even
    further on the "less-is-more" axis. It does the same basic things (though
    I suppose it doesn't do the BASIC thing).

    Interestingly, there is modern OS in the same space. That's UEFI. Unti I
    played with it a few months ago, I thought it was some mysterious
    firmware-adjacent black-box. But actually it's just an OS, very similar to
    DOS (though it runs in protected mode).

    It has a shell and some basic built-in commands including text editors and
    such. And most importantly it lets you run executables that a stored on a
    FAT (well, FAT32) filesystem.

    The name BootOS could very well describe UEFI. And equally, a slightly
    more capable version of BootOS could serve as (very underpowered) UEFI
    replacement.


https://news.ycombinator.com/item?id=36232900

kramerger 8 hours ago | root | parent [–]

Warning: big piece of opinion that may trigger some of you.

    In practice (feel free to verify this yourself by downloading and building
    the latest L4 derivative), microkernels that actually work on modern
    hardware need a huge amount of baseline code to get IPC and memory server
    working in a distributed yet somewhat performant fashion.

    There is a flag for compiling Linux without any hardware and filesystem
    drivers. That gives you the kernel core in a surprising small binary which
    is not that far from sel4 or okl4.

    In summary, monolithic is the new microkernel :)


The Right Way to Run Shell Commands From Python
https://martinheinz.dev/blog/98

tl;dr

via https://news.ycombinator.com/item?id=36212970

badrabbit 1 day ago | unvote | prev [–]

    I have seen this advice many times but I end up using os.system() 70% of
    the time. If subprocess and other methods were smart enough to support
    running something like " ls -l aS " without requiring additional
    parameters/handling I would use them. If I was shipping a user facing
    production app I would be using the more recommended apis as well. But
    when I just need a freaking command run and I don't care about the results
    and there is no dynamic parameter in the command why would I add all that
    code and complexity? Most of my use cases could also be done as a bash
    script except python is nicer/leaner so i prefer it instead.


 9 Jun 2023

https://counterexamples.org/intro.html

    Welcome to Counterexamples in Type Systems, a compendium of horrible
    programs that crash, segfault or otherwise explode.

    The "counterexamples" here are programs that go wrong in ways that should
    be impossible: corrupt memory in Rust, produce a ClassCastException in
    cast-free Java, segfault in Haskell, and so on. This book is a collection
    of such counterexamples, each with some explanation of what went wrong and
    references to the languages or systems in which the problem occurred.

    It's intended as a resource for researchers, designers and implementors of
    static type systems, as well as programmers interested in how type systems
    fit together (or don't).

via https://news.ycombinator.com/item?id=36213704 95 comments

https://danilafe.com/blog/dyno_alloy/

Proving My Compiler Code Incorrect With Alloy   tl;dr

11 Jun 2011

https://charlesleifer.com/blog/asyncio/

On Python asyncio: "Why I hate it ..."

     The main problem, in my point-of-view, is that in order to utilize
    asyncio's power, every layer of your stack must be implemented with
    asyncio in mind. As a result, popular and mature libraries like psycopg2,
    pymysql and redis-py either do not work, or must provide a parallel
    "async-friendly" implementation. redis-py does this for example, and the
    result is on the order of 5,000 lines of nearly-duplicate code to provide
    an async-friendly implementation of a Redis client (instead of "def" it's
    "async def" everywhere).

via https://news.ycombinator.com/item?id=36269266 6 comments not useful

but later

https://news.ycombinator.com/item?id=36277089 8 comments, one recommends:

https://charemza.name/blog/posts/python/asyncio/I-like-python-asyncio/

Better by Design
Teenage Engineering OP-1: The micro synth with massive impact
https://www.betterbydesign.cc/p/teenage-engineering-op-1-the-micro

via https://news.ycombinator.com/item?id=36266734 53 comments

replygirl:
    In my anecdotal experience, most everyone who buys a Teenage Engineering
    synth uses it for a month or two to record about an album's worth of demos
    then either leaves it on a shelf or sells it to get something else.

14 Jun 2023

https://github.com/olofk/serv

SERV is an award-winning bit-serial RISC-V core

In fact, the award-winning SERV is the world's smallest RISC-V CPU.


Systems using SERV:

  Litex is a Python-based framework for creating FPGA SoCs. SERV is one of the
  30+ supported cores. A Litex-generated SoC has been used to run DooM on
  SERV.

https://github.com/enjoy-digital/litex

15 Jun 2023

https://www.theoremoftheday.org/Resources/Bibliography.htm

Theorem of the Day bibliography - huge!  also

https://www.theoremoftheday.org/Theorems.html

266 entries

https://www.theoremoftheday.org/Resources/Mathematicians.html

Index of Mathematicians - must be hundreds - hover over each link
for more - 

https://math.andrej.com/2012/11/08/how-to-implement-dependent-type-theory-i/

Uses O'Caml - links to similar page by other authors that uses Haskell.


	Python GUIs
https://news.ycombinator.com/item?id=36329507

88 comments, many recommendations, more useful than the article it comments on.


18 Jun 2023

https://github.com/Wren6991/PicoDVI

Bitbanged DVI on the RP2040 Microcontroller

    "Everything we have done is software defined -- there's no video hardware
    on this chip."

via https://github.com/fruit-bat/pico-zxspectrum

48k/128k ZX Spectrum for Raspberry Pico Pi RP2040

DVI over HDMI (Wren's Amazing PicoDVI)


19 Jun 2023

https://github.com/minimaxir/simpleaichat

    simpleaichat is a Python package for easily interfacing with chat apps
    like ChatGPT and GPT-4

via https://news.ycombinator.com/item?id=36393782 15 comments after 3 hours


22 Jun 2023

https://benhoyt.com/writings/python-api-design/

Designing Pythonic library APIs

comments in https://news.ycombinator.com/item?id=36383432
just 3 comments but long and substantive.


25 Jun 2023

At Ada's yesterday, skimmed the book Effective Python, 2e, 2018, for Python 3.7..

https://effectivepython.com/ - with toc etc.  Kindle version available, cheaper.


https://www.lostretrotapes.com/building-a-new-zx-spectrum-from-all-new-parts-mostly-part-1/


Building a new ZX Spectrum from all new parts - lots of pages with details,
pictures, video

via https://news.ycombinator.com/item?id=36458849, 28 comments,
refs to ZX docs and articles etc.


https://interrupt.memfault.com/blog/emulating-raspberry-pi-in-qemu

Emulating a Raspberry Pi in QEMU


https://120years.net/wordpress/

120 Years Of Electronic Music.


27 Jun 2023

https://news.ycombinator.com/item?id=36436088
 	
            The Mellotron, an electronic keyboard of recorded samples, changed
    pop music (jstor.org)

66 comments, many links to technical articles and also recordings.


https://thesloth.me/posts/5/

I built Linux from scratch

"it took me 15-20 hours in total to complete the build throughout a few days."

via https://news.ycombinator.com/item?id=36493422 27 comments, 
others who tried it.


https://docs.micropython.org/en/latest/genrst/index.html

MicroPython differences from CPython

via https://www.bitecode.dev/p/whats-the-deal-with-cpython-pypy
which discusses many Python implementations


29 Jun 2023

Systems We Love: How the Past Informs Our Present 
https://thenewstack.io/systems-we-love/

About a Dec 2016 conference, via https://news.ycombinator.com/item?id=36510176
from yesterday.  Links to:

https://blog.bradfieldcs.com/all-the-talks-from-systems-we-love-debcd9cffca
Summary of each talk with link to its video

https://brown-cs1690.github.io/brown-cs167-s23/#/lectures 
about the Weenix student operating system: slides, notes, recordings

https://brown-cs1690.github.io/brown-cs167-s22/content/169.pdf
Students' experiences in Brown CS167

https://pdos.csail.mit.edu/6.828/2016/overview.html
6.828 Operating Systems Engineering - Learn by Doing

     The lectures are organized in two main blocks. The first block
introduces     one operating system, xv6 (x86 version 6), which is a re-
implementation of     Unix Version 6, which was developed in the 1970s.

The second block of lectures covers important operating systems concepts
invented after Unix v6. We will study the more modern concepts by
reading research papers and discussing them in lecture. You will also
implement some of these newer concepts in your operating system.

The operating system you will build, called JOS, will have Unix-like
functions (e.g., fork, exec), but is implemented in an exokernel style
(i.e., the Unix functions are implemented mostly as user-level library
instead of built-in to the kernel).

You'll find that xv6 helps you understand many of the goals you're
trying to achieve in JOS, but that JOS occupies a very different point
in the design and implementation space from xv6.

Collectively we dedicate 6.828 to the memory of Josh Cates; We hope that
many students will be inspired by Josh's enthusiasm for operating
systems, and have named the operating system JOS.


30 Jun 2023

https://github.com/cbiffle/lilos/blob/main/doc/intro.adoc

	Lilos: A wee async RTOS for Cortex-M 

via https://news.ycombinator.com/item?id=36494049

In Rust but a lot of the nomenclature is the same as Python async,
including 'async fn...'   The doc linked above has a lot
of explanation.

Just 6 comments but they are very complimentary.


 2 Jul 2023

https://github.com/Cacodemon345/uefidoom

A port of DOOM to UEFI systems. Tested with: QEMU with OVMF, MSI
B150M-PRO-VD UEFI firmware, a HP Pavilion 8th Gen laptop.

Lots of detailed instructions on building and running a UEFI application.

https://joonas.fi/2021/02/uefi-pc-boot-process-and-uefi-with-qemu/

Lots of details 

http://www.cs.columbia.edu/~sedwards/papers/edwards2009retrocomputing.pdf

by Stephen A. Edwards Retrocomputing on an FPGAReconstructing an 80’s-Era
Home Computer with Programmable Logic


https://virtuallyfun.com/2023/07/01/64bit-computing-on-a-budget/

Running Windows on a cell phone - getting it installed and booting it

via https://news.ycombinator.com/item?id=36560242 57 comments
with advice on using an old phones as servers/workstations


https://blog.miguelgrinberg.com/post/building-a-toy-programming-language-in-python

via https://news.ycombinator.com/item?id=36562432 42 comments
links to similar projects

 
 8 Jul 2023

https://andrewodendaal.com/mastering-pythons-yield-a-comprehensive-guide-to-advanced-usage/

via HN but no comments after 9 hours.


 9 Jul 2023

http://forum.ulisp.com/t/an-arm-assembler-written-in-lisp/1237

Interesting page design too

links to http://forum.ulisp.com/t/a-graphical-text-editor-in-ulisp/1139

source code at https://github.com/andreer/PotatoP/blob/main/lisp/typo2.lisp

video of typo at https://www.youtube.com/watch?v=W_9N8apYEjc

his homemade lisp computer https://hackaday.io/project/184340-potatop

all via https://news.ycombinator.com/item?id=36646277

30 comments, reminiscing and links about many assemblers in Lisp.


15 Jul 2023

https://github.com/buriy/python-readability

fast python port of arc90's readability tool, updated to match latest
readability.js!


https://news.ycombinator.com/item?id=36673945
MicroVM by QEMU (qemu.readthedocs.io)


https://jvns.ca/blog/2023/07/10/lima--a-nice-way-to-run-linux-vms-on-mac/

Lima: a nice way to run Linux VMs on Mac

Recall HN link with alternative but couldn't find it.


http://forum.ulisp.com/t/an-arm-assembler-written-in-lisp/1237


http://forum.ulisp.com/t/a-graphical-text-editor-in-ulisp/1139


https://www.youtube.com/watch?v=W_9N8apYEjc
Programming my homebrew computer 

https://hackaday.io/project/184340-potatop
A LISP-programmable laptop with battery life measured in years


18 Jul 2023

https://martinheinz.dev/blog/101
Debugging Crashes and Deadlocks in Python using PyStack

    "PyStack is a powerful new debugger that - according to docs - "uses
    forbidden magic to let you inspect the stack frames of a running Python
    process or a Python core dump."


19 Jul 2023

https://github.com/dabeaz-course/python-mastery

I downloaded PythonMastery.pdf - 500+ slides! - a four day course

via https://news.ycombinator.com/item?id=36785005, 52 comments after 3 hours
	
sebk 1 hour ago | parent | next [–]

Beazley's Concurrency From the Ground Up is one of my favorite tech talks
ever: In about 45 minutes he builds an async framework using generators, while
live coding in an emacs screen that shows only about 20 lines and without
syntax highlighting, and not breaking stride with his commentary and engaging
with the audience.

It's 8 years old, but definitely worth a watch:
https://www.youtube.com/watch?v=MCs5OvhV9S4

 	
greatpostman 1 hour ago | prev | next [–]

David beazley, also known as the Jimi Hendrix of python

	
	
bshipp 4 hours ago | parent | next [–]

I saw his talk live in 2014 and the dude is amazing. I loved his summary of building Python libraries from the ground up during legal discovery because he discovered a hidden Python installation on the terminal his opponents gave him that allowed him to parse thousands of documents very quickly.

https://youtube.com/watch?v=RZ4Sn-Y7AP8

reply
	
	
zzbn00 4 hours ago | prev | next [–]

The author is of this course is also one one of the original authors of SWIG which got discussed here just yesterday. Two HN front pages in two days!

https://news.ycombinator.com/item?id=36769912

https://www.swig.org/guilty.html

reply
	
	
sitkack 54 minutes ago | parent | next [–]

People should not take that an endorsement of Swig.

Please use ctypes, cffi or https://github.com/wjakob/nanobind

Beazley himself is amazed that it (Swig) is still in use.


20 Jul 2023

https://github.com/ir33k/gmi100

Gemini CLI protocol client written in 100 lines of ANSI C.

Interesting for its commands, notes on motivation and implementation.

via https://news.ycombinator.com/item?id=36786239, 42 comments.

 	
dvorak_typist 17 hours ago | parent | next [–]

The way he seems to have written 'C' is to use the C preprocessor and Macros
to create a domain specific language and then write the program in that! Mind
Blown!
	
keepamovin 14 hours ago | prev | next [–]

This is cool. I asked ChatGPT4 to explain to me what it does, and it gives a
useful overview: ...
	
ir3k 10 hours ago | parent | next [–]

Wow, this is actually very good description of program flow. There are only
few small mistakes. For example:
...

sbjs 21 hours ago | prev [–]

This is the most unreadable code I may have ever seen. Congrats on
successfully writing it and getting it to work.

ir3k 21 hours ago | parent | next [–]

Yea it's very hard to read. I'm surprised that people are actually can follow
the flow and can understand dirty tricks.

The most unreadable code would be the code that was intentionally obfuscated.
Here I at least try to pretend that it is readable in some parts.

Thanks for kind words.


21 Jul 2023

https://blog.jgc.org/2023/07/revisiting-cansole-my-silly-pong-game.html

Connecting PAL composite video output to HDMI converter, with some
voltage level shifting.

Composite output generated by TVOut, https://github.com/Avamander/arduino-
tvout/"library for generating composite video on an ATmega AVR
microcontroller."  128x96 resolution by default.

via https://news.ycombinator.com/item?id=36783062
with more on video conversion and programming cheap microcontrollers.

25 Jul 2023

https://blog.pankajgarg.com/ceed/
Ceed Ceed A Tiny Compiler with ELF & PE Target

via https://news.ycombinator.com/item?id=36851475

"Note that the 1400 LOC figure also includes the code to produce 32-bit ELF
and PE executables... in other words, the lines of solely compilation code are
significantly less...

Many ultra-small open source teaching compilers only emit intermediary code
that subsequently needs to be compiled with another utility or utilites, e.g.,
an assembler and possibly a linker.

Not this one.

Which makes it worthy of study for any would-be compiler writers, regardless
of the language that is to be compiled...

 	
foldr 2 hours ago | root | parent [–]

It is indeed quite fun and educational to figure out how to construct an
executable from scratch. I managed to do it for MachO and ELF executables a
while back, and got some 'Hello World' style programs working. Ten or twenty
years ago it would have been a bit easier, but modern executables are quite
complex – especially if you are dynamically linking libc.

As a strategy for implementing a compiler it does introduce a heavy
maintenance burden. MacOS, for example, is constantly adding new requirements
on valid executables and will often refuse to execute perfectly valid
executables from only a few versions back.


https://news.ycombinator.com/item?id=36845347
DietPi – Lightweight justice for your SBC (dietpi.com)

Lightweight Debian distro for RPi and other SBCs.


https://news.ycombinator.com/item?id=36853495
Python: Overlooked core functionalities (erikvandeven.medium.com)

The linked article does not display in my Firefox!  Some HN comments:

"I'm annoyed at the reason that any/all have to be on this list. If they (and
map, filter, …) were methods, you could just write `foo.` and your IDE could
show you what methods are available.
	
kragen 15 hours ago | parent | prev | next [–]

"any, all, map, filter, min, max, for loops, zip, list, tuple, reduce, list
comprehensions, cycle, repeat, islice, and so on in python work on iterables,
and iterable is a protocol, not a class.

movpasd 

"Some languages like D and Nim have "UFCS", uniform function call syntax,
where all functions can be called as methods on any variable. ...

 	
qsort 19 hours ago | prev | next [–]

The big missing item from the list: generators!

Using "yield" instead of "return" turns the function into a coroutine. This is
useful in all sorts of cases and works very well with the itertools module of
the standard library.

One of my favorite examples: a very concise snippet of code that generates all
primes:

  def primes():
      ps = defaultdict(list)
      for i in count(2):
          if i not in ps:
              yield i
              ps[i**2].append(i)
          else:
              for n in ps[i]:
                  ps[i + (n if n == 2 else 2*n)].append(n)
              del ps[i]

atoav 19 hours ago | parent | next [–]

And this is a presentation explaining why generators may be extremely useful
for all kind of data pipelines:
https://www.dabeaz.com/generators/Generators.pdf

If you don't know it already, it is really worth looking into. I am a python
dev with nearly a decade of experience and I knew generators, and yet this was
still an eye opener.

 	
TrianguloY 18 hours ago | parent | prev | next [–]

But wait, there's more, you can send data back to the function! (Will be
returned as the yield output)

https://stackoverflow.com/questions/20579756/passing-value-t...

And don't forget "yield from" (same as yielding all values in a list, but
keeps the original generator! You can send data back to the list if it is
itself another generator!)
	
luckycharms810 12 hours ago | root | parent | prev | next [–]

This is the basis of most older async frameworks (see: Tornado, Twisted). A
while ago I put together a short talk on how to go from this feature -> a very
basic version of Twisted's @inline_callback decorator.

https://github.com/ltavag/async_presentation/tree/master

pizza 13 hours ago | root | parent | prev | next [–]

Anything with feedback control. Updating a priority queue's weights, adaptive
caching, adaptive request limiting, etc. Ironically it looks like HN itself
rate limited me the first time I tried to reply lol
	
contravariant 6 hours ago | root | parent | next [–]

Best way to think about it is that a generator can throw some questions back
to the caller. It always looks a bit messy though.  (code example follows)
	
gurchik 18 hours ago | parent | prev | next [–]

I like using generators when querying APIs that paginate results. It's an easy
way to abstract away the pagination for your caller. (example with 'yield
from' fllows)
	
qsort 9 hours ago | root | parent | next [–]

... Itertools is a masterpiece of a module. It has a lot of functions that
operate on iterators and will work both on standard iterables (lists, tuples,
dicts, range(), count() etc.) and on your own generators. It forms a sort of
"iterator algebra" that makes working with them very easy.

 qsort 18 hours ago | root | parent | next [–]

> can you explain how generators work with multiprocess

The best way to think of a generator is as an object implementing the
iteration protocol. They don't really interact with concurrency, as far as
multiprocess is concerned, they're just regular objects. So the answer is that
it depends on how you plan to share memory between the processes.

 rowanseymour 19 hours ago | unvote | prev | next [–]

Since Python 3.7

  import pdb
  pdb.set_trace()

can be written as just

  breakpoint()
	
masklinn 5 hours ago | parent | next [–]

That's not entirely true, because `breakpoint` is a more general hook,
`pdb.set_trace` is just its default behaviour.

This is, if anything, better. Because that way you can e.g. replace stray
`breakpoint()` calls by warnings rather than break production :D
	
hwayne 15 hours ago | unvote | prev | next [–]

A couple people already pointed out that you can write `breakpoint()` instead
of using `pdb.set_trace()`.

Here's one more trick: you can use `pdb` to run scripts! `python -m pdb
foo.py` will run `foo.py` but trigger a breakpoint on the first error.


26 Jul 2023

https://posixcafe.org/blogs/2023/07/21/0/
NixOS + 9Front

Apparently got some Plan 9 programs working on the NixOS Linux distribution.

"And just like that I had my NixOS box mounting and authenticating like a
9front machine, all without too much fuss. The only logical next step was to
make it look like a 9front machines as well, to which I think I did a pretty
convincing job:"

(screenshot of a gray background with a few terminal windows - no 
title bars, scrollbars on the windows, just a pale blue line border.
Editor window has pale yellow background, like Acme.   He doesn't 
explain how he set this up)

Links to other OS related posts.


27 Jul 2023

https://news.ycombinator.com/item?id=36887091

It's 2023, so of course I'm learning Common Lisp (schemescape.com)

In these comments, long discussion comparing REPL and debugging
in CL vs Python.

28 Jul 2023

https://mikelevins.github.io/posts/2020-12-18-repl-driven/
On repl-driven programming

pertinent to discussion above, linked there I recall - or maybe in parent
article.


30 Jul 2023
 
https://xenodium.com/a-cure-for-javascript-fatigue/
 A cure for JavaScript fatigue?
 
Actually about emacs chatgpt-shell, including terminal window movies.

31 Jul 2023

https://news.ycombinator.com/item?id=36940871
 HN: Is anyone using PyPy for real work?

examples of scripts setting up venv to work with pip for CPython and PyPY
how to install PyPy so it works with pip and venv.


https://news.ycombinator.com/item?id=36935041


Summary:

- Python without the GIL, for good

- LPython: a new Python Compiler

- Pydantic 2 is getting usable

- PEP 387 defines "Soft Deprecation", getopt and optparse soft deprecated

- Cython 3.0 released with better pure Python support

- PEP 722 – Dependency specification for single-file scripts

- Python VSCode support gets faster

- Paint in the terminal 

Very long discusson of multitasking and processes with Python

https://github.com/1j01/textual-paint

Textual Paint

MS Paint in your terminal.

This is a TUI (Text User Interface) image editor, inspired by MS Paint,
built with Textual.

Python 3.10 or later is required....


https://healeycodes.com/running-untrusted-python-code
Running Untrusted Python Code

includes link to https://lwn.net/Articles/574215/
The failure of pysandbox


 1 Aug 2023

Bridging the Python async gap from the other side
https://death.andgravity.com/asyncio-bridge

"So, you're doing some sync stuff.

But you also need to do some async stuff, without making everything async."

via https://news.ycombinator.com/item?id=36955019

 Spivak 3 hours ago [–]

As someone who has fought these battles before this is a great article that
wound up almost exactly where I did. Honestly glad to have some validation
that there really wasn't an easier way.

The asyncio models changes so fast that a lot of older examples and
documentation is no longer the blessed way to do things.

 4 Aug 2023

Learn by reading code: Python standard library design decisions explained
https://death.andgravity.com/stdlib

Discusses stdlib modules: statistics pathlib dataclasses graphlib


https://wiki.alopex.li/CommonLispThoughts

via  	
https://news.ycombinator.com/item?id=36992678
	Common Lisp: The Good, the Bad, the Ugly, the Legacy, the Ambivalent (alopex.li)


Pico serial bootloader
https://blog.usedbytes.com/2021/12/pico-serial-bootloader/

for the Raspberry Pi Pico (RP2040)

"The RP2040 has a built-in boot ROM with a USB bootloader, which allows the
chip to show up as a USB flash drive for uploading code. ..."

Lots of details on RP2049 boot process.

via https://news.ycombinator.com/item?id=36957161
with lots of comments about how great the RP2040 is, compared to ESP32


 8 Aug 2023

https://kenschutte.com/python-swap-ints/

swap_8_and_9: How a simple import can modify the Python interpreter

via https://news.ycombinator.com/item?id=37058278

" 	
knome 53 minutes ago | unvote | parent | next [–]

    cpython caches the small integers, and this is just grabbing a reference
    to 8 and 9 and then altering the value of the integer held in each cached
    reference.

    The author could have skipped the c library and used the ctypes module to
    munge the bits.

    There's no guarantee that any other version of python would use the same
    caching, same structure layout and certain not be able to link with the
    same c library.

    So, yeah, it's specific.

    A fun little adventure into how things work for the author, though.


10 Aug 2023

https://www.trickster.dev/post/back-to-the-terminal-the-new-era-of-cli-and-tui-software/

Back to the terminal: the new era of CLI and TUI software

    Carbonyl is a Chromium fork that is a modern take on TUI-based web browser
    idea. .

Also HTTPie, TermShark, many other TUI programs.


11 Aug 2023

https://runyourown.social/

"How to run a small social network site for your friends"

 July 8, 2019 (updated August 31, 2019)

It's based on a Mastodon instance.   See Julia Evan's very recent
article linked below.

https://criticalengineering.org/courses/othernet/
OTHERNET WORKSHOP
Run your own server. Re-engineer the web.
 [2016] criticalengineering.org

Seems the last workshops were given in 2014.  No mentions since then.


https://sandstorm.io/
Sandstorm is an open source
platform for self-hosting web apps

https://sandstorm.io/news/2019-09-15-shutting-down-oasis
    On December 31st, 2019, Sandstorm’s paid hosting service, Sandstorm Oasis,
    will begin winding down.

Sandstorm, as a company, mostly shut down two years ago. ...


https://sandstorm.io/news/2020-02-03-reviving-sandstorm

    About two months ago, Lyre Calliope sent an email to the sandstorm-dev
    mailing list, starting a discussion on how to get the project moving
    again....

via https://news.ycombinator.com/item?id=22231922  115 comments on
    alternatives, experiences
	
augustl on Feb 4, 2020 | unvote | prev | next [–]

    I hope we never stop trying to find a solution to what just _has_ to
    happen some day: everyone should have their own server.

    If I make an app, I can safely assume that the user has a bank account, an
    e-mail address, etc. What would happen to the app economy if we could also
    assume that the user had a server? Imagine all the apps that would be made
    possible if the app makers didn't have to pay for and scale a back-end
    service!

    Sandstorm.io, https://solidproject.org by Tim Berners-Lee, many people
    have tried, hopefully someone will succeed.
	
olah_1 on Feb 4, 2020 | parent | next [–]

I'm partial to Freedombox https://www.freedombox.org/
	
pjkundert on Feb 4, 2020 | parent | prev | next [–]

    The bridge between the centralized world of DNS, CAs, server hosting,
    etc., and decentralized world is being developed: https://holo.host.

    It’s a stepping stone to fully decentralized distributed applications
    where every user is also a host of a full node.


https://sandstorm.io/news/2014-07-21-open-source-web-apps-require-federated-hosting

Open Source Web Apps Aren't Viable; Let's Fix That
We’re making decentralized hosting viable

Someone else called this "The Sandstorm Manifesto"


12 Aug 2023

https://jvns.ca/blog/2023/08/11/some-notes-on-mastodon/

Notes on using a single-person Mastodon server

via https://news.ycombinator.com/item?id=37099761 16 comments on alternatives,
caveats, etc.

I reviewed all these host-your-own posts in response to two recent articles on
Urbit (and its new rival Plunder) and the HN threads:
(Urbit bills itself as 'your personal server')

https://gist.github.com/wicrum-wicrun/b308b298721ccbe0de9c6c73a6ee4242
Plunder and Urbit

via https://news.ycombinator.com/item?id=37057471  88 links

https://rovnys.cataphract.us/response-to-wicrum-wicrun
How I Learned to Stop Worrying and Love the Kernel

via https://news.ycombinator.com/item?id=37068091 1 comment, the above link.

These also turned up on HN today:

https://seb.jambor.dev/posts/understanding-activitypub/
May 9, 2023
Understanding ActivityPub Part 1: Protocol Fundamentals 

https://seb.jambor.dev/posts/understanding-activitypub-part-2-lemmy/
July 18, 2023
Understanding ActivityPub Part 2: Lemmy 

    At first sight, Mastodon and Lemmy look fairly different, so it might be
    surprising that they are based on the same underlying protocol. Not only
    that, they can talk to each other, show each other’s messages and more. In
    this post, we will see how this works.

https://seb.jambor.dev/posts/understanding-activitypub-part-3-the-state-of-mastodon/

August 12, 2023
Understanding ActivityPub Part 3: The State of Mastodon 

all via https://news.ycombinator.com/item?id=37104275   2 comments

On a completely differnt note ...

https://proofassistants.stackexchange.com/questions/43/proof-assistants-for-beginners-a-comparison
Proof assistants for beginners - a comparison

Asking for "The Python of proof assistants"

Mentions of  Lean, Coq, Agda, Idris, 'The Incredible Proof Machine'
Isabelle/HOL


13 Aug 2023

https://news.ycombinator.com/item?id=37086455
comments on Every phone should be able to run personal website (rohanrd.xyz)

Lots of web hosting options discussed.


https://av.tib.eu/media/20027
Message-passing concurrency for Python

video from Europython 2014 but long text explanation on that page.

    "this talk will give an overview of various forms of message-passing
    concurrency which have become popular in languages like Scala and Go. A
    Python library called python-csp which implements similar ideas in a
    Pythonic way will be introduced and we will look at how this style of
    programming can be used to avoid deadlocks, race hazards and "callback
    hell".

https://github.com/spandanb/learndb-py
 (RDBMS) (sqlite clone) from scratch.  In pure Python.

via https://news.ycombinator.com/item?id=37114141

https://www.leshenko.net/p/ugit/#
ugit: DIY Git in Python


15 Aug 2023

https://picolisp-explored.com/picolixp-explored-on-coroutines
PicoLixp Explored: On Coroutines

These look a lot like Python generators.  Nice explanations.

    "Coroutines are a type of programming construct that aim to achieve
    concurrency in programming without using threads or processes. The key
    idea of coroutines is that their execution can be paused and resumed at
    specific points during their execution, allowing other coroutines to run
    in the meantime. This requires that the local environment as well as the
    state of control of the function are preserved while the coroutines are
    stopped.

    One of the benefits of coroutines is that they can be used to write
    asynchronous code in a more sequential and readable manner, compared to
    other concurrency models such as threads or callbacks.

    We need two functions to create a coroutine in PicoLisp: co to initiate
    the coroutine, and yield, which controls when the function is stopped and
    resumed.

via https://news.ycombinator.com/item?id=37119623 but nothing there.


18 Aug 2023

https://github.com/armoar334/haste

haste is a text editor built in pure bash

586 lines (532 loc)


20 Aug 2023

https://www.jiristepanovsky.cz/project.php?p=23cpu

16-bit Serial Homebrew CPU - 2023

Fits on one narrow solderless breadboard.

    "a 16-bit Serial CPU with only 8 ICs, including memory and clock. It has
    128kB SRAM, 768kB FLASH, and can be clocked up to 10MHz. It contains only
    a 1-bit ALU, but the majority of its 52 instructions operate on 16-bit
    values (serially). At its maximum speed, it executes roughly 12k
    instructions per second (0.012MIPS) and, among other things, is capable of
    streaming a video on PCD8544 based (Nokia 5110) LCD at ~10 FPS.

Display and electronics fits on another narrow breadboard.

Article has lots of design details and links to several other minimal 
computers.

via https://news.ycombinator.com/item?id=37203067

22 Aug 2023

https://news.ycombinator.com/item?id=37205536

comments on Unix is both a technology and an idea

Some discussion of tools for getting to a Unix-like terminal and shell
on an Adroid phone:  'USB developer tools' 'developer mode' 'Termux'


https://www.scattered-thoughts.net/writing/focus-intro/

Focus: intro

    It's a huge project to write a text editor that people will actually use,
    but it turns out to be fairly easy to write a text editor that only one
    person will use.

        I followed a list of design principles, some of which are strongly
    counter to the prevailing tech-blogger wisdom on how to write good
    software, which I think are worth putting to the test publicly.

        Only solve problems that I actually have eg ascii-only rendering
    because I don't have any non-ascii files on my hard-drive

        Hardcode everything rather than wasting complexity on configuration or
    extensibility

        Avoid callbacks, function pointers and polymorphism - optimize for
    being able to follow the entire control flow with go-to-definition

        Make control flow tree-like where possible - things lower down in the
    hierarchy are not allowed to call back into things higher up in the
    hierarchy

        Centralize decisions in one place rather than relying on the order of
    side-effect in multiple places (eg appending callbacks onto a list at
    runtime)

        Do the dumbest possible thing until brute force has been proved not to
    work

        Plan performance for specific numbers eg expect code files to be <=2mb
    (my work journal is ~1.5mb, the zig compiler has several files ~300kb,
    codemirror output is ~400kb)


https://www.scattered-thoughts.net/writing/focus-rendering/

Focus: rendering

    First order of business is to put things on the screen. I chose to render
    to opengl rather than make a terminal app because a) I rarely need to run
    an editor over ssh b) it's hard to do smooth scrolling in a terminal app
    c) terminal protocols are insane.

    SDL is a library that abstracts over the details of various different
    windowing and input systems and makes it easy to eg open a window.
    Consuming C libraries fromm zig is amazingly easy - just add a single
    import statement and include the library when compiling.

    On startup I use freetype to generate a single bitmap containing all the
    ascii characters and then send that to the gpu. From then on I can render
    characters by just referring to their coordinates in that image.

    When I started this project I had essentially zero experience putting
    pixels on the screen. I learned a great deal from microui and from reading
    the Our Machinery blog.

    The draw call in question is glDrawElements. ...

    That's literally everything I know about opengl and I will be glad if I
    never have to touch that code again. The predominant feature of opengl is
    never telling you if you made a mistake - you have to just intuitively
    infer what you did wrong from the sullenly empty window. ...


https://blog.arduino.cc/2023/08/16/arduino-nano-esp32-becomes-a-ultra-low-powered-pocket-sized-linux-pc/


Arduino Nano ESP32 becomes an ultra-low-powered, pocket-sized Linux PC

    Naveen Kumar built an ultra-low-powered portable Linux computer based on
    the new Arduino Nano ESP32 development board.

    By modern PC standards, the ESP32-S3 microcontroller in the Nano ESP32
    board lacks both processing power and memory. But just a couple of decades
    ago, the 240MHz clock speed and 512kB of SRAM would have been considered
    respectable for a lightweight operating system.

    On the hardware side, Kumar used a Nano ESP32 along with an Arduino UNO R4
    WiFi, a CardKB mini keyboard, and a 2.8″ Adafruit TFT touchscreen. The
    Nano ESP32 acts as a headless computer, while the UNO R4 WiFi, keyboard,
    and touchscreen act as a terminal to access that computer’s command line.
    Most Linux distros wouldn’t run on an ESP32 microcontroller, because they
    expect a different architecture and instruction set. But Max Filippov
    already ported Linux to work with the Xtensa instruction set used by the
    ESP32.


23 Aug 2023

https://www.bitecode.dev/p/asyncio-twisted-tornado-gevent-walk

Asyncio, twisted, tornado, gevent walk into a bar...

    "If you have to share one CPU while waiting on the network, then the
    specialized tools for this are asyncio, twisted, trio, gevent, etc.

    Asyncio is the current standard to do this, but tornado, gevent and
    twisted solved this problem more than a decade ago. While trio and curio
    are showing us what the future could look like

    But chances are, you should use none of them."

Long article with lots of code follows.

via https://news.ycombinator.com/item?id=37226360 68 comments, some quite long
lots about gevent, greenlet, eventlet ...

Especially this:

	
	
evil-olive 16 hours ago | root | parent | next [–]

> asyncio requires you to explicitly launch a concurrent context

    `asyncio.run()` [0] was added in 3.7, and as far as I know is the current
    recommended way to do this.

    as shown in the asyncio "hello world" example [1], you can write your
    main() function to be async, and then the entire process runs
    asynchronously from the beginning.

    and as shown on that page, you can also use `python -m asyncio` to get a
    REPL with a running event loop where using `await` will work as you'd
    expect it to.

    one of my biggest quibbles with a lot of asyncio demo code snippets is the
    use of `loop.run_until_complete()` [2] and similar lower-level primitives.
    in most asyncio applications you simply want to start the loop as early as
    possible with `asyncio.run(main())`, let it run for the duration, and have
    the entire process exist in async-land.

0: https://docs.python.org/3/library/asyncio-runner.html#asynci...

1: https://docs.python.org/3/library/asyncio.html

Lots of instructions and links in [1].

asyncio provides a set of high-level APIs to:

        run Python coroutines concurrently and have full control over their
    execution;

Additionally, there are low-level APIs for library and framework developers to:

    create and manage event loops, which provide asynchronous APIs for
    networking, running subprocesses, handling OS signals, etc;

You can experiment with an asyncio concurrent context in the REPL:
>>>

$ python -m asyncio
asyncio REPL ...
Use "await" directly instead of "asyncio.run()".
Type "help", "copyright", "credits" or "license" for more information.

import asyncio

await asyncio.sleep(10, result='hello')
'hello'

This all looks very interesting - will have to get to non-blocking 
editor soon.

2: https://stackoverflow.com/questions/40143289/why-do-most-asy... 

Here are 0 and 2:

[0] https://docs.python.org/3/library/asyncio-runner.html#asyncio.run

Running an asyncio Program

asyncio.run(coro, *, debug=None)

    Execute the coroutine coro and return the result.

        This function runs the passed coroutine, taking care of managing the
    asyncio event loop, finalizing asynchronous generators, and closing the
    threadpool.

        This function cannot be called when another asyncio event loop is
    running in the same thread.

        If debug is True, the event loop will be run in debug mode. False
    disables debug mode explicitly. None is used to respect the global Debug
    Mode settings.

        This function always creates a new event loop and closes it at the
    end. It should be used as a main entry point for asyncio programs, and
    should ideally only be called once.

    Example:

    async def main():
        await asyncio.sleep(1)
        print('hello')

    asyncio.run(main())

    New in version 3.7.

    Changed in version 3.9: Updated to use loop.shutdown_default_executor().

        Changed in version 3.10: debug is None by default to respect the
    global debug mode settings.

    [2] https://stackoverflow.com/questions/40143289/why-do-most-asyncio-examples-
    use-loop-run-until-complete

https://news.ycombinator.com/item?id=37210146

	How to use a Breadboard. How do breadboards work? (2021) [video]

44 comments, some quite long.  Lots of warnings about the unreliabitity
of solderless breadboards, lots of advice on building circuits.


https://github.com/Ruddle/Fomos

Experimental OS, built with Rust

All apps run in an async loop

Cooperative scheduling (apps yield control as much as possible)

No context switch once booted

    In Fomos, an app is really just a function. There is nothing else ! This
    is a huge claim. An executable for a Unix or Windows OS is extremely
    complex compared to a freestanding function.

etc.

There is a brief video of the tasks running in a GUI desktop 
No explanation of how you run this demo.   Is it running in a VM?
Is it booting on a bare machine?  Is it just a Rust application program
running on some standard OS, where Fomos is just using the Rust libraries
and runtime?

The build.sh script has several 'cargo build' commands and ends with
'cargo run' - I think it's just building and running a Rust application
program.

BUT there is a bootloader/build.rs that builds UEFI and BIOS disk images - !?
there is also bootloader/kernel/src/main.rs that refers to lots of low
level stuff.   So maybe there is more here.  No explanations given.

via https://thomassimon.dev/ps/3

The flat OS kernel utopia by Thomas Simon

Added Fomos to Piety/doc/precursors.md


25 Aug 2023

https://journal.infinitenegativeutility.com/leaving-haskell-behind
Leaving Haskell Behind

Good explanation of Haskell language advantages and disadvantages.

via https://news.ycombinator.com/item?id=37246932  366 comments!

Comments mostly about package managers and build systems in many languages - 
many many comments about Python development, for example.

Many comparisons to other languages.  Most comments are not about the 
technical language issues discussed in the orginal blog post, but are
about tooling issues in many languages other than Haskell.


26 Aug 2023

https://news.ycombinator.com/item?id=37232626
	Resistor–transistor logic

32 comments on digital hardware.

 	
kragen 9 hours ago | unvote | root | parent | prev | next [–]

    diodes are cheaper, smaller, and easier to solder than transistors; ttl
    took off with integrated circuits

    ttl was the default choice for building discrete logic circuits until
    about 01980, after which point it was obsolete because cmos (74hcxxx, not
    cd4xxx) was better in every way except esd

    if you're running an educational computer lab on a tight budget, esd is
    still the dominant consideration, because students will burn out all your
    cmos chips with static after only a few dozen uses, while ttl chips will
    survive most of their mistakes

    but outside a circuit lab or possibly repair of 40-year-old devices
    there's no reason to use ttl


https://news.ycombinator.com/item?id=37257218
 	
Os.js - 
js – open-source JavaScript web desktop platform with a window manager (os-js.org)

Os.js -

170 comments!  Links to many similar systems - this is a whole genre
 	
SeanAnderson 23 hours ago | prev | next [–]

    I would've guessed the entire thing rendered in canvas, but no, it uses
    HTML and just uses a canvas for stuff like the paint program.
	
DustinBrett 11 hours ago | parent | prev | next [–]

    Indeed HTML can do it all! My desktop environment uses semantic HTML when
    possible and modern CSS such as grid to handle the icon grid.
	
lvncelot 20 hours ago | parent | prev | next [–]

    This was the first thing I checked, too. It's really nice to see that it's
    HTML down to even the color input sliders/ranges.


https://rmkit.dev/eink-is-so-retropunk/
E-ink is so Retropunk

via https://news.ycombinator.com/item?id=37272652 273 comments

Lots about differnent e-ink devices, software etc.


http://binstock.blogspot.com/2021/08/a-whole-new-project-jvm.html
A Whole New Project: A JVM

    The specs for much of the JVM are published in detail and updated by the
    Java team at Oracle with every new release. You can find them here. On the
    basis of these docs alone, the JVM is the best documented virtual machine
    in commercial use. There are many additional resources available, such as
    the excellent articles by Ben Evans and Aleksey Shipilev (both of Red Hat)
    on how the innards of the JVM work. And, I should add the source code to
    the JVM is publicly available.

There are links to the sources embedded in this paragraph.

via https://news.ycombinator.com/item?id=37247394  175 comments


29 Aug 2023
 	
https://news.ycombinator.com/item?id=37293002
 HN: My mother is slowly losing her eyesight, how to prepare?

Seen as I recover from surgery for retinal detachment.
I hope I don't need this!


https://indianexpress.com/article/technology/techook/how-to-set-up-a-
    smartphone-for-elderly-and-parents-a-complete-guide-8911629/

How to set up a smartphone for elderly and parents: A complete guide


https://news.ycombinator.com/item?id=37264149
 does all() return True if the iterable is empty? 


https://news.ycombinator.com/item?id=37271644
	Kraftwerk issued their own pocket calculator synthesizer (2019) (openculture.com)


links to Kraftwerk concerts and other pocket synthesizers including

other calculators (cheap) and Teenage Engineering toys (expensive)


30 Aug 2023

https://cheats.rs/

Rust Language Cheat Sheet



https://news.ycombinator.com/item?id=29971982

 Charisma Machine: The life, death, and legacy of One Laptop per Child (morganya.org)

lmns on Jan 18, 2022 | root | parent | next [–]

    It is different. I can run a Debian VM with GUI applications on any recent
    x86 Chromebook. It's pre-installed and supported.
	

staticassertion on Jan 18, 2022 | root | parent | prev | next [–]

    It is so, so fundamentally different. It has been over a decade.
    Chromebooks today run debian. I've got a debian shell right now where I'm
    working with intellij.
 	
staticassertion on Jan 18, 2022 | root | parent | next [–]

    What's different is that ChromeOS was an alpha OS 12 years ago and
    obviously is radically different today. One major difference is that you
    can run a full debian environment.

Is this for real?  Apparently yes!

https://support.google.com/chromebook/answer/9145439?hl=en

Set up Linux on your Chromebook


 2 Sep 2023

https://news.ycombinator.com/item?id=37356909

 	
	Internals of async / await in JavaScript 

Includes thread on generators in Python, including explanations 
and also examples of where they are useful.

 littlestymaar 6 hours ago | unvote | parent | prev | next [–]

    I think seeing generators as special functions makes them feel more magic
    than what they really are: generators are nothing more than a syntactic
    sugar for objects with a “call” method that will change the values of the
    private fields in this object, that's why you can call it repeatedly with
    different results.

    Some patterns become easier to write with the generator syntax, but it's
    not really adding expressive power. (Unlike futures for instance)


 3 Sep 2023

https://davidvujic.blogspot.com/2022/07/just-use-dictionaries.html
Just use Dictionaries 

... as an alterative to classes and objects.  Coincidentally to
our Piety/editors/HOW.md.

via https://news.ycombinator.com/item?id=37368645 11 comments after 12 hours


 5 Sep 2023

https://hackaday.com/2023/08/07/all-about-usb-c-example-circuits/
All About USB-C: Example Circuits

From the look of the connector, USB-C is what my new phone Samsung
Galaxy A03s uses.  Also the previous A02s.

via https://news.ycombinator.com/item?id=37388146 9 comments, none useful.


https://github.com/yshurik/inferno-rpi

    This is compilation of Labs “Porting Inferno OS to Raspberry Pi”. We
    decided to organize it as some set of small labs with very detailed steps
    of what is done to reach results and make everything easy to reproduce.

Lots of detail.  26 labs!  Just links to their website:

http://lynxline.com/projects/labs-portintg-inferno-os-to-raspberry-pi/

via https://news.ycombinator.com/item?id=37392184 which links to 

https://dboddie.gitlab.io/inferno-diary/index.html


https://news.ycombinator.com/item?id=37394659
Developing on and for Chromebooks is a terrible experience
    (medium.com/icwillwrite)

BUT this commenter says

	
	
nolist_policy 4 hours ago | next [–]

    Coming from linux and developing for linux, I don't share the authors
    experience.

    it works great, the linux VM is very capable with seamless file, wayland
    and X11 passtrough. Nested virtualization works too.

    Sure, it's not native but I don't see a reason why it should be.

    If you want a excellent out-of-the box (with few exceptions*) linux
    experience, buy a chromebook.

    * You're not going to get direct hardware access from the linux VM, so
    things like running wireshark on your wlan interface, mounting a harddrive
    that isn't plain exfat or ext4, etc. won't work.

Oh dear - that last paragraph means we can't plug in our FAT32 backup
hard disk.


 6 Sep 2023

https://vgel.me/posts/c500/
Writing a C compiler in 500 lines of Python 

via https://news.ycombinator.com/item?id=37383913

Recursive descent, single pass, emit code as you go, no AST.

Subset - no records, no preprocessor, ...


https://raspberrytips.com/raspberry-pi-images-list/
Raspberry Pi Images: The ultimate list with download links


 7 Sep 2023

https://lwn.net/Articles/942767/
Python is (mostly) made of syntactic sugar

summary and links to 

https://snarky.ca/tag/syntactic-sugar/

this page is links to a series of blog posts by Python core developer
Brett Cannon, summarized at

https://snarky.ca/mvpy-minimum-viable-python/

    Over 32 posts spanning well over 2 years, this is the final post in my
    blog series on Python's syntactic sugar. I had set out to find all of the
    Python 3.8 syntax that could be rewritten if you were to run a tool over a
    single Python source file in isolation and still end up with reasonably
    similar semantics (i.e., no whole-program analysis, globals() having
    different keys was okay, don't care about performance). Surprisingly, it
    turns out to be easier to list what syntax you can't rewrite than re-
    iterate all the syntax that you can rewrite!

    Integers (as the base for other literals like bytes)
    Function calls
    =
    Function definitions
    nonlocal
    return
    yield
    try/except
    raise
    while

    All other syntax can devolve to this core set of syntax. I call this
    subset of syntax the Minimum Viable Python (MVPy) you need to make Python
    function as a whole. If you can implement this subset of the language,
    then you can do a syntactic translation to support the rest of Python's
    syntax (although admittedly it might be a bit faster if you directly
    implemented all the syntax.)


https://bbc.github.io/cloudfit-public-docs/asyncio/asyncio-part-1.html
Python Asyncio Part 1 – Basic Concepts and Patterns

via https://news.ycombinator.com/item?id=37424191 but no comments after 9 hrs.


 8 Sep 2023

How do the different [social web] protocols compare?
https://fed.brid.gy/docs#compare

via https://news.ycombinator.com/item?id=37439550, no comments after 1 hour

Tables etc. compare IndieWeb, ActivityPub + WebFinger, AT Protocol, Nostr


 9 Sep 2023

https://hackaday.com/2023/03/20/the-rise-and-eventual-fall-of-the-sim-card/
The Rise And (Eventual) Fall Of The SIM Card

https://brailleinstitute.org/freefont
Atkinson Hyperlegible Font

new typeface – greater legibility and readability for low vision readers

This web site has lots of resources to help people with limited vision to read.


11 Sep 2023

https://github.com/linkedin/school-of-sre

    Site Reliability Engineers (SREs) sits at the intersection of software
    engineering and systems engineering.

    At LinkedIn, we are using this curriculum for onboarding our non-
    traditional hires and new college grads into the SRE role.

This is a Linux system adminstration course.
The topics you would expect, also "Containers and orchestration",
Python and Flask etc.

via https://news.ycombinator.com/item?id=37451715  58 comments
	
walth 1 day ago | prev | next [–]

    These guides are so basic it's remedial for anyone with experience in this
    role, but highlights the problems of finding someone on the market that is
    exceptional in such a multitude of skillsets.
	
nskallajrbr 1 day ago | prev | next [–]

    That's not onboarding, it's training.

    SRE onboarding is about showing how everything connects, SLAs, lifecycle
    management, etc. Essentially, anything you wouldn't put in a public
    repository


https://news.ycombinator.com/item?id=37470318
Ask HN: Why did Visual Basic die?  207 comments after 3 hours

It seems WinForms + C# is the nearest replacement in the MS world but
it's not as convenient as VB6, and now it too is very old and has been
superceded by other MS products - which are even harder to use.

Many comments said VB6 was largely replaced by web applications in HTML + JS.
BUT that is much much harder to use.

There is a comment by moderator dang with links many other VB threads,
including 

    Something Pretty Right: The History and Legacy of Visual Basic -
    https://news.ycombinator.com/item?id=35192913 - March 2023 (259 comments)

    RAD Basic – Compatible with Visual Basic 6 projects -
    https://news.ycombinator.com/item?id=31282195 - May 2022 (208 comments)

    Ask HN: Modern, easy-to-start with alternatives to Visual Basic -
    https://news.ycombinator.com/item?id=30606244 - March 2022 (11 comments)

    Ask HN: What is the modern equivalent of Visual Basic? -
    https://news.ycombinator.com/item?id=20548849 - July 2019 (10 comments)

and many more.  Also this:

 mamcx 1 hour ago | prev | next [–]

    The reason is even bigger than just VB.

    MS at the time just decide to fully kill the "enthusiast" developer and
    the "single/truly small" team developer. This is mostly covered under the
    "RAD" umbrella.

    It kills VB, FoxPro, and now more evidently, Access (more like let it
    slowly die).

    .NET + Visual Studio + Sql Server are not a substitute in this market.
    Them are for "professional developer"/"a small cog in a big machine".


https://www.androidauthority.com/state-of-usb-c-870996/
It's 2023 and USB-C is even more of a mess

via https://news.ycombinator.com/item?id=37476716  4 comments after 12 hours.
	
akasakahakada 11 hours ago | prev [–]

    Type C cable come with my external SSD won't transfer data with my phone.

    20Gbps Type C cable that I brought for my phone won't transfer data with
    my external SSD.

    Type C cable come with LG and Dell monitor are compatible with everything
    include Macbook.

    But Apple monitor work exclusively for Apple computer. Phone screen
    output? Nope. Tablet screen output? Nope.

    I have no clue what is going on.
	
martin8412 3 hours ago | parent [–]

    The newer Apple monitors use Thunderbolt 3, so unless your computer
    supports video output over TB3 on the USB-C port, it won't work. Macbook
    also supports video output using DisplayPort on the USB-C ports, so that's
    why it works with Dell and LG monitors as well as Apple monitors.


12 Sep 2023

https://astrochart.github.io/

The Completely Hackable Amateur Radio Telescope

via https://news.ycombinator.com/item?id=37465586 20 comment after 6 hours
comments on interferometry are technically informed.


13 Sep 2023

https://love2d.org/
LÖVE: a framework to make 2D games in Lua

via https://news.ycombinator.com/item?id=37494275  153 comments after 10 hours

This is the framework minimalist Kartik Agaram has been using for his
recent projects (though he didn't make a comment here.)

Many comments on using Love with Fennel:

https://fennel-lang.org/rationale

"Fennel is a programming language that runs on the Lua runtime.

Fennel belongs to the Lisp family of programming languages."


14 Sep 2023

https://caoyuan.scripts.mit.edu/ir_spec.html
A $500 DIY near-IR spectrometer that would sell for $10,000

via https://news.ycombinator.com/item?id=37498142 69 comments after 22 hrs


15 Sep  2023

https://rayanfam.com/tutorials/  Toc for several 'hypervisor from scratch'

https://rayanfam.com/topics/hypervisor-from-scratch-part-1/  8 parts in all

Didn't look that helpful.  Describes Intel VMX instructions that support
virtualization.  Related Work and References might have useful links.
Windows not Linux oriented.

via https://news.ycombinator.com/item?id=37492877 with one maybe useful commnt:

Joker_vD 7 hours ago | next [–]

    Interesting. I remember playing with VT-x using Intel's HAXM framework [0]
    that installs its own Windows driver with a much nicer user-facing API,
    basically does what the chapters 2, 3 and 4 of the tutorial end up
    implementing, so you can spin up an empty, ready to go VM already in the
    64-bit mode quite easily.

    [0] https://github.com/intel/haxm


16 Sep 2023

https://pineapple-one.github.io/#what_has_been_done

	Pineapple ONE: open-source 32 bit RISC-V CPU that you can make at home

    we chose to build a cpu only out of discrete, off-the-shelf components.
    You heard it right, there is no FPGA nor any microcontroller, there are
    just logic gates and memories. Our goal is to prove that designing a
    “modern” CPU isn’t that hard, so we have released our schematics and made
    it open source as well. You can check out our GitHub repository for more
    information.

https://github.com/pineapple-one
Open source RISC-V CPU out of discrete logic

via https://news.ycombinator.com/item?id=37535915 1 comment after 8 hours

BUT the next day, 17 Sep 2023, we find:

https://news.ycombinator.com/item?id=37532397 27 comments after 5 hours

 segfaultbuserr 2 hours ago | unvote | parent | prev | next [–]

    From the picture, the logic chips are all in SOIC packages. The use of
    surface-mount components with 4-layer PCB should already significantly
    boost routing density compared to a breadboard with DIP chips. All the
    chips can be tightly packed together.

    Furthermore, both the ALU and the Control Unit are entirely in EEPROMs.
    The ALU uses 7 ROMs [2], the Control Unit uses 3 ROMs [3], the program
    counter uses 5 ROMs [4], the bit shifter uses another ROM [5], so I
    already see 16 EEPROMs in total. This means all the discrete components
    needed for random logic are largely eliminated, consolidating possibly
    hundreds (or thousands?) of gates into just a few chips and some lookup
    tables to program. In fact anther maker already demonstrated that it's
    sufficient to design a functional CPU entirely using RAM and ROM with just
    15 chips in total. [6]

    Programmmers usually think ROMs as data storage devices, but they are also
    the most rudimentary form of programmable logic, as they transform x-bit
    of address inputs into arbitrary y-bit data outputs, so they can implement
    arbitrary combinational logic. In fact, lookup tables are the heart of
    modern FPGAs. As a result, you may argue that this means any ROM-based
    design has ad-hoc FPGAs (especially when EEPROMs are so large after the
    1980s, 64 K for 16-bit chips). But the use of Mask ROMs and PLAs in
    Control Units has always been a legitimate and standard way to design CPUs
    even back in the 70s, so I won't call it "cheating" (and using ROMs for
    ALUs or Control Unit wouldn't really be much different from using a pre-
    made 74181 or AMD Am2900 anyway).

Here is his ref [6].  The othr links are to pages in project github repo.

https://bailleux.net/pub/ob-project-gray1.pdf

THE GRAY-1, A HOMEBREW CPU EXCLUSIVELY COMPOSED OF MEMORY


https://www.exaequos.com/

via https://news.ycombinator.com/item?id=37533493 95 comments after 14 hours

 exaequOS - a new OS running in a web browser

Many comments from the author, baudaux

p4bl0 10 hours ago | next [–]

    Nice job! I was expecting the usual "I made a window manager in JS" type
    of web OS, but this is an actual OS as in a kernel + userland programs
    that can run on it.
	
baudaux (this is the author) 13 hours ago | prev | next [–]

    It is an OS that is able to run Unix/Linux applications locally, in a
    terminal at the moment, with a graphical environment in the near future.
    Its microkernel is compiled from C to WebAssembly thanks to emscripten

 	
baudaux 11 hours ago | unvote | parent | next [–]

    You do not need a scheduler in a web browser. In exaequos, each process is
    an iframe


17 Sep 2023

https://arbesman.substack.com/p/computation-as-philology

links to 

https://books.google.com/books?id=7VMEAAAAMBAJ&pg=PA110#v=onepage&q&f=false

LIFE magazine, Dec 6 1968, article on Herman Kahn, "I am one of the 
10 most famous obscure Americans", by William A. McWhirter


https://insanelyfree.substack.com/p/how-to-liberate-your-laptop-the-definitive
How to liberate your laptop: The definitive guide

via HN but no comments after 14 hours.

He ditched the Mac and got a used Lenovo running Linux.
He ditched the cloud.  He uses his phone for logging into the bank, etc.

Lots of details about what programs or services he uses.  
Apparenty uses Protonmail not GMail.


https://profs.info.uaic.ro/~stefan.ciobaca/lnd.html

Apparently a graphic game or exercise for making Natural Deduction proofs.
but no explanation, directions, or even a title on the page.

via https://news.ycombinator.com/item?id=37535122 no comments, no explanation
just this title:
	Natural Deduction in Logic (2015) 



https://changelog.com/posts/strange-loops-greatest-hits
Strange Loop's greatest hits

Summaries of the best talks at the Strange Loop conferences.
with links to videos of the talks, I guess.

Rich Hickey's Simple Made Easy is one of them.


https://news.ycombinator.com/item?id=37540790
Ask HN: Do I need AWS? Or am I thinking this wrong?

movedx 2 hours ago | next [–]

    > I'm keeping things simple, so I've got mostly Go services, pg + caching,
    and a svelte webapp. I deployed my Go services on a low-ish end bare metal
    provider, and for now it is fine. Deployments are triggered via scripts,
    and so far so good. Is it sexy, using all the latest and greatest tech?
    No, its just simple shell scripts. But it works?

    Don't change a thing. This is perfect.


18 Sep 2023

http://dmitrykandalov.com/coroutines-as-threads

Coroutines As Threads
May 01, 2018

    This post is part of the blogpost series explaining coroutines, how they
    implemented in various programming languages and how they can make your
    life better:

    👉 coroutines as threads 👈
    yielding generators
    async await
    call with current continuation


https://sive.rs/ti

Derek Sivers
Tech Independence

    Tech independence is not depending on any particular company or software.

    The only tools you need are the common open source basics built into any
    Linux or BSD operating system — free public-domain tools that are not
    owned by anyone, and can run on any computer.

    Learn a few of these basic tools, and you can run your own private server
    on any computer forever, for the rest of your life. Host your own website
    and email. Keep your own contacts and calendars synced with your phone.
    Back up and sync your photos, movies, and music to your own private
    storage. No more subscriptions needed.

    You can ignore all the companies offering “solutions”, even if they are
    free, because they take away self-reliance. The point is to know how to do
    it yourself, not to have somebody do it for you. It’s worth a little up-
    front work, like learning how to drive.

    Below are simple step-by-step instructions that work. Instead of drowning
    you in options, it uses an operating system called OpenBSD and a hosting
    company called Vultr because I’ve used them for years and I know they are
    good and trustworthy. But you could do this same setup with any free Linux
    or BSD operating system, with any hosting company that gives you “root”
    access to your own private server. You could even do it on an old laptop
    in your closet.

Indeed, they are step-by-step and very detailed and specific - recommends
particular hosting service, email service etc.

via https://news.ycombinator.com/item?id=37546255 66 comments after 1 day.

Some complaints that hosting it on Vultr is "not really self-hosting" - they
say you can really do it all yourself at home with built-in Linux or BSD tools.


19 Sep 2023

https://news.ycombinator.com/item?id=37564745

Links on the history of Fidonet, compiled by dang.


https://www.pdfclean.dev/blog/pdf-text-extraction

PDF to Text, done right

    Working with the PDF file itself also butchers the PDF and makes it
    impossible to use the text for AI. Using libraries like `PyPDF2` or
    `pdfium` don't have a sense of the layout of the document, and they can't
    give you the location of text. What they do do is look for all the little
    chunks of text and string the text together in the order it appears. For
    any slightly complex document layout, this results in a jumbled mess of
    text.

    So to have a truly general and sensible solution, we need to go from a
    rendered image of the PDF. Here is the strategy:

    Convert the PDF to an image
    Use Optical Character Recognition to extract the text from the image
        Use a layout analysis algorithm to determine the grouping and order of
    the text in the image

Bah!

via https://news.ycombinator.com/item?id=37570827

 jackreaper1 2 hours ago | prev [–]

    This is just a wrapper of pytesseract...
	
 dubbid 2 hours ago | parent [–]

    Not quite! This goes one step further to serialize the text for complex
    layouts in a sensible manner, using a geometry-based approach as specified
    in the blog post :)


21 Sep 2023

https://news.ycombinator.com/item?id=37575438
 	
ReinetteII+.py, an Apple II plus emulator in Python (github.com/arthurferreira2)

Didn't even look up the linked page.  Comments here link to other Python
apple/6502 emulators, criticize the technique here, offer alternatives.


 https://news.ycombinator.com/item?id=37579595
 	
	A simple web server written in Awk (github.com/crossbowerbt)

66 comments after 1 day, lots on awk, internet techniques, etc.

 NOw exit dmacs and start editing in new pmacs.

Here we are, editing in pmacs!


22 Sep 2023

https://lakesare.brick.do/lean-coq-isabel-and-their-proof-trees-yjnd2O2RgxwV
Lean/Coq/Isabel and Their Proof Trees

    This week we (me & Anton Kovsharov) published Paperproof, a Gentzen-tree-
    like proof interface for Lean 4. In this post I'll review proof
    visualisations from other proof assistants, as many as I can find.
    ...

    it seems like there are only two realistic tools for the job -
    Traf if you use Coq, and Paperproof if you use Lean 4.

via https://news.ycombinator.com/item?id=37583022 26 comments after 19 hours


https://news.ycombinator.com/item?id=37608580
    I'm fed up with it, so I'm writing a browser (adayinthelifeof.nl)

430 comments after 18 hours.  Lots of links to other homemade browser
  projects, HTML renderers, etc.


23 Sep 2023

https://popovicu.com/posts/making-a-micro-linux-distro/

https://popovicu.com/posts/risc-v-sbi-and-full-boot-process/

https://popovicu.com/posts/bare-metal-programming-risc-v/


24 Sep 2024

https://github.com/rberenguel/PiWrite

use Kindle Paperwhite as a text editor.

What?

    Have you ever wanted to use your Kindle Paperwhite to write, even more,
     with a vim-like editor? This is what PiWrite is for.

How?

    The TL;DR is a webserver running somewhere a keyboard can be plugged, and
    a page opened in the Kindle's web browser.

    The not-so-short version requires more effort and details, but is the UX I
    wanted to get:

    A Raspberry Pi Zero W
    Paired with a Bluetooth keyboard
    Set up in access point mode
    With this package installed
    And configured to start automatically on boot.

Why?

    I was inspired by SolarWriter by Michael Solomon. I had always wanted to
    use my Kindle for writing. SolarWriter solves that by setting up a local
    web server on your phone (iOS or Android), then you type with a Bluetooth
    keyboard paired with it. But you need to set up hotspot, keep your screen
    on I didn't like those parts. So I wrote this.

The github README has an embedded video demo.

via https://news.ycombinator.com/item?id=37633358  27 comments after 6 hours

Apparently the point here is that you normally *can't* make or install
your own programs on this device.   So that's why the roundabout web stuff.
Apparently it's not running locally on the paperwhite at all!

butz 3 hours ago | prev | next []

    Probably a stupid question, but does Kindle have any "native" app support?
    I'm surprised the it even has a browser. I wonder what are the
    limitations?
    
abdullahkhalids 3 hours ago | parent | next []

    Kindle does not have any native app support. But it's a linux machine. If
    you can jailbreak it (which has become increasingly harder), then you can
    write/install custom apps on it.
     
input_sh 3 hours ago | parent | prev | next []

    Nope, no app store, no way of installing apps (other than rooting a
    device).

pizzafeelsright 2 hours ago | prev | next []

    Want:  Mechanical Keyboard with an OS powering a PaperWhite screen.
     
rcarmo 2 hours ago | parent | prev | next []

    There are a few writing appliances out there trying to do that, but they
    are all based on proprietary solutions. It _might_ be possible to get a
    decent e-ink display with a passable refresh rate at non-monopolistic
    prices and bypass the Rube Goldberg-esque setup by just plugging that into
    a Pi via SPI, but right now there just aren't many options for that out
    there.


25 Sep 2023

https://blog.karthikkumar.org/usability-of-old-computers-f06a7f00f72e
Usability of Old Computers

"Take an old processor/hardware from the 90s/2000s, get it to run today. ..."

Not so easy.  Lots of details and photos.

via https://news.ycombinator.com/item?id=37622753 188 comments after 1 day

Lots of comments about need to keep old computers running in control systems,
etc.


27 Sep 2023

https://github.com/saman-pasha/LCC

    Lisp C Compiler, Lisp-like syntax for writing C code in addition of some
    forms and pointer managements.

https://news.ycombinator.com/item?id=37680352  2 comments in 6 hours including

johngossman 6 hours ago []

    As noted previously, the C# Garbage Collector was originally written in
    LISP and C++ code generated from that.

 https://news.ycombinator.com/item?id=23295041 


28 Sep 2023

https://activehistory.ca/blog/2023/09/26/bored-stiff-a-cranky-historian-on-chatgpt/

Bored Stiff: A Cranky Historian on ChatGPT

    "I did finally get around to asking ChatGPT a couple questions about
    Canadian immigration policy and about the history of temporary foreigner
    worker programs. I also asked it to write 300-word reflection papers
    on a few books by historians.

    The responses were unsurprisingly bland, full of cliches of historical
    writing: everything is "complex" and "evolving" and the result of "multiple
    factors."[1] The books were "thought-provoking", "insightful", and the products
    of "meticulous research". (With many of the terms and turns of phrase
    repeated verbatim when describing different books). While the answers to
    the broader historical questions were fairly accurate (or as accurate as
    could be reasonably expected), ChatGPTs reflections on the books were
    utterly incorrect.

    ...

    Historians, I hate to break it to you, but  much like our friends and
    family members  ChatGPT has not read our books.

    ...

     Is it possible to vomit and nod off at the same time? It sounds like a
    student in tutorial who is terrified of saying the wrong thing. ..."


29 Sep 2023

https://librepcb.org/ - PCB design tool

via https://news.ycombinator.com/item?id=37694414  155 comments after 1 day

Lots of comments from apparently experienced PCB designers.
Comparisons to kicad and horizon.


30 Sep 2023

http://www.technoblogy.com/show?3Z2Y

Lisp Badge LE

27th September 2023

        This is a self-contained low-power computer with its own display and
    keyboard that you can program in uLisp, a version of the high-level
    language Lisp for microcontrollers:

            It's based on an AVR128DB48 which provides 128K bytes of flash
    memory,
    and
    16K bytes of RAM. There's an integrated 45-key keyboard optimised for
    Lisp, using reverse-mounted buttons giving room for large key legends on
    the PCB.

        It has a low-power monochrome display, readable in daylight without a
    backlight, so it's ideal for programming in the garden or on the beach!
    This gives 10 lines of 41 characters, or graphics with a resolution of
    250x122 pixels, supported by several graphics commands.

            You can use it to run programs that interface to components such
    as
    LEDs
    and push-buttons via the I/O pins, read the analogue inputs, and operate
    external devices via the I2C and SPI interfaces.

via https://news.ycombinator.com/item?id=37682273  47 comments after 2 days

Praise for the author's other projects, info about ordering one.

https://howcpuworks.com/blogs/processsorbook/building-processors-from-the-ground-up

Building Processors from the Ground Up
August 30, 2023

    This is my processor that I built completely from transistors. (photo)

        In this interactive online book we will go in depth how I actually
    built
    it, from implementing logic gates with transistors and building registers
    to creating the instruction set and programming the hello world and even
      dinosaur game. All of the material is free!

    After you finish the book you will be able to say what every single one of
    2008 transistors do and why they do that. You will also understand why
    some architecural choices were made


 3 Oct 2023

https://github.com/orhun/daktilo

    a small command-line program that plays typewriter sounds every time you
  press a key.

via https://news.ycombinator.com/item?id=37751311  25 comments after 2 hours
     
jszymborski 22 minutes ago | unvote | prev | next []

  What I really want is a small editor that prohibits me from deleting things,
  as a typewriter dies. I switched to pen and paper for my drafts and it's all
  but ended my incessant self-editing that plagues my writing process. I'm
  sure a real typewriter would be more paper efficient.

I replied to suggest using ed or cat.


https://www.colino.net/wordpress/en/mastodon-for-apple-ii/

Mastodon for Apple II 

via https://news.ycombinator.com/item?id=37733916 47 comments after 1 day
    
kibwen 1 day ago | root | parent | next []

  Now I'm curious to know the actual difference in wall-clock time between
  decryption on a modern device and on an Apple II processor. Seconds,
   minutes, hours?
    
colinlm 1 day ago | root | parent | next []

  According to people at CryptoAncienne (https://github.com/classilla/cryanc),
  a 25MHz 68030 needs about 22 seconds of maths to handshake a modern TLS
  server. During that time, most servers close connection.

  So on an 1MHz 6502, I think it'd be minutes just for handshaking.

StillBored 21 hours ago | root | parent | next []

  Thanks for that, I was going to point out its the public key, and cert
  validation that is going to be the problem more than the actual data
  encryption. I had this problem a couple years back with a project on a
  esp8266, which was taking on the order of 5 seconds at 160Mhz to setup a TLS
  connection. And it got worse with longer key lengths, and validating a cert
  chain.

  So, ballpark it probably takes multiple minutes, and probably consumes most
  of the RAM for the intermediate steps with longer keys.

  OTOH, I switched to an ESP32 because it has RSA offload, and something like
  that could be attached to an apple ][ fairly easily, to provide a connection
  offload accelerator.
    
guestbest 1 day ago | root | parent | prev | next []

  There was a discussion about this before and from what I read TLS 1.3 isnt
  possible on an 8 bit micro like a 6502. Im assuming this is because of the
  timeout in the handshake

  https://news.ycombinator.com/item?id=32116761

 softg 1 day ago | parent | prev | next []

  Just curious, wouldn't networking be a problem as well?
    
ksherlock 1 day ago | root | parent | next []

  Ethernet cards and tcp/ip stacks are available.

  ip65 (https://github.com/cc65/ip65) for the 6502 supports 3 chips, 6 cards,
  and 3 platforms (Apple II, Atari, and C64).

  For under $5 you can buy a wiznet chip that has an onboard hardware tcp/ip
  stack.


4 Oct 2023

https://viralinstruction.com/posts/hardware/

What scientists must know about hardware to write fast code

uses Julia 

via https://news.ycombinator.com/item?id=37747822   67 comments after 1 day



https://news.ycombinator.com/item?id=37769546

    MiniOS  a lightweight Linux distribution designed for USB drive

74 comments after 8 hours, many about other small Linux distros

Somebody links to Xen Mini-OS  https://wiki.xenproject.org/wiki/Mini-OS

  "  It is mainly used as operating system for stub domains that are used for
  Dom0 Disaggregation. But it is also used as a basis for development of
  Unikernels"


 5 Oct 2023

https://popovicu.com/posts/789-kb-linux-without-mmu-riscv/

789 KB Linux Without MMU on RISC-V

Same series as linked above.  Includes section:
Building an extremely tiny Linux kernel

  If all we want is to multi-task a bit on our device, Linux is likely an
  overkill, even in a tiny deployment like this. Additionally, if were not
  leveraging any drivers from the kernel code base, its probably another
  indicator were going too heavy. I leave it to you to decide if this
  lightweight Linux deployment makes sense for your usecase or not.

  I think this finally answers my question that Ive had for a long time which
  is: what is the absolutely minimal Linux kernel? Something that runs on a
  single core, extremely simple, with as little cruft as possible, but that
  can still process some system calls and provide some sort of a filesystem.
  If anyone has been looking for this answer as well, I hope I am providing it
  correctly here.


https://github.com/gurugio/lowlevelprogramming-university

Miscellaneous link collection


 6 Oct 2023

https://news.ycombinator.com/item?id=37783081

ew | threads | past | comments | ask | show | jobs | submit     jonjacky (715) | logout
    
    ChromeOS is Linux with Googles desktop environment (aboutchromebooks.com)

Linked article is not helpful but these comments are: 175 comments in 1 day.
Lots about using Chromebook for sw development.


 7 Oct 2023

https://blog.robertelder.org/how-to-make-a-cpu/
How To Make A CPU - A Simple Picture Based Explanation

1. Get a rock
2. Smash the rock
3) Now you have 98% concentrated silicon dioxide. Purify it to 99.9% pure silicon dioxide.
4) Purify it further to 99.9999999% polysilicon metal.
Polysilicon
5) Put the polysilicon ingots into a crucible.
... picture of a kitchen pot ...
...

Each step has a photo.

"While cutting-edge nanometer scale features are not likely to be accessible
for a hobbyist, micron-scale amateur chip fabrication does appear to be quite
feasible. I have not tried this myself, but Sam Zeloof has, and you should
definitely check out his YouTube channel.  I think you could probably even
build some basic chips with far less equipment than he has if you get the
optics right. ...

A Word Of Caution:  In case it wasn't already clear, I don't advise that
anyone actually attempt making integrated circuits in their apartment in the
manner shown in this video.  The 'photoresist' and 'developer solution' in
this video is just a colored prop.  The real chemicals are usually hazardous
and you should only work with them with proper safety gear in a well
ventilated area or in a fume hood."

https://news.ycombinator.com/item?id=37976894  54 comments after 23 hours

 
https://github.com/alex028502/extra-screen
Use an old tablet as an extra monitor

via https://news.ycombinator.com/item?id=37789371  128 comments after 1 day

Discusses lots of alternatives.


 9 Oct 2023

https://dgl.cx/2023/09/ansi-terminal-security

"1m"?! ANSI Terminal security in 2023 and finding 10 CVEs

"some form of code execution was found to be possible on several common
terminal emulators across the main client platforms of today. ..."


https://retrocomputing.stackexchange.com/questions/27722/why-did-the-motorola-68000-processor-family-fall-out-of-use-in-personal-computer
Why did the Motorola 68000 processor family fall out of use in personal computers in the 21st century?

via https://news.ycombinator.com/item?id=37796292 246 comments after 2 days


12 Oct 2023

https://azeemba.com/posts/intuition-for-cryptography.html


14 Oct 2023

https://github.com/raspiduino/arv32-opt

This is a port of mini-rv32ima (a minimum RISC-V emulator, capable of booting
Linux) on atmega328p (the core of Arduino UNO, a 8-bit AVR microcontroller).

If you can run this, you probably are running world's worst Linux PC. 

via https://news.ycombinator.com/item?id=37884705

> Complete boot time (from start to shell) is about 15 hours and 44 minutes.


15 Oct 2023

https://news.ycombinator.com/item?id=37887341  100 comments after 14 hours

BeagleV-Ahead open-source RISC-V single board computer 

Comments on alternatives too.


https://blog.fponzi.me/2023-08-13-bare-metal-space-invaders.html

via https://tayfunkayhan.wordpress.com/2023/10/15/barer-metal-space-invaders/

via https://news.ycombinator.com/item?id=37893893 no comments after 4 hours
 

17 Oct 2023

https://www.usbmadesimple.co.uk/ums_1.htm
USB Made Simple 

first of 7 pages

via https://news.ycombinator.com/item?id=37887058  42 comments after 1 day

links to other USB references


https://collection.powerhouse.com.au/object/345134
 
Aim 65 Summary Card Manual

also links to other AIM 65 manuals


https://chronosphere.io/learn/2023-online-reliability-report-points-to-more-frustrating-digital-experiences/?cn-reloaded=1

"1 in 4 members of Gen Z (25%) admitting to having cried at least once when an
app or website went down."


21 Oct 2023

https://github.com/boutell/tome

"A brand new terminal-based text editor
Written in Node.js with practically no libraries (certainly no Electron)"

A Javascript console programvia https://news.ycombinator.com/item?id=37955017  just 1 comment by author.Restart editor session to start fresh with new files.Restarted editor session to get all the new files.https://news.ycombinator.com/item?id=37957397"<ESC>[31M"? ANSI Terminal security in 2023 and finding 10 CVEs (dgl.cx)  
129 comments after 1 day

https://news.ycombinator.com/item?id=37897946
C Is Not a Low-level Language (2018) (acm.org)  395 comments after 5 days

https://news.ycombinator.com/item?id=37897155
Can we build trustable hardware? (2019) (bunniestudios.com)
54 comments after 5 days

https://news.ycombinator.com/item?id=37940842
AtomVM: Erlang virtual machine for IoT devices (atomvm.net)
21 comments after 1 day.


https://voidstarsec.com/hw-hacking-lab/vss-lab-guide
 VSS: Beginners Guide to Building a Hardware Hacking Lab
discusses workbench, soldering irons, multimeter, microscope, oscilloscope,
logic analyzer, power supplies, jumpers and probes, JTAG adapters, SBCs, more.

 https://news.ycombinator.com/item?id=37977502 88 comments after 21 hours
other recommendations and advice

https://www.youtube.com/playlist?list=PLwJoKCHKYULQp8WLE2kPBhw3_6KDv8pTZ
Oberon Tutorial Videos 

23 20-min videos

Installation completes about 2 min in video 2 - explains how to use 3 
button mouse. Screen: system track on right with "viewers" (windows)
with system log on top and system tools on bottom.  Always visible.
Left side of screen has bigger track for application windows.

System tools is sort of a menu of commands.  System log acts as command line -
he types commands, but instead of RET he mouse clicks to open command
in application track.

Oberon does look ... different.  Might be informative to return to this
sometime.


22 Oct 2023

https://www.jeffgeerling.com/blog/2023/nvme-ssd-boot-raspberry-pi-5
NVMe SSD boot with the Raspberry Pi 5

How-to with pictures. 

via https://news.ycombinator.com/item?id=37972991  45 comments after 14 hours.
  
 
23 Oct 2023

https://github.com/olofk/serv

SERV is an award-winning bit-serial RISC-V core

In fact, the award-winning SERV is the world's smallest RISC-V CPU. It's
the perfect companion whenever you need a bit of computation and silicon
real estate is at a premium.

SERV, or rather the Servant SoC, can run the Zephyr RTOS. 

Don't feed serv any illegal instructions after midnight.  ...


24 Oct 2023

https://news.ycombinator.com/item?id=37982137
Building a unikernel that runs WebAssembly  part 1 (castelli.me) 

132 comments after 1 day.  More interesting than the linked article.

Lots about unikernels and other innovative/weird OS.  Also some about wasm.


http://phantomos.org/

Linked in above HN page.

"Your program will survive OS reboot. All the variables are now.. like files?"

https://phantomdox.readthedocs.io/en/latest/   

https://github.com/dzavalishin/phantomuserland/

"Phantom OS is a persistent operating system. Its primary goal is to
provide environment for programs thatsurvive OS reboot. Such an
environment greatly simplifies software development and makes it
possible to write programs that for example do not need a filesystem. ..."



https://www.starryhope.com/chromebooks/chromebook-comparison-chart/
Chromebook Comparison and 2023 Buyer's Guide

via https://ask.metafilter.com/376182/Chromebook-picker


31 Oct 2023

https://wholeearth.info/
Whole Earth Index

"Here lies a nearly-complete archive of Whole Earth publications, a
series of journals and magazines descended from the Whole Earth Catalog,
published by Stewart Brand and the POINT Foundation between 1970 and
2002. They are made available here for scholarship, education, and
research purposes."

Whole Earth Catalog, CoEvolution Quarterly, Whole Earth Review etc.
also one-of-kind publications including II Cybernetic Frontiers.

Shows covers of every publication, including every issue of the magazines.


https://github.com/cozis/microtcp

"MicroTCP is a TCP/IP network stack which I started building as a
learning exercise while I was attending the Computer Networking course ...

At this moment MicroTCP implements ARP (RFC 826, complete), IPv4 (no
fragmentation), ICMP (minimum necessary to reply to pings) and TCP
(complete but not stress-tested). ...   it's complete enough to handle
HTTP traffic on a local network (Look into examples/microhttp to know
more).

MicroTCP can run on Windows and Linux alongside the OS's network stack.
To route the network traffic to MicroTCP, the process running it behaves
as a virtual host with its own IP address. This is done using a TAP
device, which comes built-in on Linux but needs installing on Windows
...

via https://news.ycombinator.com/item?id=38086598  42 comments after 1 day
includes links to uip at Wikipedia and GitHub, another small TCP project:
 tpmx 23 hours ago | next []Something similar from... a while ago. How does it compare?ttps://web.archive.org/web/20060615041317/http://www.sics.se/~adam/uip/uIP is an implementation of the TCP/IP protocol stack intended for small
8-bit and 16-bit microcontrollers. It provides the necessary protocols
for Internet communication, with a very small code footprint and RAM
requirements - the uIP code size is on the order of a few kilobytes and
RAM usage is on the order of a few hundred bytes.
https://github.com/adamdunkels/uiphttps://en.wikipedia.org/wiki/UIP_(software)(I believe uIP was extracted and improved upon from Contiki, a C64 OS
with TCP/IP support written in C in 2002:
https://www.c64-wiki.com/wiki/Contiki)


https://www.davidsharp.com/baby/
Manchester Baby Simulator

Links to many pdf documents about Baby and the simulator

via https://news.ycombinator.com/item?id=38075973, comments  about 

https://rylandscollections.com/2023/06/21/a-new-view-of-the-manchester-computer/


 1 Nov 2023

https://news.ycombinator.com/item?id=38024047
How to make almost any computer a modern-day Plato terminal (arstechnica.com)

Linked Ars Technica article also links to earlier article on Plato itself.


https://archive.org/details/music-iv-programmers-manual

via https://news.ycombinator.com/item?id=38049813
The influential MUSIC IV by Max Mathews appeared 60 years ago (archive.org)

 
https://news.ycombinator.com/item?id=38058959 39 comments after 3 days
(learn 'scheme) (jaredkrinke.github.io)  

Links other scheme and common lisp lore, including Kent Pitman's 
:Teach;LISP from ITS.


http://oldvcr.blogspot.com/2023/10/what-kim-1-really-needs-is-lcd-screen.html
Old Vintage Computing Research 
What the KIM-1 really needs is an LCD screen 

Here's a sidecar screen for my KIM-1 that's large enough to be useful,
small enough to be portable, and efficient enough to be powered by my
unit's built-in power supply. Plus, it can be driven by the KIM-1's
unallocated I/O lines so that its 20mA current loop terminal interface
remains available, with bonus points for being self-lit so you can see
it like the LEDs. And the output driver takes up just 64 bytes of RAM.

With code for the driver and lots of photos to show how to build it.


https://news.ycombinator.com/item?id=38035672  218 comments after 2 days
Lean4 helped Terence Tao discover a small bug in his recent paper (mathstodon.xyz)
      
X6S1x6Okd1st 2 days ago | next []

He started learning lean4 with the help of GPT4 just at the start of the
month:

https://mathstodon.xyz/@tao/111208692505811257

Many of his mastodon posts this month have been about his learning
progress.

Certainly an interesting case study of how LLMs can accelerate the work
of even of the most extremely successful people


https://www.medievalists.net/2023/10/how-to-make-a-monster/
How to Make a Monster

by our Charity Urbanski!  On the occasion of her new book, Medieval Monstrosity

via https://news.ycombinator.com/item?id=38004666  14 comments in 2 days


 4 Nov 2023

https://news.ycombinator.com/item?id=38136155  15 comments after 1 day
comments on You don't need a terminal emulator  Andrey Listopadov (andreyor.st)

The original article was actually about Emacs asynch-shell-command
     
marcus0x62 6 hours ago | root | parent | next []

  The big difference, in the authors described workflow, is they are
  launching these commands on an ad-hoc basis, not from a semi-permanent
  shell. That, I would argue, is the biggest practical difference
  between what most people are doing and what the author is describing.
     
ElectricalUnion 7 hours ago | prev | next []

  What I like about the emacs buffer approach is that it approximates
  the IBM 3270 handling of terminals; still online and interactive,
  still can refresh screen every keypress "if you really really want",
  but the expected approach to interactivity is receiving and submitting
  a-whole-screen/a-whole-form of information at once.

  I really like the fact that using the CLI that way feels very 3270-ish
  web-1.0-ish, that things move when you decide so and that things
  remain static for as long as you want.


 6 Nov 2023

https://news.ycombinator.com/item?id=38161215 58 comments after 6 hours.
FPGA Dev Boards for $150 or Less (fpgajobs.com)

Many suggestions for other boards not in the linked article.
Also some suggestions for FPGA projects.


https://khalsalabs.com/hosting-a-website-on-esp32-webserver-with-microdot-step-by-step-guide/
Hosting a Website on ESP32 Webserver with Microdot: Step-by-Step Guide

  "Microdot is a lightweight Python web framework designed for light
  weight operations. It offers a minimalist yet efficient way to create
  web applications. Its light weight makes it excellent choice for
  microcontrollers like the ESP32.

via https://news.ycombinator.com/item?id=38154045  163 comments after 1 day

including lots of discussion of TLS, https vs http, certificate authorities,
etc.  Much much harder than text http.  Are they actually doing all this
on the ESP32?  
   

 7 Nov 2023

https://thetinysynth.wordpress.com/

A very tiny polyphonic FPGA-based DIY synthesizer

Small circuit board mounted on a plexiglass control panel with many knobs


https://www.dylanpaulus.com/posts/postgres-is-a-graph-database/
Postgres: The Graph Database You Didn't Know You Had


10 Nov 2023

https://news.ycombinator.com/item?id=34936729#34937433
Building a Minimalistic Virtual Machine (pointersgonewild.com) 

Discussion of UVM virtual machine - comparisons to UXN and JVM,
discussion of compilers and JIT etc.


11 Nov 2023

https://registerspill.thorstenball.com/p/playful-programming

"Last weekend I watched this video of Andreas Kling prototyping a JIT
compiler for his Ladybird browser:  (link to YouTube) ...

https://youtu.be/8mxubNQC5O8

One: if youre interested in how bytecode VMs and JIT compilers work, its
all in there, explained step by step. A goldmine, really.

Two: how Andreas builds this JIT compiler is endlessly fascinating. Its
clearly visible that hes spent thousands and thousands of hours of his
life programming. It shows up in the large (hey, he knocks out a JIT
compiler in 1.5hrs) and in the small  little tricks and moves and
shortcuts. The latter is whats so fascinating ... (many examples called out)

Then theres Copilot. Its all over the video. ... 
Very interesting to watch, especially since people claim that these
tools only make you faster when you work on boring or boilerplate code.
...

My favorite moment in the video is when Andreas fact-checks what Copilot
generated. He doesnt just fact-check by looking at the code and thinking
huh is this correct? ..."

I started to watch this video and couldn't follow it.   I didn't understand
what I was seeing - the IDE - looked like a full screen editor with a 
smaller terminal window popping up over it from time to time.  I couldn't
read the text in the editor or the terminal window.
 

https://news.ycombinator.com/item?id=38230904
Python Requests 3 (twitter.com/kennethreitz42)

links to 

https://vorpus.org/blog/why-im-not-collaborating-with-kenneth-reitz/

https://kennethreitz.org/essays/why-im-not-collaborating-with-kenneth-reitz

It seems reitz' requests library is a wrapper around urllib3.  reitz
abandoned his Requests III project to make an async requests.

'why im not...' is by Nathaniel J Smith, author of urllib3 and the Trio 
library.

Conclusions: Piety should just use urllib3 instead of requests, even if
it seems more inconvenient.  Besides avoiding the drama discussed in
these posts, it also sticks to standard Python libraries and avoids making
a dependency.


12 Nov 2023

https://html-first.com/

"HTML First

HTML First is a set of principles that aims to make building web
software easier, faster, more inclusive, and more maintainable by...

    Leveraging the default capabilities of modern web browsers.
    Leveraging the extreme simplicity of HTML's attribute syntax.
    Leveraging the web's ViewSource affordance.

...
The practices and principles described on this site are still considered
niche in the industry as a whole, and the community of people using them
small."

via https://news.ycombinator.com/item?id=38241304 81 comments after 1 hour (!)
                                                 226 comments after 5 hours

original article links to 

https://tonyennis.com/blog/M3WoiPA5P-comparing-the-readability-and-learning-curve-of-html

Comparing the learning curve of tag-based markup languages with javascript 

https://htmx.org/essays/right-click-view-source/
The #ViewSource Affordance

from the htmx website - what is htmx?


15 Nov 2023

https://news.ycombinator.com/item?id=38268462
Ask HN: How to get back to programming Python?

Lots of advice on using GPT-4 and CodeInterpreter etc., pipenv venv pip
install etc.  Also books.


16 Nov 2023

https://www.youtube.com/watch?v=HxSHIpEQRjs
Brandt Bucher  A JIT Compiler for CPython

From the 2023 CPython Core Developer Sprint

The QA section is hard to understand; turn on subtitles for our best-effort transcription. (PRs welcome: https://github.com/encukou/subtitles-...)

Links & bibliography:

Slides: https://github.com/brandtbucher/brand...

GitHub branch: https://github.com/brandtbucher/cpyth...

Haoran Xu and Fredrik Kjolstad. 2021. Copy-and-patch compilation: a fast
compilation algorithm for high-level languages and bytecode. Proceedings
of the ACM on Programming Languages 5, OOPSLA (2021).
https://doi.org/10.1145/3485513

Haoran Xu. 2023. Building a baseline JIT for Lua automatically. (12 March 2023). Retrieved from https://sillycross.github.io/2023/05/...

via https://news.ycombinator.com/item?id=38291356 - no comments after 12 hours!


17 Nov 2023

https://news.ycombinator.com/item?id=38273488   61 comments after 1 day
Bare Metal Emulation on the Raspberry Pi  Commodore 64 (accentual.com)

Lots of comments comparing FPGAs to CPUs,  Minimal linux vs libraries
for bare metal programming on RPi. This project uses the circle library
for 'bare metal' programming of RPi, which we have seen before.
Comments also mention alternatives ultibo and blink.

https://github.com/rsta2/circle

https://ultibo.org/

https://github.com/jart/blink


https://news.ycombinator.com/item?id=38309503
one comment on Red flag questions to ask in a Linux interview

Long (5 paragraph) explanation of how mainframes work, compared to containers.

'A workload on e.g. IBM z/VM is/was basically "a container"...'


18 Nov 2023

https://terrytao.wordpress.com/2023/11/18/formalizing-the-proof-of-pfr-in-lean4-using-blueprint-a-short-tour/
Terry Tao: Formalizing the proof of PFR in Lean4 using Blueprint: a short tour

" The project has been greatly assisted by the Blueprint tool, which
allows one to write a human-readable blueprint of the proof that is
linked to the Lean formalization ...
 One feature of the blueprint that I find particularly appealing is the
dependency graph that is automatically generated from the blueprint, and
can provide a rough snapshot of how far along the formalization has
advanced. ...
The color coding of the various bubbles (for lemmas) and rectangles (for
definitions) is explained in the legend to the dependency graph, but
roughly speaking the green bubbles/rectangles represent lemmas or
definitions that have been fully formalized, and the blue ones represent
lemmas or definitions which are ready to be formalized (their
statements, but not proofs, have already been formalized, as well as
those of all prerequisite lemmas and proofs). The goal is to get all the
bubbles leading up to the pfr bubble at the bottom colored in green. ..."

Comment by Anonymous:

Congratulations! This is an extremely important event: A top ranked pure
mathematician, in a very short time, has mastered the Lean 4 automated
proof checker and applied it to a new result. This is an existence proof
for pure mathematicians to routinely codify their proofs in verifiable
way, as a part of daily methodology, in the same sense that writing
equations in LaTeX has become a standard practice.


19 Nov 2023

https://tonybaloney.github.io/posts/sub-interpreter-web-workers.html
Running Python Parallel Applications with Sub Interpreters

In 2017, CPython core developers proposed to change the structure of
interpreters so that the they were better isolated from the owning
Python process and could operate in parallel. The actual work to achieve
this was pretty huge (it isnt finished 6 years later) and is split into
two PEPs. PEP684 changes the GIL to be per-interpreter and PEP554 which
provides an API to create interpreters and share data between them.

Here are the models:

    Threads are fast to create, you can share any Python objects between
them and have a small overhead. Their drawback is that Python threads
are bound to the GIL of the process, so if the workload is CPU-intensive
then you wont see any performance gains. Threading is very useful for
background, polling tasks like a function that waits and listens for a
message on a queue.

    Coroutines are extremely fast to create, you can share any Python
objects between them and have a miniscule overhead. Coroutines are ideal
for IO-based activity that has an underlying API that supports
async/await.

    Multiprocessing is a Python wrapper that creates Python processes
and links them together. These processes are slow to start, so the
workload that you give them needs to be large enough to see the benefit
of parallelising the workload. However, they are truly parallel since
each one has its own GIL.

    Sub interpreters have the parallelism of multiprocessing, but with a
much faster startup time.

I gave a talk on this at PyCon APAC 2023 so check that out for a verbal,
detailed explanation.

https://www.youtube.com/watch?v=mqOQtC9Dt84&t=6850s

21 Nov 2023https://www.dijkstrascry.com/inventoryDijkstra's Rallying Cry for Generalization Dijkstra's library "Dijkstra's home in Nuenen  anno January 2011  contained a large
collection of scientific books, booklets, papers, manuscripts, etc. A
large part of that collection is now archived by me in Leuven and will
be discussed on this page. For the complete inventory, see below."

Lists of books etc. found in each box.  He says he had the family's permission.
https://tmpout.sh/3/20.htmleasylkb: Easy Linux Kernel Builder                                           ~ ackmage & netspooky                                   This short writeup is to introduce a convenience script for anyone who
wants to build arbitrary Linux kernels and bootable Debian images for
testing, debugging,or whatev. It's called easylkb and we will be
maintaining it here:
https://github.com/deepseagirl/easylkbvia https://news.ycombinator.com/item?id=38362874 23 comments after 13 hoursLinks to other methods and instructions for building Linux kernels etc.https://digibarn.com/collections/newsletters/peoples-computer/peoples-1972-oct/index.html People's Computer Company Newsletter #1(October 1972).jpg of each of the 16 pages.Also, "And some of our related publications of this period:Ted Nelson's Computer Lib and Homebrew Computer Club Newslettes"


22 Nov 2023

https://news.ycombinator.com/item?id=38379893 66 comments after 3 hours
Fortran 2023

Lots of comments on what Fortran is used for today, and why it is 
still better for that than any alternative.  

A comment links to this paper, 
The State of Fortran: https://arxiv.org/abs/2203.15110


https://www.jeffgeerling.com/blog/2023/so-you-want-make-raspberry-pi-killer
So you want to make a Raspberry Pi killer...

Review of "clones" -  single board computers similar to - RPi Compute
Modules 4 (CM4).

"Raspberry Pi has a first party OS that's actually good, and they devote
a ton of time and effort into making their hardware run with the latest
Linux kernel versions.

Many alternative SBCs run older kernels like 5.10 (or in one case,
ancient 4.19!), and that can cause it's own problems. SBC makers don't
take full ownership of their OS, or don't have the resources to maintain
a broad set of compatibility, so they lean on community distributions
like Armbian to do the work for them. ...

It's not 2021-early 2023 anymore. You can buy a Pi 4 at list MSRP almost
anywhere (even in retail storesmy local Micro Center has over 100 boards
in stock right now).

Pi 5 stock comes and goes, so check rpilocator.com and don't ever buy a
Pi from an unauthorized reseller. ..."

via https://news.ycombinator.com/item?id=38380511  5 comments after 3 hours

2OEH8eoCRo0 1 hour ago | unvote | prev | next []

"Good read. I think it's a phenomenon that applies to many things (such
as Linux distros). Your technical on-paper specs aren't as important as
the community, support, maturity, etc"

https://chrultrabook.github.io/docs/docs/supported-devices.htmlChromebook Linux Compatibility List (chrultrabook.github.io)

linked from https://chrultrabook.github.io/docs/"A chrultrabook is a modified Chromebook that is able to run Windows,
Linux, or even macOS by using MrChromeboxs coreboot firmware. The
purpose of this site is to provide documentation that is detailed, user-
friendly, and has up to date information about the hardware, software,
and firmware on Chromebooks ...

Warning
You are about to make unofficial changes to your device! This will
likely void any warranty. We provide zero warranty if you encounter
bugs, brick your device, lose your job because the alarm clock didnt go
off, or if a thermonuclear war starts. You are doing all changes at your
own risk! ..."

So this is *not* about the built-in Linux in Chromebooks.


24 Nov 2023

https://computerengineeringforbabies.com/blogs/engineering/how-i-built-computer-engineering-for-babies
How I Built Computer Engineering for Babies

A baby book with board pages with big buttons and lamps and a simple 
logic board all embedded.  Nice attractive design.

How he got prototypes, manufacturing, and shipping all done in China.
How he raised money for manufacturing and shipping on Kickstarter.

"I often hear (and I've repeated this too), that ideas are free and
execution is everything. I think that's true, but you still need to be
executing on the right idea. I got lucky in that the idea I chose to
execute on was the right one. I found product market fit with this
product, and that's really what has made it so successful. I am awful at
marketing, I am worse at sales. As cliche as it is, the only reason why
I've been so successful is because the book sells itself, and I
attribute that all the way back to the idea phase. ...

Like raccoons and many people who hang out on Hacker News, I like shiny
things, and over the next several years I kept putting this project
aside so I could spend my time building all manner of SAAS products that
would ultimately fail because I jumped in too soon and ran out of
energy, ignored the competitive landscape, or just wasn't lucky. But I
kept coming back to this project, and finally my wife told me that this
was by far my best idea, and she convinced me that I should make it a
high priority to just finish it to the end. This is probably the most
important thing. I had to really commit and decide that I was going to
see this product to the end of a Kickstarter campaign. At that point, I
could close the metaphorical book and move onto the next project, but I
decided to see this thing through to the end. ..."


https://news.ycombinator.com/item?id=38391446  74 comments in 16 hours
Mirage  A programming framework for building type-safe, modular systems (mirage.io)

Lots on unikernals and alternatives like containers and VMs, also 
alternative unikernel systems than Mirage.

reycharles 7 hours ago | root | parent | next []

"A big difference in my opinion is that projects like Mirage does not try
to reimplement the same hardware drivers as the host system and instead
implements much simpler drivers for virtual hardware.

For example, how do you write to a block device? You make a hypercall
with a "handle", offset into the block device, the number of blocks to
write and a pointer to memory to be written. There's no pretending it's
a spinny disk with sectors and heads or what have you.

https://github.com/Solo5/solo5/blob/bf29b8af11feec9dbc2e74cc...  "
     
eyberg 3 hours ago | root | parent | next []

"One of the key insights for unikernels in general is that everything is
virtualized now to begin with. The entire public cloud: AWS, GCP, Azure,
etc. is virtualization with an api on top of it.

So unikernels take advantage of this fact to get the performance,
security and ease of use benefits.

Hypervisors most definitely have better hardware-based isolation than a
few processes running in linux. In fact the isolation is so good that
the entire public clouds are built on this model."

These two comments make the point that modern unikernels are not intended to run on bare metal - they are intended to run on hypervisors.
This enables their device drivers to be much than in a 
standalone OS.  BUT...
    
eriangazag 9 hours ago | root | parent | next [] 

"... Currently, MirageOS is expanding to include bare-metal and embedded
systems, aiming to bring the same level of security and efficiency to
this domain. The move towards embedded systems is a natural progression
for MirageOS, given our emphasis on minimalism and security in
environments where resources are limited and reliability is crucial. See
for instance what is happening with SpaceOS:
https://tarides.com/blog/2023-07-31-ocaml-in-space-welcome-s...  "


https://log10.dev/building-web-browser
Building Web Browser

Building simple web browser from scratch with support for images and
hyperlinks

Uses Python with tk for GUI.

links to 
https://developer.mozilla.org/en-US/docs/Web/Performance/How_browsers_work


https://www.pdp8online.com/
Online PDP-8 Home Page, Run a PDP-8

A web site, links to more pages with documentation, memoirs, pictures etc.


26 Nov 2023

https://lindzey.github.io/blog/2019/02/09/my-first-pcb/
 My First PCB!  (2019)

design with KiCAD, get it build by OSHPark.

"For <$20, you can design a PCB, have it manufactured in a factory, and
get it mailed to you."

"I didn't spec out the full market of available fabricators because
OSHPark hit a sweet spot for me at the intersection of "cheap enough to
do on a whim" and "caters to hobbyists/small batches, plays exceedingly
well with KiCAD, with a bonus of the EE at work uses them for custom
boards for our several million dollar robot, so quality must be OK."

via https://news.ycombinator.com/item?id=38402879, 38 comments after 1 day

other experiences and other fabricators.


https://blog.glyph.im/2023/08/get-your-mac-python-from-python-dot-org.html
Get Your Mac Python From Python.org

"My recommendation is to use an official build from python.org. ...

Once you have installed Python from python.org, never pip install
anything globally into that Python, even using the --user flag. Always,
always use a virtual environment of some kind. ...

... Any time you need to do something new, you should make a fresh
virtual environment, and then you dont have to worry about library
conflicts between different projects that you may work on.

If you need to install tools written in Python, dont manage those
environments directly, install the tools with pipx. By using pipx, you
allow each tool to maintain its own set dependencies, which means you
dont need to worry about whether two tools you use have conflicting
version requirements, or whether the tools conflict with your own code. ..."


27 Nov 2023

https://weare.guru/office-life-in-the-1980s-vintage-photos/
Office Life in the 1980s (Vintage Photos)

links to this, much more interesting, 'drafting floors' with
many many drafting tables and lots of people working at them:

https://web.archive.org/web/20230408160205/https://weare.guru/vintage-work-pictures-from-before-the-dawn-of-autocad/
Vintage Work Pictures From Before the Dawn of AutoCAD

via https://news.ycombinator.com/item?id=38423581 53 comments after 23 hours



