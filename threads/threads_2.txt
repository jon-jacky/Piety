threads_2.txt

Experiments with Python threading using the pmacs editor with timers.py
and writer.py, with our custom pysh REPL from pyshell.py.

In this demonstration, we show two threads rapidly updating two buffers
in two windows, while we type at our pysh REPL to control  the threads.

We need our custom pysh REPL for this demo so our windowing code can
restore the cursor to the correct location in the REPL command line as we
type, after it updates each of the windows.  This is not possible with
the standard Python REPL.

It is easiest to explain by doing this demonstration. Just
follow along, typing the statements here as you go. 

(Alternatively, you can run the script in threads_2.py - see directions
at the end of this file.)

At the system command prompt (often $), define the PYTHONPATH, so this
demo works in any directory.

...$  .  ~/Piety/bin/paths

Run the tm script (not pm) which imports the editor, timer, and writer
modules, opens a window, and starts the pysh REPL:

...$ python3 -im tm

At the pysh prompt >> (not the standard Python prompt >>>),
create two buffers in two windows:

>> e('a.txt')
a.txt, 0 lines
>> o2()
>> e('b.txt')
b.txt, 0 lines

Now we have two windows.  Create two Timer objects, and two Writer objects
that the threads will use to redirect thread output to the windows:

>> ta = Timer()
>> tb = Timer()

>> abuf = Writer('a.txt')
>> bbuf = Writer('b.txt')

Now start the A thread, that prints 1000 messages at 1 second
intervals, redirected by the abuf Writer to the a.txt window:

>> Thread(target=ta.timer,args=(1000,1,'A',abuf)).start()

The a.txt window updates with a new timer message every second,
but we can still type in the pysh REPL to start another thread:

>> Thread(target=tb.timer,args=(1000,1,'B',bbuf)).start()

Now the b.txt window is also updating at 1/sec. We can type commands to
change the speed of a timer by updating its delay attribute:

>> tb.delay = 0.5

Now the b.txt window updates 2/sec.  We can still type at the pysh REPL

>> ta.delay = 0.1

Now the a.txt window updates 10/sec.  

We can still type at the pysh REPL. Experiment with speeding up and
slowing down the updates in both  windows.  How fast can you go and still
type at the REPL without losing control of the cursor?

Call the threads function to list the running threads:

>> threads()
[<_MainThread(MainThread, started 547740599488)>, <Thread(Thread-1
(timer), started 547728257440)>, <Thread(Thread-2 (timer), started
547719803296)>]

Each thread exits after it prints 1000 messages, as we specified in  our
Thread(...) command.  Or, you can stop a thread at any time:

>> ta.run = False
>> threads()
[<_MainThread(MainThread, started 547740599488)>, <Thread(Thread-2
(timer), started 547719803296)>]

Both threads (other than MainThread) must be stopped before you can
exit the pysh and standard Python REPLs without using ctrl-C to 
interrupt them.

As an alternative to typing the commands in this page, you can run 
the script in threads_2.py.  First at the system prompt type the command to 
set the PYTHONPATH: ...$ . ~/Piety/bin/paths then type the command
to open a window and start the pysh REPL: ...$ python3 -im tm
Then at the pysh prompt type >> import threads_2 to open two windows
and start both threads, then >> from threads_2 import * to enable commands
to display threads >> threads() and control them >> ta.delay = 0.5 etc.


Revised May 2024


   
