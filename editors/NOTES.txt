
notes
=====

Notes on the code in *Piety/editors*.

This is a .txt not an .md file to emphasize its roughness and incompleteness.

### sked ###

Line editor based on the classic Unix ed.

No main program!  Editor commands are just functions defined here, to
call from the Python REPL.

Global variables used by editor functions are defined and initialized
in the except block in the try...except... at the beginning of the module,
which must be executed before calling any of the functions here.
It is only executed the first time the module is imported, not
when it is reloaded.  This makes it possible to 
reload the sked module while preserving work in progress (which 
is stored in the global variables initialized in the except block).  The same
method is used for the other editor modules, edsel, dmacs, pmacs
and editline.  

This module produces no display output, except print statements that
print to the Python REPL.  However, many functions here include optional
place- holder arguments which are hooks for display functions that could
be defined in other modules.  Therefore this module can serve as the
foundation for display editors.

In this module we usually use print('...\n\r', end='') because it prints
end-of- line  correctly in both the terminal line mode used in the
Python REPL and in the terminal raw character mode used in some
display functions.

In save_buffer and restore_buffer we save buffer items as a dictionary
not an object or tuple so we can add items later without requiring
changes to existing code and without invalidating already existing saved
buffers.  We use the dictionary get method to read dictionary items,
because it does not crash if an item is missing from old saved data,
it just returns an appropriate default.

The items read from the dictionary are assigned to distinct global 
variables at module level so they can be accessed by code or from the 
REPL without verbose notation.

The text buffer is a list of lines, where every line ends with a newline
character, '\n'.  This is because we load the buffer from a file by
using the  file readlines method, which leaves the \n on each line.  We
write the buffer out to a file by using the file writelines method,
which does not append \n to each line, but assumes it is already there.

So we must be careful to maintain the \n at the end of each line. There
are many lines of code in sked and also the other editor modules that
strip off the \n in contexts where it should not be, and other lines
that append \n where it needs to be.  This is a nuisance to always have
to get right, and makes the code look noisy and cluttered.

In retrospect it might have been easier and cleaner to always work with
lines with no final \n. To do that, we would  strip the final \n off
each line when we read  a file, and append the final \n to each line
when we write a file.  This would  put all the \n maintenance in just
two places once and for all, and simplify the code elsewhere.

We can refer to each line by its line number, its index in the list of
lines in the buffer.   Python indexing is zero-based so the first line
in the buffer has index 0.   It seems to make more sense and be more
familiar to call the first line number 1, not 0.   So each buffer begins
at index 0 with an initial empty line containing only '\n'.  This
initial line is inaccessible: it is never  displayed, printed, or edited.
We always work with buffer contents beginning with line 1.

Maintaining and working around the initial empty line at index 0
complicates the code, especially when adding text to an initially empty
buffer.  In retrospect it might have been easier and cleaner  to treat
the first line at index 0 as an ordinary line for all purposes. We would
just have to remember that the first line in the buffer is  numbered 0
(not 1) in those (now rare)  occasions where we refer to lines by line
number.

### edsel ###

Display editor that uses the same commands as *sked*.

Display buffer contents in a window as they are updated by the sked editor.

This module has four sections, that define four kinds of functions:

1. Display building blocks that do not depend on sked

2. Display functions that show effects of sked editing commands

Display fcns passed as args to editing commands defined in the sked
module.  The default arguments defined in sked produce no display
output.   These functions, when passed to fcns in sked, do produce
display output.  In this way they are used to define the wrapped display
commands below.  The function here display_<name> is passed to the sked
fcn ed.<name>.

3. Editing commands

Editing functions that generate display output by wrapping functions from
sked and passing the display fcns defined above. Each function here has
the same name as the sked function it wraps.

4. Window management functions that do not depend on sked

We have considered moving out sections 1 and 4, which do not 
depend on sked, to their own separate module titled 'frame'.

This could make for a nicer modular structure where the dependencies
are clearer.   But it also proliferates modules and makes code more verbose
because edsel would need to put the 'frame.' prefix all over.  

So we decided against separating out a 'frame' module.

### dmacs ###

Invoke editor functions with emacs keys (control keys or key seqs).

The module name dmacs differs from the editor function name dm
so the function name does not shadow the module name when we do
'from dmacs import dm' so we can type the function name in the REPL
without the module name prefix, just dm() not dmacs.dm().   
Then, if we edit more commands into dm, we can load them without restarting
the session by reload(dmacs).  The argument to reload must be the module name.

### editline ###

This code may be used to edit a line in a text buffer, where 
every line in the buffer ends with a newline character, Python '\n'.
The standard Python readlines function puts it there when it loads the file.

BUT this code may also be used to edit lone command lines, which might
not end with \n.

So code in this module has special cases to handle \n.  

Functions in this module must always leave the newline character
at the end of the line.  In particular, kill_line.

Functions in this module also must work correctly with lines that
do not end in \n.  They must not add \n where there was none.
Again, kill_line.

Functions in this module that advance point must not advance point
past the final newline.   In particuler, move_end and forward_char.  
This ensures that when new characters are typed, they are inserted 
ahead of the final newline.

### pmacs ###

In *pmacs*, *C_k kill_line* and *C_y yank* work in two modes: *inline*
mode and *multiline* mode.  In inline mode, kill_line cuts a segment
from the cursor up to but not including the newline character '\n' at
the end of the line, saves the segment in *editline.killed*, and yank
pastes the killed segment back into the line after the cursor.  In
multiline mode, one or more consecutive  kill_line cuts a sequence of
whole lines including the final newline, saves the lines in
*sked.killed* and yank pastes the sequence of killed lines into the text
buffer  after the current line.

You transition from inline mode to multiline mode by using kill_line
on an empty line consisting only of the newline character.  The usual
way to do this is to type kill_line a second time after first using
kill_line to cut the contents of the line, leaving an empty line.
Those contents will be the first line that is pasted by a subsequent yank.

You transition from multiline mode back to inline mode by typing
kill_line after any command other than another kill_line. That kill_line
will be in inline mode, unless it is made on an empty line consisting
only of a newline.

In the *pmacs* module, the *kill_line* function implements both modes
and the transitions between them.  It is complicated because it has
special cases for handling newlines, empty lines, and the history of
commands. This is the cost we pay in complexity for supporting both
modes in a reasonably convenient way, so you can just edit with
kill_line and yank without thinking about the modes -- the commands just behave
as you would wish.  We have tried to put all that complexity in just one
place, the *pmacs* *kill_line* function.  The complexity derives from
trying to provide convenient behavior in what is essentially a line-based
editor.

The *pmacs* *yank* function also handles both modes, but the logic there
is simple.

Revised Jan 2024

